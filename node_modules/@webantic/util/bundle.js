(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
/** @module util/array */
exports.__esModule = true;
/**
 * @function move
 * @export
 * @summary moves an element at a given index to
 * another index
 * @param {Array<any>} array an array containing the
 * element to move
 * @param {number} fromIndex the location of the element
 * to move
 * @param {number} toIndex the destination index
 * @returns {Array<any>}
 */
function move(array, fromIndex, toIndex) {
    var copy = array.slice();
    var element = copy[fromIndex];
    copy.splice(fromIndex, 1);
    copy.splice(toIndex, 0, element);
    return copy;
}
exports.move = move;
/**
 * @function addToSet
 * @export
 * @summary Returns an array containing `item`, adding
 * it if it is missing.
 * Note: this only uses indexOf for comparison, so it
 * will not work for objects
 * @param {Array<any>} array an array to potentially add
 * `item` to
 * @param {any} item an item to ensure is within `array`
 * @returns {Array<any>} the new array
 */
function addToSet(array, item) {
    var copy = array.slice();
    if (copy.indexOf(item) === -1) {
        copy.push(item);
    }
    return copy;
}
exports.addToSet = addToSet;
/**
 * @function addToSetInPlace
 * @export
 * @summary Adds `item` to `set` if it is
 * missing, returns true if `set` was modified
 * @param {Array<any>} set a set to potentially add
 * `item` to
 * @param {any} item an item to ensure is within `set`
 * @returns {boolean} true if `set` was modified
 */
function addToSetInPlace(set, item) {
    if (set.indexOf(item) === -1) {
        set.push(item);
        return true;
    }
    return false;
}
exports.addToSetInPlace = addToSetInPlace;
/**
 * @function first
 * @export
 * @summary returns the first element in an array
 * @param {any[]} array the array to search in
 * @returns {any} the first element of the array
 */
function first(array) {
    if (array.length) {
        return array[0];
    }
}
exports.first = first;
/**
 * @function last
 * @export
 * @summary returns the last element in an array
 * @param {any[]} array the array to search in
 * @returns {any} the last element of the array
 */
function last(array) {
    if (array.length) {
        return array[array.length - 1];
    }
}
exports.last = last;
/**
 * @function eachUntil
 * @export
 * @summary calls `callback` for each item in an array,
 * provided that the previous iteration didn't return `false`
 * @param {any[]} array of items to iterate
 * @param {ForEachCallback} callback the function to invoke
 * for each element in the supplied array
 */
function eachUntil(array, callback) {
    for (var i = 0; i < array.length; i++) {
        if (callback(array[i], i, array) === false) {
            break;
        }
    }
}
exports.eachUntil = eachUntil;
/**
 * @function remove
 * @export
 * @summary Remove an item from an array
 * @param array {any[]} The array to remove `item` from
 * @param item {any} The item to remove. Cannot be an object
 * @returns {any[]} The new array
 * @example
 * var array = ['a', 'b', 'c']
 * remove(array, 'b') // returns ['a', 'c']
 */
function remove(array, item) {
    var clonedArray = Array.prototype.slice.call(array);
    clonedArray.splice(clonedArray.indexOf(item), 1);
    return clonedArray;
}
exports.remove = remove;
/**
 * @function removeAll
 * @export
 * @summary Removes all occurrences of `item` from `array`
 * @param {any[]} array The array to remove all occurrences of `item` from
 * @param {any} item The item to remove
 * @returns {any[]} The new array
 * @example
 * var array = ['a', 'b', 'b', 'c']
 * removeAll(array, 'b') // returns ['a', 'c']
 */
function removeAll(array, item) {
    var clonedArray = Array.prototype.slice.call(array);
    while (clonedArray.indexOf(item) !== -1) {
        clonedArray = remove(clonedArray, item);
    }
    return clonedArray;
}
exports.removeAll = removeAll;
/**
 * @function forceArray
 * @summary wraps the input in an array if it isn't already one
 * @param {any} input
 * @returns {any[]} always an array
 */
function forceArray(input) {
    return Array.isArray(input) ? input : [input];
}
exports.forceArray = forceArray;

},{}],2:[function(require,module,exports){
"use strict";
/** @module util/blaze */
exports.__esModule = true;
var metaCollection = null;
/**
 * Attach a DDP connection to Blaze so that it is available in templates' `this.subscribe`
 *
 * @param {Object} Blaze a reference to Blaze
 * @param {Object} API The DDP connection to attachs
 */
function attachAPI(Blaze, API) {
    var Template = Blaze.Template;
    if (Blaze.TemplateInstance.prototype.api) {
        // already attached
        return;
    }
    var globalActiveMethods = new ReactiveVar({});
    function incDecIsCallingMethod(name, amount, reactiveVar) {
        if (reactiveVar === void 0) { reactiveVar = globalActiveMethods; }
        var curr = reactiveVar.get();
        if (amount <= 0 && !curr[name]) {
            return;
        }
        if (!curr[name]) {
            curr[name] = amount;
        }
        else {
            curr[name] += amount;
        }
        if (curr[name] <= 0) {
            delete curr[name];
        }
        reactiveVar.set(curr);
    }
    function makeOnReadyOnStopObject(args) {
        var defaultHandlers = {
            onReady: function () { },
            onStop: function () { }
        };
        var last = args[args.length - 1];
        if (typeof last === 'function') {
            args[args.length - 1] = {
                onStop: function () { },
                onReady: function () {
                    last();
                }
            };
        }
        else if (!last || typeof last !== 'object' || (!last.onReady && !last.onStop)) {
            args.push(defaultHandlers);
        }
        var lastArg = args[args.length - 1];
        // Incase we had onReady but not onStop or the other way round, make sure we have both
        if (!lastArg.onStop) {
            lastArg.onStop = function () { };
        }
        if (!lastArg.onReady) {
            lastArg.onReady = function () { };
        }
        // Ensure consistent behaviour by forcing async onReady / onStop callbacks
        // get some nasty bugs if these are sometimes called synchronously - consider this:
        // `const sub = this.api.subscribe('something', function onReady () { console.log(sub.subscriptionId) })`
        // throws a ReferenceError - cannot read property "subscriptionId" of undefined. Because the `api.subscribe()`
        // func hasn't returned yet.
        var oldOnReady = lastArg.onReady;
        var oldOnStop = lastArg.onStop;
        lastArg.onReady = function () { return Meteor.defer(oldOnReady); };
        lastArg.onStop = function () { return Meteor.defer(oldOnStop); };
        return args;
    }
    function cleanupApiSubscriptionsOnDestroy() {
        (this.__apiSubscriptions || []).forEach(function (subscription) {
            subscription.stop();
        });
    }
    Blaze.TemplateInstance.prototype.api = {
        connection: API,
        _init: function () {
            var template = Template.instance() || this;
            if (!template.__apiInit) {
                template.__apiDependency = new Tracker.Dependency();
                template.__apiInit = true;
                template.__metaCollections = {};
                template.__callingMethods = new ReactiveVar({});
                template.autorun(function (handle) {
                    handle.onStop(function () {
                        cleanupApiSubscriptionsOnDestroy.apply(template);
                    });
                });
            }
        },
        subscribeAndCount: function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var template = Template.instance() || this;
            template.api._init.call(template);
            var stopped = false;
            args = makeOnReadyOnStopObject(args);
            var existing = args[args.length - 1].onStop || function () { };
            args[args.length - 1].onStop = function () {
                stopped = true;
                existing();
            };
            var onCountChanged = function () { };
            var currentCount = 0;
            var subscriptionId = (_a = template.api).subscribe.apply(_a, args).subscriptionId;
            if (!metaCollection) {
                metaCollection = new Mongo.Collection('webantic_subscriptionMeta');
            }
            template.autorun(function (handle) {
                if (stopped) {
                    handle.stop();
                }
                var currentMeta = metaCollection.findOne(subscriptionId);
                if (currentMeta) {
                    currentCount = currentMeta.count;
                    onCountChanged(currentMeta.count);
                }
            });
            return {
                /**
                 * Add a function to get called when the count changes
                 * @param callback {function}
                 */
                onCountChanged: function (callback) {
                    onCountChanged = callback;
                    callback(currentCount);
                },
                subscriptionId: subscriptionId
            };
            var _a;
        },
        subscribe: function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var template = Template.instance() || this;
            template.api._init.call(template);
            args = makeOnReadyOnStopObject(args);
            var lastArg = args.pop();
            var options = {
                onReady: lastArg.onReady,
                onStop: function () {
                    template.__apiSubscriptions = template.__apiSubscriptions.filter(function (subscriptionObject) {
                        return subscriptionObject.subscriptionId !== result.subscriptionId;
                    });
                    // remove any refs to the meta collection (keeps things tidy and prevents memory leaks)
                    delete API._stores[metaCollectionName];
                    template.__apiDependency.changed();
                    lastArg.onStop.apply(arguments);
                }
            };
            var result = (_a = API).subscribe.apply(_a, args.concat([options]));
            // keep track of this subscription so we can tell when the subscriptions are ready
            template.__apiSubscriptions = template.__apiSubscriptions || [];
            template.__apiSubscriptions.push(result);
            // track the meta collection if not already tracked so we can tidy up after ourselves
            var subscriptionName = args[0];
            var subscriptionId = result.subscriptionId;
            var metaCollectionName = subscriptionName + "_" + subscriptionId; // e.g. 'pens_rcKQkhKy38JdM5H5G'
            if (!(metaCollectionName in template.__metaCollections)) {
                // create the new collection and pass in the correct connection object
                template.__metaCollections[metaCollectionName] = new Mongo.Collection(metaCollectionName, API);
            }
            // provide a convenience property on the returned object
            result.meta = template.__metaCollections[metaCollectionName];
            // remove this subscription from the array when it's stopped
            template.__apiDependency.changed();
            return result;
            var _a;
        },
        subscriptionsReady: function () {
            var template = Template.instance() || this;
            template.api._init.call(template);
            template.__apiDependency.depend();
            return (template.__apiSubscriptions || []).every(function (subscription) {
                return subscription.ready();
            });
        },
        /**
         * @param methodName the method to check, if null, checks if the api is calling any method at all
         * @param global whether to check if the api is calling a method globally or just on this template
         */
        isCalling: function (methodName, global) {
            if (global === void 0) { global = false; }
            var reactiveVar = global ? globalActiveMethods : (Template.instance() || this).__callingMethods;
            if (!methodName) {
                return Object.keys(reactiveVar.get()).length > 0;
            }
            return reactiveVar.get()[methodName] != null;
        },
        quietly: function (func) {
            this.quietMode = true;
            func();
            this.quietMode = false;
        },
        call: function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var templateInstance = Template.instance() || this;
            var api = templateInstance.api;
            api._init.call(templateInstance);
            var givenCallback;
            if (typeof args[args.length - 1] === 'function') {
                givenCallback = args.pop();
            }
            var methodName = args[0];
            if (!methodName || typeof methodName !== 'string') {
                console.warn(methodName + ' is not a method');
            }
            return new Promise(function (resolve, reject) {
                var ourCallback = function (error, result) {
                    if (!api.quietMode) {
                        incDecIsCallingMethod(args[0], -1);
                        incDecIsCallingMethod(args[0], -1, templateInstance.__callingMethods);
                    }
                    if (givenCallback) {
                        givenCallback(error, result);
                    }
                    if (error) {
                        reject(error);
                    }
                    else {
                        resolve(result);
                    }
                };
                if (!api.quietMode) {
                    incDecIsCallingMethod(args[0], 1);
                    incDecIsCallingMethod(args[0], 1, templateInstance.__callingMethods);
                }
                ;
                API.call.apply(API, args.concat(ourCallback));
            });
        }
    };
    /**
     * @summary whether all subscriptions are ready, including those from the api
     * @returns {Boolean}
     */
    Template.registerHelper('subscriptionsReady', function () {
        return Template.instance().api.subscriptionsReady() && Template.instance().subscriptionsReady();
    });
    /**
     * @summary is the api calling a method right now on this template
     * @returns {Boolean}
     */
    Template.registerHelper('apiCalling', function (global) {
        if (global === void 0) { global = false; }
        return Template.instance().api.isCalling(null, global);
    });
}
exports.attachAPI = attachAPI;

},{}],3:[function(require,module,exports){
"use strict";
/** @module util/collection */
exports.__esModule = true;
var string = require("./string");
/**
 * @function insert
 * @export
 * @summary Inserts a number of `items` into the given `collection`
 * @param {Mongo.Collection} collection A Mongo.Collection
 * @param {Array<object>} items the items to insert.
 * @returns {Object} An object with the following keys:
 * - success {boolean} whether no inserts failed
 * - succeeded:  {Array<object|number>} The new document or
 *   the result of the insert operation
 * - failed {Array<object>} An array of failed insert results
 *   with the following keys:
 *   - code {number} the error code
 *   - message {string} the error message
 *   - meta {any} any additional, contextual data about the error
 */
function insert(collection, items) {
    if (!(items instanceof Array)) {
        items = [items];
    }
    var successfulInserts = [];
    var failedInserts = [];
    items.forEach(function processItems(item) {
        try {
            var id = collection.insert(item) || false;
            var result = id;
            if (!result) {
                throw new Error('unknown-error-prevented-insert');
            }
            successfulInserts.push(collection.findOne(item._id) || result);
        }
        catch (e) {
            failedInserts.push({ code: 500, message: 'unknown-error-prevented-insert', meta: item });
        }
    });
    return {
        success: failedInserts.length === 0,
        succeeded: successfulInserts,
        failed: failedInserts
    };
}
exports.insert = insert;
/**
 * @function update
 * @export
 * @summary Updates a number of `items` into the given `collection`
 * @param {Mongo.Collection} collection A Mongo.Collection
 * @param {Array<object>} items the items to update. The _id field
 * is used as a selector, the rest of the object as the modifier
 * @returns {Object} An object with the following keys:
 * - success {boolean} whether no updates failed
 * - succeeded {Array<object|number>} The new document or
 *   the result of the update operation
 * - failed {Array<object>} An array of failed update results
 *   with the following keys:
 *   - code {number} the error code
 *   - message {string} the error message
 *   - meta {any} any additional, contextual data about the error
 */
function update(collection, items) {
    if (!(items instanceof Array)) {
        items = [items];
    }
    var successfulUpdates = [];
    var failedUpdates = [];
    items.forEach(function processItems(item) {
        if (!item._id) {
            failedUpdates.push({ code: 404, message: 'item-not-found', meta: item });
        }
        else {
            try {
                var itemClone = {};
                for (var key in item) {
                    if (item.hasOwnProperty(key) && key !== '_id') {
                        itemClone[key] = item[key];
                    }
                }
                var result = collection.update({ _id: item._id }, { $set: itemClone }) || false;
                if (!result) {
                    failedUpdates.push({ code: 404, message: 'item-not-found', meta: item });
                }
                else {
                    successfulUpdates.push(collection.findOne(item._id) || result);
                }
            }
            catch (e) {
                failedUpdates.push({ code: 500, message: 'unknown-error-prevented-update', meta: item });
            }
        }
    });
    return {
        success: failedUpdates.length === 0,
        succeeded: successfulUpdates,
        failed: failedUpdates
    };
}
exports.update = update;
/**
 * @function remove
 * @export
 * @summary Remvoves a number of items by their _id from the
 * given `collection`
 * @param {Mongo.Collection} collection A Mongo.Collection
 * @param {Array<string>} _ids the _ids of the items to remove.
 * @returns {Object} An object with the following keys:
 * - success {boolean} whether no inserts failed
 * - succeeded {Array<object|number>} The result of the
 *   remove operation
 * - failed {Array<object>} An array of failed removal results
 *   with the following keys:
 *   - code {number} the error code
 *   - message {string} the error message
 *   - meta {any} any additional, contextual data about the error
 */
function remove(collection, _ids) {
    if (!(_ids instanceof Array)) {
        _ids = [_ids];
    }
    var successfulRemovals = [];
    var failedRemovals = [];
    _ids.forEach(function processIds(_id) {
        try {
            if (collection.remove({ _id: _id })) {
                successfulRemovals.push(_id);
            }
            else {
                failedRemovals.push({ code: 404, message: 'item-not-found', meta: _id });
            }
        }
        catch (ex) {
            failedRemovals.push({ code: 500, message: 'unknown-error-prevented-removal', meta: _id });
        }
    });
    // If this method is being invoked via HTTP, set the status code
    if (!failedRemovals.length && successfulRemovals.length && typeof this.setHttpStatusCode === 'function') {
        this.setHttpStatusCode(204);
    }
    return {
        success: failedRemovals.length === 0,
        succeeded: successfulRemovals,
        failed: failedRemovals
    };
}
exports.remove = remove;
/**
 * @function caseInsensitiveSelector
 * @export
 * @summary Generates a selector for a field which will perform a case-insensitive
 * lookup for the given value
 * @param fieldName {string} the name of the field to query
 * @param str {string} the value to query
 * @returns {object} the Mongo selector object
 */
function caseInsensitiveSelector(fieldName, str) {
    // Performance seems to improve up to 4 prefix characters
    var prefix = str.substring(0, Math.min(str.length, 4));
    var permutations = string.caseInsensitivePermutations(prefix);
    var orClause = permutations.map(function mapPermutations(prefixPermutation) {
        return _a = {},
            _a[fieldName] = new RegExp('^' + string.escapeRegExp(prefixPermutation)),
            _a;
        var _a;
    });
    return {
        $and: [
            {
                $or: orClause
            },
            (_a = {},
                _a[fieldName] = new RegExp('^' + string.escapeRegExp(str) + '$', 'i'),
                _a)
        ]
    };
    var _a;
}
exports.caseInsensitiveSelector = caseInsensitiveSelector;
/**
 * @function selectorFromParams
 * @export
 * @summary Parses "skip", "limit", "sort", "before" and "since" into a selector and options object
 * @param {Object} { skip, limit, sort, before, since, createdOrUpdated, fields } An object containing any/all of the defined
 * keys. "createdOrUpdated" can be either "createdAt" (default) or "updatedAt". It determines what "before" and "since"
 * act upon
 * @returns {Object} { selector, options } The constructed selector & options objects
 */
function selectorFromParams(_a) {
    var _b = _a === void 0 ? {} : _a, skip = _b.skip, limit = _b.limit, sort = _b.sort, before = _b.before, since = _b.since, createdOrUpdated = _b.createdOrUpdated, fields = _b.fields;
    function getDate(val) {
        var parsedDate = null;
        if (val instanceof Date) {
            parsedDate = val;
        }
        else if (typeof val === 'string' || typeof val === 'number') {
            if (!isNaN(new Date(val).getTime())) {
                parsedDate = new Date(val);
            }
        }
        return parsedDate;
    }
    // createdOrUpdated defaults to createdAt
    createdOrUpdated = createdOrUpdated === 'updated' ? 'updatedAt' : 'createdAt';
    var selector = {};
    var options = {};
    /*
      selector
    */
    if (before && getDate(before)) {
        selector[createdOrUpdated] = {
            $lte: getDate(before)
        };
    }
    if (since && getDate(since)) {
        if (typeof selector[createdOrUpdated] === 'object') {
            selector[createdOrUpdated].$gte = getDate(since);
        }
        else {
            selector[createdOrUpdated] = {
                $gte: getDate(since)
            };
        }
    }
    /*
      options
    */
    if (skip) {
        options.skip = skip;
    }
    if (limit) {
        options.limit = limit;
    }
    if (sort && typeof sort === 'object') {
        var safeSort = {};
        for (var key in sort) {
            if (key[0] !== '$' && typeof sort[key] === 'number') {
                safeSort[key] = sort[key];
            }
        }
        options.sort = sort;
    }
    if (fields) {
        options.fields = {};
        for (var field in fields) {
            options.fields[field] = parseInt(fields[field], 10);
        }
    }
    return {
        selector: selector,
        options: options
    };
}
exports.selectorFromParams = selectorFromParams;
/**
 * @function getObserverHandlers
 * @export
 * @summary Returns a map of default observe callback handlers
 * @param {any} context The `this` context. It should contain `added`, `changed` and `removed` methods
 * @param {string} collection The name of the collection to add/change/remove documents to/from
 * @returns {Object} { added, changed, removed } The map of callback handlers
 */
function getObserverHandlers(context, collection) {
    return {
        added: function (id, fields) {
            context.added(collection, id, fields);
        },
        changed: function (id, fields) {
            context.changed(collection, id, fields);
        },
        removed: function (id) {
            context.removed(collection, id);
        }
    };
}
exports.getObserverHandlers = getObserverHandlers;

},{"./string":18}],4:[function(require,module,exports){
(function (process){
"use strict";
/// <reference path="../typings/index.d.ts" />
/** @module util/config */
exports.__esModule = true;
// @ts-check
var meteor_1 = require("./meteor");
var object_1 = require("./object");
/**
 * A configuration class - provides a DB-backed, environment variable / meteor.settings populated set of config values
 *
 * @param {Mongo.Collection} collection the config collection
 * @param {Object} Meteor a reference to the Meteor object
 * @param {Object} [Tracker] an optional reference to Tracker - will be mocked in a non-reactive way if not supplied
 * @param {Object} [connection] an optional override for the DDP connection to use to subscribe to the config pub
 * @class Configuration
 */
var Configuration = (function () {
    function Configuration(_a) {
        var collection = _a.collection, Meteor = _a.Meteor, Tracker = _a.Tracker, connection = _a.connection;
        meteor_1.assert(collection, 'Missing collection in Configuration constructor');
        meteor_1.assert(Meteor, 'Missing reference to Meteor in Configuration constructor');
        // in-memory store of config values
        this.items = {};
        // tracker dep
        this.dependency = Tracker ? new Tracker.Dependency() : this._trackerMock();
        // ref to Meteor
        this.Meteor = Meteor;
        // DB store
        this._collection = collection;
        // DDP connection for pub/sub
        // this.connection = connection || (Meteor as any as DDP.DDPStatic)
        this._handlePubSub(connection);
    }
    /**
     * An internal function to provide a default Tracker object (which does NOT support reactivity)
     *
     * @returns {Object} a mocked Tracker object
     * @memberof Configuration
     */
    Configuration.prototype._trackerMock = function () {
        return {
            depend: function (fromComputation) { return true; },
            changed: function () { },
            hasDependents: function () { return false; }
        };
    };
    /**
     * An internal method to provide public configuration values to clients
     *
     * @param {any} cb A callback to be called when the subscription is ready
     *
     * @memberof Configuration
     */
    Configuration.prototype._handlePubSub = function (connection) {
        var _this = this;
        var callback = function () {
            if (_this._observer) {
                _this._observer.stop();
            }
            _this._cursor = _this._collection.find({});
            _this._observer = _this._getObserver(_this._cursor);
        };
        if (this.Meteor.isServer) {
            this.Meteor.publish('__public_configuration', function () { return _this._collection.find({ public: true }); });
            callback();
        }
        else if (connection) {
            connection.subscribe('__public_configuration', {
                onReady: callback,
                onStop: callback
            });
        }
    };
    /**
     * A method to get a handle to an observer from a cursor
     *
     * @param {Mongo.Cursor} cursor
     * @returns handle to a observer
     *
     * @memberof Configuration
     */
    Configuration.prototype._getObserver = function (cursor) {
        var self = this;
        return cursor.observeChanges({
            added: function documentAddedHandler(id, fields) {
                fields.isPublic = fields.public;
                self.addItem(Object.assign(fields, { added: true }));
            },
            changed: function documentChangedHandler(id, fields) {
                // this only works because the id is the same as the key,
                // meaning we don't have to have all the fields at hand here
                var doc = self._collection.findOne(id);
                doc.isPublic = doc.public;
                self.set(id, Object.assign(doc, { options: { isFromObserver: true } }));
            },
            removed: function () { }
        });
    };
    /**
     * Check whether the type of something matches what is expected
     *
     * @param {any} type Either a constructor, or a string. To be checked against the result of `typeof`
     * @param {any} value The value to check
     * @returns {Boolean} whether the type matches
     *
     * @memberof Configuration
     */
    Configuration.prototype._checkType = function (type, value) {
        if (typeof type === 'function') {
            if (value instanceof type) {
                // instance check ( e.g. for `var str = new String("...` )
                return true;
            }
            // turn `function String (...` into `"string"`
            type = type.name.toLowerCase();
        }
        return typeof value === type;
    };
    /**
     * Gets a value from process.env / meteor.settings or falls back to the one provided
     *
     * @param {any} key The key for the value
     * @param {any} value The default value
     * @returns {any}
     *
     * @memberof Configuration
     */
    Configuration.prototype._getValue = function (key, value) {
        if (this.Meteor.isServer) {
            if (this._collection.findOne(key)) {
                value = this._collection.findOne(key).value;
            }
            if (object_1.didResolve(process, "env." + key)) {
                try {
                    value = JSON.parse(process.env[key]);
                }
                catch (ex) {
                    value = process.env[key];
                }
            }
            if (object_1.didResolve(this.Meteor, "settings." + key)) {
                value = this.Meteor.settings[key];
            }
        }
        else if (object_1.didResolve(this.Meteor, "settings.public." + key)) {
            value = this.Meteor.settings.public[key];
        }
        return value;
    };
    /**
     * Adds a value to the in-memory store & upserts it to the db (unless overwrite is present and `false`)
     *
     * @param {any} { key, value, type, isPublic, overwrite, added }
     *
     * @memberof Configuration
     */
    Configuration.prototype.addItem = function (_a) {
        var key = _a.key, value = _a.value, type = _a.type, isPublic = _a.isPublic, isPrivileged = _a.isPrivileged, overwrite = _a.overwrite, added = _a.added;
        if (type) {
            meteor_1.assert(type && this._checkType(type, value), "Type check failed: " + JSON.stringify({ key: key, type: type, value: value }));
        }
        value = this._getValue(key, value);
        if (this.Meteor.isServer) {
            isPublic = typeof isPublic === 'boolean' ? isPublic : false;
            var typeStr = type;
            if (typeof type === 'function') {
                typeStr = type.name.toLowerCase();
            }
            var doc = {
                key: key,
                value: value,
                type: typeStr,
                public: isPublic,
                privileged: isPrivileged
            };
            if (overwrite !== false) {
                // upsert isn't working with autovalues
                if (this._collection.findOne(key)) {
                    this._collection.update(key, { $set: doc }, { removeEmptyStrings: false });
                }
                else if (!added) {
                    doc._id = key;
                    this._collection.insert(doc, { removeEmptyStrings: false });
                }
            }
        }
        var item = Object.assign({ value: value, type: type }, this._collection.findOne({ key: key }) || {});
        this.items[key] = item;
        this.dependency.changed();
    };
    /**
     * Gets the in-memory value for a given key
     *
     * @param {any} key
     * @returns {any} the value
     *
     * @memberof Configuration
     */
    Configuration.prototype.get = function (key) {
        this.dependency.depend();
        return this.items[key] && this.items[key].value;
    };
    /**
     * Update the in-memory value and stored value in the db
     *
     * @param {any} key
     * @param {any} { value, type, options }
     *
     * @memberof Configuration
     */
    Configuration.prototype.set = function (key, _a) {
        var value = _a.value, type = _a.type, options = _a.options;
        options = options || {};
        var item = this._collection.findOne({ key: key });
        if (!item) {
            return;
        }
        type = type || item.type;
        if (value) {
            var overrides = { value: value };
            if (type) {
                overrides.type = type;
                meteor_1.assert(this._checkType(type, value), "Type check failed: " + JSON.stringify({ key: key, type: type, value: value }));
            }
            if (this.Meteor.isServer && !options.isFromObserver && item.value.toString() !== value.toString()) {
                this._collection.update({
                    _id: key
                }, {
                    $set: { value: value }
                }, { removeEmptyStrings: false });
            }
            this.items[key] = Object.assign(item, overrides);
            this.dependency.changed();
        }
    };
    return Configuration;
}());
exports.Configuration = Configuration;

}).call(this,require('_process'))

},{"./meteor":12,"./object":14,"_process":23}],5:[function(require,module,exports){
"use strict";
/// <reference path="../typings/globals/underscore/index.d.ts" />
/** @module util/data */
exports.__esModule = true;
var string_1 = require("./string");
/**
 * @function titles
 * @export
 * @summary provides a list of name titles
 * @param {boolean} [flatten=false] whether to return an array of plain text values
 * @returns {object[]|string[]} If flatten is true, an array of string values otherwise an array of objects with name and camelized value
 */
function titles(flatten) {
    if (flatten === void 0) { flatten = false; }
    var titles = ['Miss', 'Mr', 'Mrs', 'Ms', 'Mx', 'Dr', 'Master', 'Sir', 'Prof'];
    if (flatten) {
        return titles.map(function (title) { return string_1.camelize(title); });
    }
    return titles.map(function appendValue(name) {
        return {
            name: name,
            value: string_1.camelize(name)
        };
    });
}
exports.titles = titles;
/**
 * @function genders
 * @export
 * @summary provides a list of genders
 * @param {boolean} [flatten=false] whether to return an array of plain text values
 * @returns {object[]|string[]} If flatten is true, an array of string values otherwise an array of objects with name and camelized value
 */
function genders(flatten) {
    if (flatten === void 0) { flatten = false; }
    var genders = ['Female', 'Male', 'Unspecified'];
    if (flatten) {
        return genders.map(function (gender) { return string_1.camelize(gender); });
    }
    return genders.map(function appendValue(name) {
        return {
            name: name,
            value: string_1.camelize(name)
        };
    });
}
exports.genders = genders;
/**
 * @function maritalStatuses
 * @export
 * @summary provides a list of maritalStatuses
 * @param {boolean} [flatten=false] whether to return an array of plain text values
 * @returns {object[]|string[]} If flatten is true, an array of string values otherwise an array of objects with name and camelized value
 */
function maritalStatuses(flatten) {
    if (flatten === void 0) { flatten = false; }
    if (flatten) {
        return ['single', 'married', 'widowed', 'divorced'];
    }
    return [
        { name: 'Single', value: 'single' },
        { name: 'Married/Civil Partnership', value: 'married' },
        { name: 'Widowed', value: 'widowed' },
        { name: 'Divorced', value: 'divorced' }
    ];
}
exports.maritalStatuses = maritalStatuses;
/**
 * @function nationalities
 * @export
 * @summary provides a list of nationalities
 * @param {boolean} [flatten=false] whether to return an array of plain text values
 * @returns {object[]|string[]} If flatten is true, an array of string values otherwise an array of objects with name and camelized value
 */
function nationalities(flatten) {
    if (flatten === void 0) { flatten = false; }
    var nationalities = [
        'Afghan',
        'Albanian',
        'Algerian',
        'American',
        'Andorran',
        'Angolan',
        'Anguillian',
        'Antiguans',
        'Argentinean',
        'Armenian',
        'Australian',
        'Austrian',
        'Azerbaijani',
        'Bahamian',
        'Bahraini',
        'Bangladeshi',
        'Barbadian',
        'Barbudans',
        'Batswana',
        'Belarusian',
        'Belgian',
        'Belizean',
        'Beninese',
        'Bermudian',
        'Bhutanese',
        'Bolivian',
        'Bosnian',
        'Brazilian',
        'British',
        'Bruneian',
        'Bulgarian',
        'Burkinabe',
        'Burmese',
        'Burundian',
        'Cambodian',
        'Cameroonian',
        'Canadian',
        'Cape Verdean',
        'Central African',
        'Chadian',
        'Chilean',
        'Chinese',
        'Colombian',
        'Comoran',
        'Congolese',
        'Costa Rican',
        'Croatian',
        'Cuban',
        'Cypriot',
        'Czech',
        'Danish',
        'Djibouti',
        'Dominican',
        'Dutch',
        'East Timorese',
        'Ecuadorean',
        'Egyptian',
        'Emirian',
        'Equatorial Guinean',
        'Eritrean',
        'Estonian',
        'Ethiopian',
        'Fijian',
        'Filipino',
        'Finnish',
        'French',
        'Gabonese',
        'Gambian',
        'Georgian',
        'German',
        'Ghanaian',
        'Greek',
        'Grenadian',
        'Guatemalan',
        'Guinea-Bissauan',
        'Guinean',
        'Guyanese',
        'Haitian',
        'Herzegovinian',
        'Honduran',
        'Hungarian',
        'Icelander',
        'Indian',
        'Indonesian',
        'Iranian',
        'Iraqi',
        'Irish',
        'Israeli',
        'Italian',
        'Ivorian',
        'Jamaican',
        'Japanese',
        'Jordanian',
        'Kazakhstani',
        'Kenyan',
        'Kittian and Nevisian',
        'Kuwaiti',
        'Kyrgyz',
        'Laotian',
        'Latvian',
        'Lebanese',
        'Liberian',
        'Libyan',
        'Liechtensteiner',
        'Lithuanian',
        'Luxembourger',
        'Macedonian',
        'Malagasy',
        'Malawian',
        'Malaysian',
        'Maldivan',
        'Malian',
        'Maltese',
        'Marshallese',
        'Mauritanian',
        'Mauritian',
        'Mexican',
        'Micronesian',
        'Moldovan',
        'Monacan',
        'Mongolian',
        'Moroccan',
        'Mosotho',
        'Motswana',
        'Mozambican',
        'Namibian',
        'Nauruan',
        'Nepalese',
        'New Zealander',
        'Ni-Vanuatu',
        'Nicaraguan',
        'Nigerien',
        'North Korean',
        'Northern Irish',
        'Norwegian',
        'Omani',
        'Pakistani',
        'Palauan',
        'Panamanian',
        'Papua New Guinean',
        'Paraguayan',
        'Peruvian',
        'Polish',
        'Portuguese',
        'Qatari',
        'Romanian',
        'Russian',
        'Rwandan',
        'Saint Lucian',
        'Salvadoran',
        'Samoan',
        'San Marinese',
        'Sao Tomean',
        'Saudi',
        'Scottish',
        'Senegalese',
        'Serbian',
        'Seychellois',
        'Sierra Leonean',
        'Singaporean',
        'Slovakian',
        'Slovenian',
        'Solomon Islander',
        'Somali',
        'South African',
        'South Korean',
        'Spanish',
        'Sri Lankan',
        'Sudanese',
        'Surinamer',
        'Swazi',
        'Swedish',
        'Swiss',
        'Syrian',
        'Taiwanese',
        'Tajik',
        'Tanzanian',
        'Thai',
        'Togolese',
        'Tongan',
        'Trinidadian or Tobagonian',
        'Tunisian',
        'Turkish',
        'Tuvaluan',
        'Ugandan',
        'Ukrainian',
        'Uruguayan',
        'Uzbekistani',
        'Venezuelan',
        'Vietnamese',
        'Welsh',
        'Yemenite',
        'Zambian',
        'Zimbabwean'
    ];
    if (flatten) {
        return nationalities.map(function (nationality) { return string_1.camelize(nationality); });
    }
    return nationalities.map(function appendValue(name) {
        return {
            name: name,
            value: string_1.camelize(name)
        };
    });
}
exports.nationalities = nationalities;

},{"./string":18}],6:[function(require,module,exports){
"use strict";
exports.__esModule = true;
/** @module util/date */
var HOUR_AS_MILLISECONDS = 1000 * 60 * 60;
var DAY_AS_MILLISECONDS = 24 * HOUR_AS_MILLISECONDS;
var WEEK_AS_MILLISECONDS = 7 * DAY_AS_MILLISECONDS;
var MONTH_AS_MILLISECONDS = 30 * DAY_AS_MILLISECONDS;
/**
 * @function randomBetween
 * @export
 * @summary gets a random date between two others
 * @param {Date} from random date must be greater
 * than this
 * @param {Date} to random date must be less than
 * this
 * @returns {Date} the random date
 */
function randomBetween(from, to) {
    var fromMilli = from.getTime();
    var toMilli = to.getTime();
    return new Date(Math.floor(Math.random() * (toMilli - fromMilli + 1) + fromMilli));
}
exports.randomBetween = randomBetween;
/**
 * Gets a Date object of a given offset from now
 *
 * @param {string} [startEnd] Either 'start' or 'end' to round the date to the
 * start or end of the day
 * @param {string} [prevNext='prev']
 * @param {string} [interval='day']
 * @returns {Date} the date object
 */
function getDate(startEnd, prevNext, interval) {
    if (prevNext === void 0) { prevNext = 'prev'; }
    if (interval === void 0) { interval = 'day'; }
    var nowMilli = new Date().getTime();
    var operator = prevNext === 'next' ? 1 : -1;
    var date;
    if (interval === 'month') {
        date = new Date(nowMilli + (MONTH_AS_MILLISECONDS * operator));
    }
    else if (interval === 'week') {
        date = new Date(nowMilli + (WEEK_AS_MILLISECONDS * operator));
    }
    else {
        date = new Date(nowMilli + (DAY_AS_MILLISECONDS * operator));
    }
    if (startEnd === 'start') {
        date.setHours(0);
        date.setMinutes(0);
        date.setSeconds(0);
        date.setMilliseconds(0);
    }
    else if (startEnd === 'end') {
        date.setHours(23);
        date.setMinutes(59);
        date.setSeconds(59);
        date.setMilliseconds(999);
    }
    return date;
}
exports.getDate = getDate;
/**
 * Return a Date object from 24 hours ago
 *
 * @param {string} [startEnd] either 'start' or 'end' - determines whether to round
 * the date to the start or end of the day
 */
function yesterday(startEnd) {
    return getDate(startEnd, 'prev', 'day');
}
exports.yesterday = yesterday;
/**
 * Return a Date object for 24 hours in the future
 *
 * @param {string} [startEnd] either 'start' or 'end' - determines whether to round
 * the date to the start or end of the day
 */
function tomorrow(startEnd) {
    return getDate(startEnd, 'next', 'day');
}
exports.tomorrow = tomorrow;
/**
 * Return a Date object from 7 days ago
 *
 * @param {string} [startEnd] either 'start' or 'end' - determines whether to round
 * the date to the start or end of the day
 */
function lastWeek(startEnd) {
    return getDate(startEnd, 'prev', 'week');
}
exports.lastWeek = lastWeek;
/**
 * Return a Date object for 7 days in the future
 *
 * @param {string} [startEnd] either 'start' or 'end' - determines whether to round
 * the date to the start or end of the day
 */
function nextWeek(startEnd) {
    return getDate(startEnd, 'next', 'week');
}
exports.nextWeek = nextWeek;
/**
 * Return a Date object from 30 days ago
 *
 * @param {string} [startEnd] either 'start' or 'end' - determines whether to round
 * the date to the start or end of the day
 */
function lastMonth(startEnd) {
    return getDate(startEnd, 'prev', 'month');
}
exports.lastMonth = lastMonth;
/**
 * Return a Date object for 30 days in the future
 *
 * @param {string} [startEnd] either 'start' or 'end' - determines whether to round
 * the date to the start or end of the day
 */
function nextMonth(startEnd) {
    return getDate(startEnd, 'next', 'month');
}
exports.nextMonth = nextMonth;
/**
 * Can be passed either a full or three-letter day name and will return the previous day's name
 *
 * @param {string} day a full or three-letter day name
 * @returns {string} the name of the previous day
 */
function getPreviousDay(day) {
    if (!day || typeof day !== 'string') {
        throw new TypeError('`day` was not supplied or was not a string');
    }
    day = day.toLowerCase();
    switch (day) {
        case 'mon':
        case 'monday': return 'sunday';
        case 'tue':
        case 'tuesday': return 'monday';
        case 'wed':
        case 'wednesday': return 'tuesday';
        case 'thu':
        case 'thursday': return 'wednesday';
        case 'fri':
        case 'friday': return 'thursday';
        case 'sat':
        case 'saturday': return 'friday';
        case 'sun':
        case 'sunday': return 'saturday';
    }
}
exports.getPreviousDay = getPreviousDay;
/**
 * Can be passed either a full or three-letter day name and will return the next day's name
 *
 * @param {string} day a full or three-letter day name
 * @returns {string} the name of the next day
 */
function getNextDay(day) {
    if (!day || typeof day !== 'string') {
        throw new TypeError('`day` was not supplied or was not a string');
    }
    day = day.toLowerCase();
    switch (day) {
        case 'mon':
        case 'monday': return 'tuesday';
        case 'tue':
        case 'tuesday': return 'wednesday';
        case 'wed':
        case 'wednesday': return 'thursday';
        case 'thu':
        case 'thursday': return 'friday';
        case 'fri':
        case 'friday': return 'saturday';
        case 'sat':
        case 'saturday': return 'sunday';
        case 'sun':
        case 'sunday': return 'monday';
    }
}
exports.getNextDay = getNextDay;

},{}],7:[function(require,module,exports){
"use strict";
/** @module util/emitter */
exports.__esModule = true;
/**
 * Basic class that represents an event that can be listened to and broadcasted
 */
var Emitter = (function () {
    function Emitter() {
        this.nextId = 0;
        this.listeners = {};
    }
    /**
     * Add a callback to be ran whenver this event is broadcasted
     */
    Emitter.prototype.listen = function (callback) {
        this.listeners[++this.nextId] = callback;
    };
    /**
     * Calls all callbacks that have been registered with the given value
     * @param value value to broadcast, if any
     */
    Emitter.prototype.broadcast = function (value) {
        _.values(this.listeners).forEach(function (l) { return l(value); });
    };
    /**
     * Remove all attached listeners
     */
    Emitter.prototype.removeListeners = function () {
        this.listeners = {};
    };
    return Emitter;
}());
exports.Emitter = Emitter;
/**
 * Slightly more advanced event emitter style class that allows listening to different events via string arguments
 */
var MultiEmitter = (function () {
    function MultiEmitter() {
        this.nextId = 0;
        this.listenersByEvent = {};
    }
    /**
     * Add a callback to be ran whenver this event is broadcasted
     * @param event the event as a string to be listened to
     * @param callback the callback to run whenever said event is triggered
     */
    MultiEmitter.prototype.listen = function (event, callback) {
        if (!this.listenersByEvent[event]) {
            this.listenersByEvent[event] = {};
        }
        this.listenersByEvent[event][++this.nextId] = callback;
    };
    /**
     * Broadcast an event of the given type
     * @param event even type to broadcast
     * @param value value to be passed to each callback
     */
    MultiEmitter.prototype.broadcast = function (event, value) {
        if (!this.listenersByEvent[event]) {
            return;
        }
        _.values(this.listenersByEvent[event]).forEach(function (l) { return l(value); });
    };
    /**
     * Remove all attached listeners for a specific event type
     * @param event
     */
    MultiEmitter.prototype.removeListeners = function (event) {
        delete this.listenersByEvent[event];
    };
    return MultiEmitter;
}());
exports.MultiEmitter = MultiEmitter;

},{}],8:[function(require,module,exports){
"use strict";
/** @module util/http */
exports.__esModule = true;
/**
 * @function getBaseParameter
 * @export
 * @summary returns a basic Swagger parameter field
 * @param {*} [{ location, type, required }={}]
 * @returns {Object}
 */
function getBaseParameter(_a) {
    var _b = _a === void 0 ? {} : _a, location = _b.location, type = _b.type, required = _b.required;
    return {
        "in": location,
        type: type,
        required: required,
        name: '',
        description: ''
    };
}
/*
  partially applied body param functions
*/
var getBodyParameter = function (_a) {
    var _b = _a === void 0 ? {} : _a, type = _b.type, required = _b.required;
    return getBaseParameter({ location: 'body', type: type, required: required });
};
var getRequiredBodyParameter = function (_a) {
    var type = (_a === void 0 ? {} : _a).type;
    return getBodyParameter({ required: true, type: type });
};
var getOptionalBodyParameter = function (_a) {
    var type = (_a === void 0 ? {} : _a).type;
    return getBodyParameter({ required: false, type: type });
};
/**
 * @function requiredBodyString
 * @export
 * @summary scaffolds a required body string parameter
 * @param {Object} extendedDef the rest of the definition
 * @returns {Object}
 */
function requiredBodyString(extendedDef) {
    return Object.assign(getRequiredBodyParameter({ type: 'string' }), extendedDef);
}
exports.requiredBodyString = requiredBodyString;
/**
 * @function requiredBodyNumber
 * @export
 * @summary scaffolds a required body number parameter
 * @param {Object} extendedDef the rest of the definition
 * @returns {Object}
 */
function requiredBodyNumber(extendedDef) {
    return Object.assign(getRequiredBodyParameter({ type: 'number' }), extendedDef);
}
exports.requiredBodyNumber = requiredBodyNumber;
/**
 * @function requiredBodyDate
 * @export
 * @summary scaffolds a required body string parameter
 * @param {Object} extendedDef the rest of the definition
 * @returns {Object}
 */
function requiredBodyDate(extendedDef) {
    return Object.assign(getRequiredBodyParameter({ type: 'string' }), { format: 'date-time' }, extendedDef);
}
exports.requiredBodyDate = requiredBodyDate;
/**
 * @function requiredBodyBoolean
 * @export
 * @summary scaffolds a required body boolean parameter
 * @param {Object} extendedDef the rest of the definition
 * @returns {Object}
 */
function requiredBodyBoolean(extendedDef) {
    return Object.assign(getRequiredBodyParameter({ type: 'boolean' }), extendedDef);
}
exports.requiredBodyBoolean = requiredBodyBoolean;
/**
 * @function requiredBodyObject
 * @export
 * @summary scaffolds a required body object parameter
 * @param {Object} extendedDef the rest of the definition
 * @returns {Object}
 */
function requiredBodyObject(extendedDef) {
    return Object.assign(getRequiredBodyParameter({ type: 'object' }), extendedDef);
}
exports.requiredBodyObject = requiredBodyObject;
/**
 * @function optionalBodyString
 * @export
 * @summary scaffolds a optional body string parameter
 * @param {Object} extendedDef the rest of the definition
 * @returns {Object}
 */
function optionalBodyString(extendedDef) {
    return Object.assign(getOptionalBodyParameter({ type: 'string' }), extendedDef);
}
exports.optionalBodyString = optionalBodyString;
/**
 * @function optionalBodyNumber
 * @export
 * @summary scaffolds a optional body number parameter
 * @param {Object} extendedDef the rest of the definition
 * @returns {Object}
 */
function optionalBodyNumber(extendedDef) {
    return Object.assign(getOptionalBodyParameter({ type: 'number' }), extendedDef);
}
exports.optionalBodyNumber = optionalBodyNumber;
/**
 * @function optionalBodyDate
 * @export
 * @summary scaffolds a optional body string parameter
 * @param {Object} extendedDef the rest of the definition
 * @returns {Object}
 */
function optionalBodyDate(extendedDef) {
    return Object.assign(getOptionalBodyParameter({ type: 'string' }), { format: 'date-time' }, extendedDef);
}
exports.optionalBodyDate = optionalBodyDate;
/**
 * @function optionalBodyBoolean
 * @export
 * @summary scaffolds a optional body boolean parameter
 * @param {Object} extendedDef the rest of the definition
 * @returns {Object}
 */
function optionalBodyBoolean(extendedDef) {
    return Object.assign(getOptionalBodyParameter({ type: 'boolean' }), extendedDef);
}
exports.optionalBodyBoolean = optionalBodyBoolean;
/**
 * @function optionalBodyObject
 * @export
 * @summary scaffolds a optional body object parameter
 * @param {Object} extendedDef the rest of the definition
 * @returns {Object}
 */
function optionalBodyObject(extendedDef) {
    return Object.assign(getOptionalBodyParameter({ type: 'object' }), extendedDef);
}
exports.optionalBodyObject = optionalBodyObject;

},{}],9:[function(require,module,exports){
module.exports={
  "1xx": "**Informational**",
  "100": "Continue",
  "101": "Switching Protocols",
  "2xx": "**Successful**",
  "200": "OK",
  "201": "Created",
  "202": "Accepted",
  "203": "Non-Authoritative Information",
  "204": "No Content",
  "205": "Reset Content",
  "206": "Partial Content",
  "3xx": "**Redirection**",
  "300": "Multiple Choices",
  "301": "Moved Permanently",
  "302": "Found",
  "303": "See Other",
  "304": "Not Modified",
  "305": "Use Proxy",
  "307": "Temporary Redirect",
  "4xx": "**Client Error**",
  "400": "Bad Request",
  "401": "Unauthorized",
  "402": "Payment Required",
  "403": "Forbidden",
  "404": "Not Found",
  "405": "Method Not Allowed",
  "406": "Not Acceptable",
  "407": "Proxy Authentication Required",
  "408": "Request Timeout",
  "409": "Conflict",
  "410": "Gone",
  "411": "Length Required",
  "412": "Precondition Failed",
  "413": "Payload Too Large",
  "414": "URI Too Long",
  "415": "Unsupported Media Type",
  "416": "Range Not Satisfiable",
  "417": "Expectation Failed",
  "418": "I'm a teapot",
  "426": "Upgrade Required",
  "5xx": "**Server Error**",
  "500": "Internal Server Error",
  "501": "Not Implemented",
  "502": "Bad Gateway",
  "503": "Service Unavailable",
  "504": "Gateway Time-out",
  "505": "HTTP Version Not Supported",
  "102": "Processing",
  "207": "Multi-Status",
  "226": "IM Used",
  "308": "Permanent Redirect",
  "422": "Unprocessable Entity",
  "423": "Locked",
  "424": "Failed Dependency",
  "428": "Precondition Required",
  "429": "Too Many Requests",
  "431": "Request Header Fields Too Large",
  "451": "Unavailable For Legal Reasons",
  "506": "Variant Also Negotiates",
  "507": "Insufficient Storage",
  "511": "Network Authentication Required",
  "7xx": "**Developer Error**"
}
},{}],10:[function(require,module,exports){
"use strict";
/// <reference path="../typings/general.d.ts" />
/** @module util/image */
exports.__esModule = true;
/**
 * @function dataURIToBlob
 * @export
 * @summary converts a data uri to a blob://
 * @param {string} dataURI the data uri to convert into a blob
 * @returns {blob} the uri as a blob
 */
function dataURIToBlob(dataURI) {
    // Convert base64/URLEncoded data component
    // to raw binary data held in a string
    var byteString;
    if (dataURI.split(',')[0].indexOf('base64') >= 0) {
        byteString = atob(dataURI.split(',')[1]);
    }
    else {
        byteString = unescape(dataURI.split(',')[1]);
    }
    // Separate out the mime component
    var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];
    // Write the bytes of the string to a typed array
    var ia = new Uint8Array(byteString.length);
    for (var i = 0; i < byteString.length; i++) {
        ia[i] = byteString.charCodeAt(i);
    }
    return new Blob([ia], {
        type: mimeString
    });
}
exports.dataURIToBlob = dataURIToBlob;
/**
 * @function toDataURI
 * @export
 * @summary converts an image file to a data uri
 * @param {File} file the image file to convert
 * @param {Function} callback a function
 * to receive the result of the conversion
 */
function toDataURI(file, callback) {
    var fileReader = new FileReader();
    fileReader.onload = function (e) {
        callback(e.target.result);
    };
    fileReader.readAsDataURL(file);
}
exports.toDataURI = toDataURI;

},{}],11:[function(require,module,exports){
"use strict";
/** @module util/location */
exports.__esModule = true;
/**
 * @function calculateDistance
 * @export
 * @summary Get the distance in KM between two latitude/longitude pairs
 * @param {number} lat1 The first latitude
 * @param {number} lon1 The first longitude
 * @param {number} lat2 The second latitude
 * @param {number} lon2 The second longitude
 * @returns {number} The distance between the two points, in KM
 */
function calculateDistance(lat1, lon1, lat2, lon2) {
    function deg2rad(deg) {
        return deg * (Math.PI / 180);
    }
    var R = 6371; // Radius of the earth in km
    var dLat = deg2rad(lat2 - lat1); // deg2rad below
    var dLon = deg2rad(lon2 - lon1);
    var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
        Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) *
            Math.sin(dLon / 2) * Math.sin(dLon / 2);
    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    var d = R * c; // Distance in km
    return d;
}
exports.calculateDistance = calculateDistance;

},{}],12:[function(require,module,exports){
(function (process){
"use strict";
/** @module util/meteor */
exports.__esModule = true;
var statusMap = require('./httpStatusCodes.json');
/**
 * @function assert
 * @export
 * @summary if the assertion is falsey, throws
 * an error
 * @param {any} assertion anything that should be truthy to
 * not throw an error
 * @param {number} errorCode the error code
 * @param {any} [meta] additional info to include with the error
 */
var assert = function assert(assertion, errorCode, meta) {
    if (typeof errorCode !== 'number') {
        if (meta === undefined) {
            meta = errorCode;
        }
        errorCode = 500;
    }
    if (!assertion) {
        if (typeof meta === 'object') {
            try {
                meta = JSON.stringify(meta);
            }
            catch (ex) { }
        }
        var error = void 0;
        if (typeof Meteor !== 'undefined') {
            meta = meta ? ': ' + meta : '';
            error = new Meteor.Error(errorCode, statusMap[String(errorCode)] + meta);
        }
        else {
            meta = meta ? '. ' + meta : '';
            error = new Error(errorCode + ': ' + statusMap[String(errorCode)] + meta);
        }
        if ('setHttpStatusCode' in this) {
            this.setHttpStatusCode(errorCode);
        }
        // no stack traces from production errors
        if (process.env.NODE_ENV === 'production') {
            // debug(error, meta)
            error.stack = null;
        }
        error.statusCode = errorCode;
        throw error;
    }
};
exports.assert = assert;
assert.statusMap = statusMap; // for reference
/**
 * Assert that the typeof ${value} is 'string'
 *
 * @param value any value to check the type of
 * @param name the name of the value being checked
 */
var assertString = function (value, name) {
    return assert.call(this, typeof value === 'string', 400, "Expected typeof " + name + " to be 'string' but got '" + typeof value + "'");
};
exports.assertString = assertString;
/**
 * Assert that the typeof ${value} is 'boolean'
 *
 * @param value any value to check the type of
 * @param name the name of the value being checked
 */
var assertBoolean = function (value, name) {
    return assert.call(this, typeof value === 'boolean', 400, "Expected typeof " + name + " to be 'boolean' but got '" + typeof value + "'");
};
exports.assertBoolean = assertBoolean;
/**
 * Assert that the typeof ${value} is 'number'
 *
 * @param value any value to check the type of
 * @param name the name of the value being checked
 */
var assertNumber = function (value, name) {
    return assert.call(this, typeof value === 'number', 400, "Expected typeof " + name + " to be 'number' but got '" + typeof value + "'");
};
exports.assertNumber = assertNumber;
/**
 * Assert that the ${value} is an integer
 *
 * @param value any value to check the type of
 * @param name the name of the value being checked
 */
var assertInt = function (value, name) {
    assertNumber.call(this, value, name);
    return assert.call(this, value % 1 === 0, 400, "Expected " + name + " to be an integer but got a float");
};
exports.assertInt = assertInt;
/**
 * Assert that the typeof ${value} is 'object'
 *
 * @param value any value to check the type of
 * @param name the name of the value being checked
 */
var assertObject = function (value, name) {
    return assert.call(this, typeof value === 'object' && value !== null, 400, "Expected typeof " + name + " to be 'object' but got '" + typeof value + "'");
};
exports.assertObject = assertObject;

}).call(this,require('_process'))

},{"./httpStatusCodes.json":9,"_process":23}],13:[function(require,module,exports){
"use strict";
/** @module util/number */
exports.__esModule = true;
/**
 * @function clamp
 * @export
 * @summary ensures that a number falls between two
 * others, constraining it if necessary
 * @param {number} val the number to clamp
 * @param {number} min the minimum that the number
 * should be
 * @param {number} max the maximum that the number
 * should be
 * @returns {number} the clamped number
 */
function clamp(val, min, max) {
    if (isNaN(val)) {
        val = 0;
    }
    return Math.min(Math.max(val, min), max);
}
exports.clamp = clamp;
/**
 * @function random
 * @export
 * @summary Returns a random integer, optionally between an min and max
 * @param {number} [min] The minimum acceptable value
 * @param {number} [max] The maximum acceptable value
 */
function random(min, max) {
    if (typeof min !== 'number') {
        min = 0;
    }
    if (typeof max !== 'number') {
        max = Number.MAX_SAFE_INTEGER || 999999;
    }
    return Math.floor(Math.random() * (max - min + 1) + min);
}
exports.random = random;
/**
 * @function pad
 * @export
 * @summary pads out a number to specified width with specified char or 0
 * @param number
 * @param width
 * @param char
 * @returns {string} the padded number
 */
function pad(number, width, char) {
    char = char || '0';
    number = number + '';
    return (number.length >= width) ? number : new Array((width - number.length) + 1).join(char) + number;
}
exports.pad = pad;

},{}],14:[function(require,module,exports){
"use strict";
/** @module util/object */
exports.__esModule = true;
var isset = didResolve;
exports.isset = isset;
var deepSet = resolveSet;
exports.deepSet = deepSet;
var deepSetP = resolveSetP;
exports.deepSetP = deepSetP;
/**
 * @function map
 * @export
 * @summary passes each key=>value pair to `callback`,
 * setting the result to a new object under a key of
 * the same name
 * @param {any} object the object whose values to map
 * @param {Function} callback a
 * function to pass each key=>value pair to
 * @returns {any} a new object with the same key names
 * but mapped values
 */
function map(object, callback) {
    var result = {};
    function eachKey(key, value) {
        if (object.hasOwnProperty(key)) {
            var element = callback(key, object[key]);
            result[key] = element;
        }
    }
    for (var key in object) {
        eachKey(key, object[key]);
    }
    return result;
}
exports.map = map;
/**
 * @function transform
 * @summary Like map, but able to transform the key too. Map the object into a completely
 * different
 * @param object the object to transform
 * @param callback callback to perform the transformation, return an array like [key, value]
 */
function transform(object, callback) {
    var result = {};
    Object.keys(object).forEach(function (key) {
        var keyAndValue = callback(key, object[key]);
        if (Array.isArray(keyAndValue)) {
            result[keyAndValue[0]] = keyAndValue[1];
        }
    });
    return result;
}
exports.transform = transform;
/**
 * @function forEach
 * @summary Like array.forEach, but for an object, gets keys and values
 */
function forEach(object, callback) {
    Object.keys(object).forEach(function (key) {
        callback(key, object[key]);
    });
}
exports.forEach = forEach;
/**
 * @function filter
 * @export
 * @summary passes each key=>value pair of an object
 * to `callback`, copying them over if the result is
 * truthy
 * @param {any} object the object whose keys to filter
 * @param {Function} callback the
 * function to pass each key=>value pair to
 * @returns {any} a filtered copy of the input object
 */
function filter(object, callback) {
    var result = {};
    function eachKey(key, value) {
        if (callback(key, value)) {
            // if callback is truthy, copy the key=>value pair over
            result[key] = object[key];
        }
    }
    for (var key in object) {
        eachKey(key, object[key]);
    }
    return result;
}
exports.filter = filter;
/**
 * @function resolve
 * @export
 * @summary get a nested property of an object by string e.g. resolve(myObj, 'nested.property')
 * @returns {any|undefined} resolved value or undefined if intermediate values are undefined
 */
function resolve(obj, path, options) {
    if (options === void 0) { options = {}; }
    if (!obj) {
        return undefined;
    }
    var ret = path
        .split('.')
        .reduce(function reducePath(prev, curr) {
        return (typeof prev === 'object') ? prev[curr] : undefined;
    }, obj);
    if (options["default"] != null && ret == null) {
        return options["default"];
    }
    return ret;
}
exports.resolve = resolve;
/**
 * @function didResolve
 * @export
 * @alias isset
 * @summary report whether an attempt to resolve a nested property of an object
 * was successful or not.
 * @returns {boolean} whether the nested property exists
 */
function didResolve(obj, path) {
    var parts = path.split('.');
    var deepestKey = parts.pop();
    if (!obj) {
        return false;
    }
    if (parts.length === 0) {
        return deepestKey in obj;
    }
    else {
        var res = parts.reduce(function reducePath(prev, curr) {
            return (typeof prev === 'object') ? prev[curr] : undefined;
        }, obj);
        return res && deepestKey in res
            ? true
            : false;
    }
}
exports.didResolve = didResolve;
/**
 * @function resolveIf
 * @export
 * @summary same as resolve but sets the property to val
 * @returns {any|null} The resolved value or null
 */
function resolveIf(obj, path, testCallback) {
    var resolved = resolve(obj, path);
    if (resolved !== undefined && resolved !== null && testCallback(resolved)) {
        return resolved;
    }
    return null;
}
exports.resolveIf = resolveIf;
/**
 * @function resolveSet
 * @export
 * @alias deepSet
 * @summary same as resolve but sets the property to val
 * @return {boolean} whether setting was successful
 */
function resolveSet(obj, path, val, options) {
    if (options === void 0) { options = {}; }
    var components = path.split('.');
    while (components.length > 0) {
        if (typeof obj !== 'object') {
            break;
        }
        if (components.length === 1) {
            // we're at the last component, the part where we actually set the value
            var lastComponent = components[0];
            if (options.makeArrays && Array.isArray(obj)) {
                var index = parseInt(lastComponent);
                while (index >= obj.length) {
                    obj.push(null);
                }
            }
            if (obj[lastComponent] && options.noOverwrite) {
                // if there's a truthy value and we're not allowed to overwrite, return false
                return false;
            }
            obj[lastComponent] = val;
            return true;
        }
        else {
            // still more of the path to go down
            var nextComponent = components.shift();
            var nextNextComponent = components[0];
            // if the next field is numeric, prepare by making an array if there isn't one
            if (options.makeArrays && !isNaN(parseInt(nextNextComponent)) && !Array.isArray(obj[nextComponent])) {
                obj[nextComponent] = [];
            }
            else if (options.makeObjects && typeof obj[nextComponent] !== 'object') {
                obj[nextComponent] = {};
            }
            obj = obj[nextComponent];
        }
    }
    return false;
}
exports.resolveSet = resolveSet;
/**
 * Transform an entire object by converting all of its keys into object paths using resolveSet
 * @param obj the object to transform (transformed in place)
 * @returns obj for convenience, although transformed in place
 */
function transformPathsToObjects(obj) {
    Object.keys(obj).forEach(function (key) {
        // convert all 'something.something' into nested fields
        if (!didResolve(obj, key)) {
            resolveSet(obj, key, obj[key], { makeArrays: true, makeObjects: true });
            delete obj[key];
        }
    });
    return obj;
}
exports.transformPathsToObjects = transformPathsToObjects;
/**
 * Convert a deep object into one which is flat (has a max depth of 1 level). The output object's keys will
 * use dot notation to symbolise depth.
 *
 * @param {object} input An input object. Required
 * @param {object} _output Private param used in recursion
 * @param {string} _prefix Private param used in recursion
 *
 * @example
 *
 *     var deepObj = {person: {profile: {name: 'Carl', age: 26}, password: 'foobar'}}
 *     flatten(deepObj)
 *     // returns {'person.profile.name': 'Carl', 'person.profile.age': 26, 'person.password': 'foobar'}
 *
 */
function flatten(input, _output, _prefix) {
    _output = _output || {};
    for (var key in input) {
        if (typeof input[key] === 'object' && input[key] !== null && !(input[key] instanceof Array)) {
            flatten(input[key], _output, _prefix ? _prefix + '.' + key : key);
        }
        else {
            _output[_prefix ? _prefix + '.' + key : key] = input[key];
        }
    }
    return _output;
}
exports.flatten = flatten;
/**
 * @function resolveSetP
 * @export
 * @alias deepSetP
 * @summary same as resolveSet, but will create paths down into
 * objects where they don't exist
 * @param obj {object} the object to create the value in
 * @param path {string} the path (dot notation) into the object
 * @param val {any} the new value
 * @returns {boolean} whether the op was successful
 */
function resolveSetP(obj, path, val) {
    function _resolveSetP(obj, path, val) {
        var parts = path.split('.');
        var firstPart = parts.shift();
        if (obj === undefined) {
            // If `obj` is undefined, set it to an empty object - useful in recursive
            // situations where `obj[key]` is undefined
            obj = isNaN(Number(firstPart)) ? {} : [];
        }
        else if (obj === null || typeof obj !== 'object') {
            // If `obj` is already set to some value that isn't an object, fail instead
            // of overwriting existing data
            return false;
        }
        // If the path down into the object already exists, use resolveSet instead
        if (didResolve(obj, path)) {
            return resolveSet(obj, path, val);
        }
        // `parts.length` could legitimately be 0 because we just shifted out the first
        // part. If, however, there was more than one part to begin with, recurse
        if (parts.length > 0) {
            // recurse, using `obj[firstPart]` as the new `obj` - for non-existant
            // paths, this will be `undefined` and caught by the `if` statement at the
            // start of this function
            var res_1 = _resolveSetP(obj[firstPart], parts.join('.'), val);
            if (typeof res_1 === 'boolean') {
                // allow successes/failures to pass back up the call stack
                return res_1;
            }
            // set `obj[firstPart]` to the returned object
            obj[firstPart] = res_1;
        }
        else {
            // We are at the deepest required level, set the value of `obj[firstPart]`
            // to `val`
            obj[firstPart] = val;
        }
        // if we're down here then we're in a recursive scenario, return the computed
        // inner object back up the call stack
        return obj;
    }
    var res = _resolveSetP(obj, path, val);
    if (typeof res === 'boolean') {
        return res;
    }
    else {
        return true;
    }
}
exports.resolveSetP = resolveSetP;

},{}],15:[function(require,module,exports){
"use strict";
/** @module util/popover */
exports.__esModule = true;
require("jquery");
var emitter_1 = require("./emitter");
var opposites = {
    top: 'bottom',
    bottom: 'top',
    left: 'right',
    right: 'left'
};
/**
 * Opens a popover with the specified content located on the edge of the source object
 * @param source the target element this popover should be attached to
 * @param content the content to show in the popover
 * @param options
 */
function open(source, $content, options) {
    var multiEmitter = new emitter_1.MultiEmitter();
    var $source = $(source);
    var $contentWrap = $('<div class="content">').append($($content));
    var closed = false;
    options = _.extend({
        matchElementWidth: true,
        xAlign: 0.5,
        css: '',
        overflow: false
    }, options);
    var additionalClasses = source.className.split(' ').map(function (c) {
        return '-popover-source-' + c;
    }).join(' ') + ' ' + (options.css || ''.trim());
    var clickCatch = $('<div id="popover-click-catch">').css({
        position: 'absolute',
        width: '100%',
        height: '100%',
        top: '0',
        left: '0'
    }).click(function (e) {
        if ($(e.target).attr('id') === 'popover-click-catch') {
            close();
        }
    });
    $contentWrap.addClass(additionalClasses);
    $contentWrap.css({
        position: 'absolute',
        display: 'none',
        width: options.matchElementWidth ? ($source.outerWidth() + 'px') : ''
    });
    // Add to DOM in order to perform size calculations and add blaze template etc.
    var wrap = $('<div>').addClass('popover-wrap').css({
        position: 'fixed',
        width: '100%',
        height: '100%',
        top: '0',
        left: '0'
    });
    wrap.append(clickCatch, $contentWrap);
    wrap = wrap.appendTo($('body'));
    $contentWrap.css({
        visibility: 'hidden',
        display: ''
    });
    var requiredHeight = $contentWrap.outerHeight();
    var viewportPos = viewportPosition($source);
    var elSize = [$source.outerWidth(), $source.outerHeight()];
    var leftPos = viewportPos[0] + (elSize[0] * options.xAlign) - ($contentWrap.outerWidth() * options.xAlign);
    if (options.dropdown) {
        options.overflow = false;
        var pad = 25;
        var totalHeight = void 0;
        if (options.overflow) {
            totalHeight = requiredHeight;
        }
        else {
            totalHeight = Math.min(500, requiredHeight, (window.innerHeight - 100) / 2);
        }
        var top_1 = (viewportPos[1] + elSize[1]);
        if (top_1 + totalHeight > window.innerHeight) {
            top_1 -= (elSize[1] + totalHeight);
        }
        $contentWrap.css({
            'left': leftPos + 'px',
            'top': top_1 + 'px',
            'overflow-y': options.overflow ? 'visible' : 'auto',
            'overflow-x': 'visible',
            'height': totalHeight
        });
    }
    else {
        $contentWrap.css({
            'left': leftPos + 'px',
            'top': Math.min(viewportPos[1] + elSize[1]) + 'px'
        });
    }
    if (options.matchElementWidth) {
        $contentWrap.css({
            'width': elSize[0] + 'px'
        });
    }
    $contentWrap.removeClass('-above').addClass('-below');
    $contentWrap.css({
        visibility: ''
    });
    $source.addClass('-popover-open');
    function close() {
        if (closed) {
            return;
        }
        $source.removeClass('-popover-open');
        wrap.remove();
        closed = true;
        multiEmitter.broadcast('close');
    }
    $(window).on('resize.dropdown', close);
    return {
        events: multiEmitter,
        popover: $contentWrap,
        close: close
    };
}
exports.open = open;
/**
 * Opens a dropdown, which internally is still a popover with some special additions
 * @param source which element should the dropdown be attached to?
 * @param dropDownItems the items that should be shown in the dropdown @see DropDownItem
 * @param options
 */
function openDropdown($source, dropDownItems, options) {
    var dropDownItemsGetter = dropDownItems;
    if (typeof (dropDownItems) !== 'function') {
        dropDownItemsGetter = function () {
            return dropDownItems;
        };
    }
    if (!dropDownItemsGetter().length) {
        return console.warn('Tried to open an empty dropdown');
    }
    var dropDown = $("<div class=\"dropdown\"></div>");
    var hasSubMenus = false;
    function addScrollClass(element) {
        var normal = $(element)[0];
        var canScroll = (normal.offsetHeight < normal.scrollHeight) && element.scrollTop() === 0;
        $(element).toggleClass('-can-scroll', canScroll);
    }
    function addScrollHandlers(element) {
        $(element).scroll(function () {
            addScrollClass(element);
        });
    }
    function positionSubMenu(subMenu, parent) {
        var css = {
            position: 'fixed',
            top: '',
            bottom: '',
            overflow: '',
            maxHeight: ''
        };
        subMenu.css(css);
        var parentMenu = $(parent).parent();
        var parentLeft = $(parentMenu).offset().left - $(window).scrollLeft();
        var parentItem = parent;
        var parentItemTop = $(parentItem).offset().top - $(window).scrollTop();
        var parentItemHeight = $(parentItem).outerHeight();
        var parentItemMidY = parentItemTop + parentItemHeight / 2;
        var top = parentItemMidY - $(subMenu).outerHeight() / 2;
        var bottom = top + $(subMenu).outerHeight();
        function bottomSpace() {
            return window.innerHeight - 25 - bottom;
        }
        function topSpace() {
            return top - 25;
        }
        if (topSpace() < 0) {
            var topSpaceNow = topSpace();
            // move down
            top -= topSpaceNow;
            bottom -= topSpaceNow;
        }
        if (bottomSpace() < 0) {
            // going over on the bottom now? clip
            bottom += bottomSpace();
        }
        css = {
            position: 'fixed',
            top: top + 'px',
            bottom: (window.innerHeight - bottom) + 'px',
            overflow: 'auto',
            maxHeight: '95vh'
        };
        var spaceOnRight = window.innerWidth -
            (parentMenu.offset().left + parentMenu.outerWidth());
        var hasSpaceOnRight = spaceOnRight >= subMenu.outerWidth();
        if (hasSpaceOnRight) {
            css['left'] = (parentLeft + $(parentMenu).width()) + 'px';
        }
        else {
            css['right'] = (window.innerWidth - parentLeft) + 'px';
        }
        subMenu.css(css);
        addScrollClass(subMenu);
    }
    function htmlForItem(item) {
        if (typeof (item) === 'string') {
            if (item[0] === '_') {
                return $("<div class=" + item.substr(1) + ">");
            }
            return $("<div class='heading'>" + item + "</div>");
        }
        var html = $("<div class=\"item\">" + item.name + "</div>").click(function (e) {
            // No click action on sub items
            if (!item.items && typeof (item.action) === 'function') {
                var clicked_1 = $(e.currentTarget);
                clicked_1.addClass('-clicked');
                var flash = function () { return clicked_1.addClass('-flashing'); };
                var unflash = function () { return clicked_1.removeClass('-flashing'); };
                var ops_1 = [flash, unflash, flash, function () {
                        popoverResult.close();
                    }, item.action];
                var process_1 = function () {
                    if (ops_1.length > 0) {
                        setTimeout(function () {
                            ops_1.shift()();
                            process_1();
                        }, 75);
                    }
                };
                process_1();
            }
        }).hover(function (over) {
            html.addClass('-dropdown-hovering');
            if ($(this).children('.subMenu').length) {
                positionSubMenu($(this).children('.subMenu'), this);
            }
        }, function (out) {
            if ($(this).closest('-dropdown-hovering').length === 0) {
                html.removeClass('-dropdown-hovering');
            }
        }).addClass(item.css || '');
        if (item.items && item.items.length > 0) {
            hasSubMenus = true;
            var subMenu_1 = $("<div class=\"subMenu\">");
            item.items.forEach(function (subItem) {
                subMenu_1.append(htmlForItem(subItem));
            });
            subMenu_1.appendTo(html);
            addScrollHandlers(subMenu_1);
            html.addClass('-has-subMenu');
        }
        return html;
    }
    dropDownItemsGetter().forEach(function (item) { return dropDown.append(htmlForItem(item)); });
    addScrollHandlers(dropDown);
    var popoverResult = open($source, dropDown, _.extend({}, options, {
        dropdown: true,
        // A limitation in our implementation stops it being possible from having submenus AND
        // overflow: scroll, because overflow-y: auto implies overflow-x: auto too :(
        overflow: hasSubMenus
    }));
    addScrollClass(dropDown);
    function getSelected() {
        return popoverResult.popover.find('.item.-selected');
    }
    return {
        popover: popoverResult,
        close: popoverResult.close,
        up: function () {
            ifLet([getSelected().prev('.item')[0]], function (prev) {
                getSelected().removeClass('-selected');
                $(prev).addClass('-selected');
            }, function () {
                getSelected().removeClass('-selected');
                popoverResult.popover.find('.item').last().addClass('-selected');
            });
        },
        down: function () {
            ifLet([getSelected().next('.item')[0]], function (next) {
                getSelected().removeClass('-selected');
                $(next).addClass('-selected');
            }, function () {
                getSelected().removeClass('-selected');
                popoverResult.popover.find('.item').first().addClass('-selected');
            });
        },
        acceptSelected: function () {
            getSelected().removeClass('-selected').trigger('click');
        }
    };
}
exports.openDropdown = openDropdown;
/**
 * Internal function used to run a specific callback with a value if it exists
 * @param toCheck the value, or values to check
 * @param ifCallback the callback to run with the value if it exists
 * @param elseCallback the callback to run if the value does not exist
 */
function ifLet(toCheck, ifCallback, elseCallback) {
    if (!Array.isArray(toCheck)) {
        toCheck = [toCheck];
    }
    if (toCheck.every(function (arg) { return arg !== null && arg !== undefined; })) {
        return ifCallback.apply(this, toCheck);
    }
    else if (elseCallback) {
        return elseCallback();
    }
}
/**
 * Internal function used to get the viewport position of an element
 * @param element
 */
function viewportPosition(element, parent) {
    if (parent === void 0) { parent = document; }
    return [
        $(element).offset().left - $(parent).scrollLeft(),
        $(element).offset().top - $(parent).scrollTop()
    ];
}
/**
 * Adds a triangle to point at the edge of one element (element) to a target (pointingAt)
 * @param element the element doing the pointing
 * @param positionedWhere where is the popup in relation to the target
 * @param pointingAt what should it point at
 * @param container where do we add the triangle
 * @returns the triangle element
 */
function addTriangleToFixedElement(element, positionedWhere, pointingAt, container) {
    if (container === void 0) { container = $('body'); }
    var triangleSize = 15;
    var triangleSizeStr = triangleSize + 'px';
    var triangleCss = (_a = {
            position: 'fixed',
            top: '100%',
            height: 0,
            width: 0,
            borderTop: "solid " + triangleSizeStr + " transparent",
            borderBottom: "solid " + triangleSizeStr + " transparent",
            borderLeft: "solid " + triangleSizeStr + " transparent",
            borderRight: "solid " + triangleSizeStr + " transparent"
        },
        _a["border-" + positionedWhere + "-color"] = 'white',
        _a);
    var triangle = $('<div>').addClass('popover-triangle').css(triangleCss).appendTo(container);
    element.css('margin-' + opposites[positionedWhere], triangleSizeStr);
    var pointingAtPos = viewportPosition(pointingAt);
    var pointingAtSize = [pointingAt.outerWidth(), pointingAt.outerHeight()];
    if (positionedWhere === 'right') {
        triangle.css({
            'left': (pointingAtPos[0] + pointingAtSize[0] - triangleSize) + 'px',
            'top': (pointingAtPos[1] + (pointingAtSize[1] / 2) - triangleSize) + 'px'
        });
    }
    else if (positionedWhere === 'left') {
        triangle.css({
            'left': (pointingAtPos[0] - triangleSize) + 'px',
            'top': (pointingAtPos[1] + (pointingAtSize[1] / 2) - triangleSize) + 'px'
        });
    }
    else if (positionedWhere === 'top') {
        triangle.css({
            'left': (pointingAtPos[0] + (pointingAtSize[0] / 2) - (triangleSize)) + 'px',
            'top': (pointingAtPos[1] - triangleSize) + 'px'
        });
    }
    else if (positionedWhere === 'bottom') {
        triangle.css({
            'left': (pointingAtPos[0] + (pointingAtSize[0] / 2) - (triangleSize)) + 'px',
            'top': (pointingAtPos[1] + pointingAtSize[1] - triangleSize) + 'px'
        });
    }
    return triangle;
    var _a;
}
function clamp(val, min, max) {
    return Math.min(Math.max(val, min), max);
}
/**
 * Position an element relative to another
 * @param element the element to position
 * @param relativeTo the element to use as an anchor
 */
function positionFixed(element, relativeTo, options) {
    options = _.extend({
        align: 0,
        where: ['bottom'],
        matchElementWidth: false,
        triangle: false,
        gutter: [10, 10, 10, 10],
        allowResize: false,
        parent: document
    }, options);
    options.gutter = typeof options.gutter === 'number' ? [options.gutter, options.gutter, options.gutter, options.gutter] : options.gutter;
    options.where = Array.isArray(options.where) ? options.where : [options.where];
    function shouldBePositioned(where) {
        return options.where.indexOf(where) >= 0;
    }
    function positionABeforeB(a, b) {
        function indexOfNotMinus1(str) {
            var index = options.where.indexOf(str);
            return index === -1 ? 99999 : index;
        }
        return indexOfNotMinus1(a) < indexOfNotMinus1(b);
    }
    var edgeIndexMap = {
        top: 0,
        right: 1,
        bottom: 2,
        left: 3
    };
    function gutterForEdge(edge) {
        return options.gutter[edgeIndexMap[edge]];
    }
    var $element = $(element);
    var $relativeTo = $(relativeTo);
    var elSize = [$element.outerWidth(), $element.outerHeight()];
    var relativeToSize = [$relativeTo.outerWidth(), $relativeTo.outerHeight()];
    var relativeToViewportPos = viewportPosition($relativeTo, options.parent);
    var cssProps = {
        position: 'fixed'
    };
    var returnMe = {};
    function positionLeftRight(cameFromAboveBelow) {
        if (cameFromAboveBelow === void 0) { cameFromAboveBelow = false; }
        var minTop = options.gutter[0];
        var maxTop = window.innerHeight - options.gutter[2] - elSize[1];
        var topPos = relativeToViewportPos[1] + (relativeToSize[1] * options.align) - (elSize[1] * options.align);
        topPos = clamp(topPos, minTop, maxTop); // don't go out of the viewport bounds
        var relativeToMaxX = (relativeToViewportPos[0] + relativeToSize[0]);
        var spaceToTheRight = window.innerWidth - relativeToMaxX;
        var spaceToTheLeft = relativeToViewportPos[0];
        var fellBackToCentering = false;
        var isToLeft = false;
        if (spaceToTheLeft >= elSize[0]) {
            // if there's enough space on the left, position it there
            cssProps.top = topPos + 'px';
            cssProps.right = (window.innerWidth - relativeToViewportPos[0]) + 'px';
            isToLeft = true;
        }
        else {
            // if not, try the right
            if (spaceToTheRight < elSize[0]) {
                // not enough space? position above or below
                if (!cameFromAboveBelow) {
                    return positionAboveBelow();
                }
                else {
                    // center the darn thing, no space
                    cssProps.top = window.innerHeight / 2 - elSize[1] / 2;
                    cssProps.left = window.innerWidth / 2 - elSize[0] / 2;
                    fellBackToCentering = true;
                }
            }
            else {
                // there's enough space! :)
                cssProps.top = topPos + 'px';
                cssProps.left = (relativeToViewportPos[0] + relativeToSize[0]) + 'px';
            }
        }
        if (options.triangle && !fellBackToCentering) {
            returnMe.triangle = addTriangleToFixedElement($element, isToLeft ? 'left' : 'right', $relativeTo, $element.parent());
        }
        var positioned = isToLeft ? 'left' : 'right';
        if (fellBackToCentering) {
            positioned = 'center';
        }
        returnMe.positioned = positioned;
    }
    function positionAboveBelow() {
        var minLeft = options.gutter[3];
        var maxLeft = window.innerWidth - options.gutter[1] - elSize[0];
        var leftPos = relativeToViewportPos[0] + (relativeToSize[0] * options.align) - (elSize[0] * options.align);
        leftPos = clamp(leftPos, minLeft, maxLeft); // don't go out of the viewport bounds
        var relativeToMaxY = (relativeToViewportPos[1] + relativeToSize[1]);
        var spaceAbuv = relativeToViewportPos[1];
        var spaceBelow = window.innerHeight - relativeToMaxY;
        var isAbove = false;
        if (options.matchElementWidth) {
            if (typeof options.matchElementWidth === 'boolean') {
                cssProps.width = relativeToSize[0] + 'px';
            }
            else if (typeof options.matchElementWidth === 'number') {
                cssProps.width = options.matchElementWidth + 'px';
            }
            else {
                cssProps.width = $(options.matchElementWidth).outerWidth() + 'px';
            }
        }
        // if it's too big, and we allow resize, enforce the size before positioning
        if (spaceAbuv < elSize[1] && spaceBelow < elSize[1] && options.allowResize) {
            if (positionABeforeB('bottom', 'top')) {
                var gutter = gutterForEdge('bottom');
                elSize[1] = (spaceBelow - gutter);
                cssProps.height = elSize[1] + 'px';
            }
            else {
                var gutter = gutterForEdge('top');
                elSize[1] = (spaceAbuv - gutter);
                cssProps.height = elSize[1] + 'px';
            }
        }
        function above() {
            if (spaceAbuv < elSize[1]) {
                // if not enough room, fail
                return false;
            }
            cssProps.left = leftPos + 'px';
            cssProps.bottom = (window.innerHeight - relativeToViewportPos[1]) + 'px';
            isAbove = true;
            return true;
        }
        function below() {
            if (spaceBelow < elSize[1]) {
                // if not enough room, fail
                return false;
            }
            cssProps.left = leftPos + 'px';
            cssProps.top = (relativeToViewportPos[1] + relativeToSize[1]) + 'px';
            return true;
        }
        var positionAttempts = positionABeforeB('bottom', 'top')
            ? [below, above, function () { return positionLeftRight(true); }]
            : [above, below, function () { return positionLeftRight(true); }];
        for (var i = 0; i < positionAttempts.length; i++) {
            var success = positionAttempts[i]();
            if (success) {
                break;
            }
        }
        if (options.triangle) {
            returnMe.triangle = addTriangleToFixedElement($element, isAbove ? 'top' : 'bottom', $relativeTo, $element.parent());
        }
        returnMe.positioned = isAbove ? 'top' : 'bottom';
    }
    if (shouldBePositioned('bottom') || shouldBePositioned('top')) {
        positionAboveBelow();
    }
    else {
        positionLeftRight();
    }
    // Hide any elements where CSS position variant doesn't match position of element
    var positionVariantSelector = options.positionVariantSelector;
    if (positionVariantSelector) {
        var positions = ['top', 'right', 'bottom', 'left'];
        positions.forEach(function stripElements(position) {
            var variantElement = $(positionVariantSelector + ".-" + position);
            if (variantElement.length && (returnMe.positioned === position)) {
                variantElement.remove();
            }
        });
    }
    $element.css(cssProps);
    return returnMe;
}
exports.positionFixed = positionFixed;

},{"./emitter":7,"jquery":20}],16:[function(require,module,exports){
"use strict";
/// <reference path="../typings/globals/meteor/index.d.ts" />
/** @module util/reactivity */
exports.__esModule = true;
/**
 * Store some data that depends on reactive data sources in a reactive var so as
 * not to recalculate it every time
 * @param getter callback to get the value
 * @param autorunnerOrTemplate
 * @returns {Function} a function that when called returns the latest value of the data
 */
function reactivelyStore(getter, autorunnerOrTemplate) {
    if (!getter) {
        console.error("You must provide a function to retrieve the data");
    }
    if (!autorunnerOrTemplate) {
        console.error('You must provide either an autorun function or a template instance as the second argument to reactivelyStore');
    }
    var autorunner;
    if (typeof autorunnerOrTemplate === 'function') {
        autorunner = autorunnerOrTemplate;
    }
    else {
        autorunner = autorunnerOrTemplate.autorun.bind(autorunnerOrTemplate);
    }
    var reactiveVar = new ReactiveVar(getter());
    autorunner(function () {
        reactiveVar.set(getter());
    });
    return function () { return reactiveVar.get(); };
}
exports.reactivelyStore = reactivelyStore;

},{}],17:[function(require,module,exports){
"use strict";
/// <reference path="../typings/schema.d.ts" />
/** @module util/schema */
exports.__esModule = true;
var meteor_1 = require("./meteor");
/**
 * @function optional
 * @export
 * @summary returns an optional primitive definition
 * @param {PrimitiveConstructor} primitive
 * @returns {Object} the schema value definition
 */
function optional(primitive) {
    return {
        type: primitive,
        optional: true
    };
}
exports.optional = optional;
/**
 * @function blackbox
 * @export
 * @summary returns an blackbox primitive definition
 * @param {PrimitiveConstructor} primitive (technically this will always be `Object`
 * but it is configurable for consistency)
 * @returns {IBlackbox} the schema value definition
 */
function blackbox(primitive) {
    return {
        type: primitive || Object,
        blackbox: true
    };
}
exports.blackbox = blackbox;
/**
 * @function optionalBlackbox
 * @export
 * @summary returns an optional, blackboxed primitive definition
 * @param {PrimitiveConstructor} primitive (technically this will always be `Object`
 * but it is configurable for consistency)
 * @returns {IOptionalBlackbox} the schema value definition
 */
function optionalBlackbox(primitive) {
    return {
        type: primitive || Object,
        optional: true,
        blackbox: true
    };
}
exports.optionalBlackbox = optionalBlackbox;
/**
 * @function createdDate
 * @export
 * @summary returns a typedef with a type of Date and an
 * autoValue function which returns a new date on insert
 * @returns {Schema.ICreatedDate} the schema value definition
 */
function createdDate() {
    return {
        type: Date,
        autoValue: function () {
            if (this.isInsert) {
                return new Date();
            }
            else if (this.isUpsert) {
                return { $setOnInsert: new Date() };
            }
            else {
                this.unset();
            }
        }
    };
}
exports.createdDate = createdDate;
/**
 * @function updatedDate
 * @export
 * @summary returns a typedef with a type of Date and an
 * autoValue function which returns a new date
 * @returns {Schema.IUpdatedDate} the schema value definition
 */
function updatedDate() {
    return {
        type: Date,
        autoValue: function () {
            return new Date();
        }
    };
}
exports.updatedDate = updatedDate;
/**
 * @function geoJSON
 * @export
 * @summary returns a typedef for a geoJSON object
 * @param {*} SimpleSchema A reference to SimpleSchema
 * @returns {Schema.IGeoJSON} the schema value definition
 */
function geoJSON(SimpleSchema) {
    return new SimpleSchema({
        'type': {
            type: String
        },
        'coordinates': {
            type: Array,
            minCount: 2,
            maxCount: 2
        },
        'coordinates.$': {
            type: Number
        }
    });
}
exports.geoJSON = geoJSON;
/**
 * @function defaultValue
 * @export
 * @summary returns a typedef for a field with a defined default
 * @param {PrimitiveConstructor} type The type constructor (e.g. Number)
 * @param {any} value The default value
 */
function defaultValue(type, value) {
    return {
        type: type,
        defaultValue: value
    };
}
exports.defaultValue = defaultValue;
/**
 * @function optionalDefaultValue
 * @export
 * @summary returns a typedef for an optional field with a defined default
 * @param {PrimitiveConstructor} type The type constructor (e.g. Number)
 * @param {any} value The default value
 */
function optionalDefaultValue(type, value) {
    return {
        type: type,
        optional: true,
        defaultValue: value
    };
}
exports.optionalDefaultValue = optionalDefaultValue;
/**
 * @function minZeroNumber
 * @export
 * @summary returns a typedef for a field for a number with a minimum
 * permitted value of zero
 * @returns {Object} typedef for number field with min value of 0
 */
function minZeroNumber() {
    return {
        type: Number,
        min: 0
    };
}
exports.minZeroNumber = minZeroNumber;
/**
 * @function optionalMinZeroNumber
 * @export
 * @summary returns a typedef for an optional field for a number with a minimum
 * permitted value of zero
 * @returns {Object} typedef for optional number field with min value of 0
 */
function optionalMinZeroNumber() {
    return Object.assign(minZeroNumber(), { optional: true });
}
exports.optionalMinZeroNumber = optionalMinZeroNumber;
/**
 * @function minZeroNumberWithDefault
 * @export
 * @summary returns a typedef for a field for a number with a minimum
 * permitted and default value of zero
 * @returns {Object} typedef for number field with minimum and default value of 0
 */
function minZeroNumberWithDefault() {
    return Object.assign(minZeroNumber(), { defaultValue: 0 });
}
exports.minZeroNumberWithDefault = minZeroNumberWithDefault;
/**
 * @function integerBetweenValues
 * @export
 * @summary returns a typedef for a field for an integer between two values
 * @param min {number} the minimum permitted value
 * @param max {number} the maximum permitted value
 */
function integerBetweenValues(min, max) {
    return {
        type: 'SimpleSchema.Integer',
        min: min,
        max: max
    };
}
exports.integerBetweenValues = integerBetweenValues;
/**
 * @function optionalIntegerBetweenValues
 * @export
 * @summary returns a typedef for an optional field for an integer between two values
 * @param min {number} the minimum permitted value
 * @param max {number} the maximum permitted value
 */
function optionalIntegerBetweenValues(min, max) {
    return Object.assign(integerBetweenValues(min, max), { optional: true });
}
exports.optionalIntegerBetweenValues = optionalIntegerBetweenValues;
/**
 * @function idParams
 * @export
 * @summary returns an array with a single object in which defines an _id path param
 * @param {string} name the name of the field
 * @returns {any} the params array
 */
function idParams(name) {
    return [{
            "in": 'path',
            name: name,
            description: 'The mongo id of the document to update',
            type: 'string',
            required: true
        }];
}
exports.idParams = idParams;
/**
 * @function checkParameters
 * @export
 * @summary Check incoming parameters against a schema
 * @param {any} context The `this` context
 * @param {any} params The incoming parameters
 * @param {any} schema A SimpleSchema schema
 * @throws {400} on validation error
 * @returns {boolean} true
 */
function checkParameters(context, params, schema) {
    var validator = schema.newContext();
    validator.validate(params);
    meteor_1.assert.call(context, validator.isValid(), 400, validator.validationErrors());
    return true;
}
exports.checkParameters = checkParameters;
/**
 * @function positiveNumber
 * @export
 * @summary returns a typedef for a field for a number with a minimum
 * permitted value greater than zero
 * @returns {Object} typedef for number field with positive min value (> 0)
 */
function positiveNumber() {
    return {
        type: Number,
        min: 0,
        exclusiveMin: true
    };
}
exports.positiveNumber = positiveNumber;
/**
 * @function optionalPositiveNumber
 * @export
 * @summary returns a typedef for an optional field for a number with a minimum
 * permitted value of zero
 * @returns {Object} typedef for optional number field with positive min value (> 0)
 */
function optionalPositiveNumber() {
    return {
        type: Number,
        min: 0,
        exclusiveMin: true,
        optional: true
    };
}
exports.optionalPositiveNumber = optionalPositiveNumber;
/**
 * @function positiveInteger
 * @export
 * @summary returns a typedef for a field for an integer with a minimum
 * permitted value of zero
 * @returns {Object} typedef for integer field with positive min value (> 0)
 */
function positiveInteger() {
    return {
        type: 'SimpleSchema.Integer',
        min: 0,
        exclusiveMin: true
    };
}
exports.positiveInteger = positiveInteger;
/**
 * @function optionalPositiveInteger
 * @export
 * @summary returns a typedef for an optional field for an integer with a minimum
 * permitted value of zero
 * @returns {Object} typedef for optional integer field with positive min value (> 0)
 */
function optionalPositiveInteger() {
    return {
        type: 'SimpleSchema.Integer',
        min: 0,
        exclusiveMin: true,
        optional: true
    };
}
exports.optionalPositiveInteger = optionalPositiveInteger;
/**
 * @function immutable
 * @export
 * @summary returns a typedef for a field that should not be updated once set
 * @returns {Object} typedef for field with immutable value
 */
function immutable(type) {
    return {
        denyUpdate: true,
        type: type
    };
}
/**
 * @function optionalImmutable
 * @export
 * @summary returns a typedef for an optional field that should not be updated once set
 * @returns {Object} typedef for optional field with immutable value
 */
function optionalImmutable(type) {
    return {
        denyUpdate: true,
        type: type,
        optional: true
    };
}

},{"./meteor":12}],18:[function(require,module,exports){
"use strict";
/// <reference path="../typings/globals/underscore/index.d.ts" />
/** @module util/string */
exports.__esModule = true;
var _ = require("underscore");
var is = {
    email: isEmail,
    URL: isUrl,
    IP: isIP,
    IPv4: isIPv4,
    IPv6: isIPv6,
    nonEmpty: nonEmpty,
    empty: function () { return !nonEmpty(); }
};
exports.is = is;
/**
 * @function capitalize
 * @export
 * @summary makes the first letter of a string
 * uppercase and the rest lowercase
 * @param {string} str the string to capitalise
 * @returns {string} the capitalised string
 */
function capitalize(str) {
    str = str || '';
    str = str.trim();
    if (str[0]) {
        str = str[0].toUpperCase() + str.substr(1).toLowerCase();
    }
    return str;
}
exports.capitalize = capitalize;
/**
 * @function humanize
 * @export
 * @summary Converts identifiers to more human-friendly
 * versions. e.g. helloWorld -> Hello world
 * @param {string} str the string to humanise
 * @returns {string} the human-friendly version of the
 * string
 */
function humanize(str) {
    // Ensure we have a value
    str = str || '';
    // Ensure string
    str = str.toString(); // might be a number
    // Remove leading/trailing white-space
    str = str.trim();
    // Remove file extension
    str = str.replace(extname(str), '');
    // Standardise delimeters
    str = underscore(str).replace('-', '_');
    // Remove trailing underscores
    str = str.replace(/[\W_]+/g, ' ');
    // De-camelCase
    str = str.replace(/([a-z])([A-Z])/g, '$1 $2');
    return capitalize(str).trim();
}
exports.humanize = humanize;
/**
 * @function titleize
 * @export
 * @summary converts each words' first letter
 * to uppercase.
 * @param {string} str the string to titleize
 * @returns {string} the titleized string
 */
function titleize(str) {
    if (str.length === 0) {
        return '';
    }
    return str.split(' ').map(capitalize).join(' ');
}
exports.titleize = titleize;
/**
 * @function camelize
 * @export
 * @summary converts a string of words to a lowerCamelCase word
 * @param {string} str the string to camelize
 * @returns {string} the camelized string
 */
function camelize(str) {
    return str.replace(/(?:^\w|[A-Z]|\b\w|\s+)/g, function (match, index) {
        if (+match === 0)
            return ''; // or if (/\s+/.test(match)) for white spaces
        return index == 0 ? match.toLowerCase() : match.toUpperCase();
    });
}
exports.camelize = camelize;
/**
 * @function hyphenate
 * @export
 * @summary converts spaces to hyphens
 * @param {string} str the string to perform the
 * replacements on
 * @returns {string} the processed string
 */
function hyphenate(str) {
    return str.replace(/ /g, '-');
}
exports.hyphenate = hyphenate;
/**
 * @function truncate
 * @export
 * @summary limits the length of a string to `count` (plus
 * three for dots)
 * @param {string} str the string to truncate
 * @param {number} [count] the maximum length of the string
 * @returns {string} the possibly truncated string
 */
function truncate(str, count) {
    count = typeof count === 'number' ? count : 10;
    var words = str.split(' ');
    var output = '';
    function addWord(word) {
        if (!word) {
            return output;
        }
        if (output.length && count >= output.length + 1 + word.length) {
            output += ' ' + word;
            addWord(words.shift());
        }
        else if (!output.length && count >= output.length + word.length) {
            output += word;
            addWord(words.shift());
        }
        else {
            if (!output.length) {
                output += word[0];
            }
            output += '...';
        }
        return output;
    }
    return addWord(words.shift());
}
exports.truncate = truncate;
/**
 * @function addThousandsSeparators
 * @export
 * @summary Inserts a comma every three digits
 * @param {string|number} str a number, represented
 * as a string
 * @returns {string} the formatted number
 */
function addThousandsSeparators(str) {
    return str
        .toString()
        .replace(/\B(?=(\d{3})+(?!\d))/g, ',')
        .replace(',,', ',');
}
exports.addThousandsSeparators = addThousandsSeparators;
/**
 * @function extname
 * @export
 * @summary gets the file extension from a file name
 * @param {string} filename the full filename. e.g. "movie.avi"
 * @returns {string} the file extension
 */
function extname(filename) {
    var index = filename.lastIndexOf('.');
    var ext = filename.substring(index, filename.length);
    return (index === -1) ? '' : ext;
}
exports.extname = extname;
/**
 * @function underscore
 * @export
 * @summary converts spaces to underscores in a string
 * @param {string} str the string to process
 * @returns {string} the processed string
 */
function underscore(str) {
    return str.replace(/ /g, '_');
}
exports.underscore = underscore;
/**
 * @function keyify
 * @export
 * @summary converts spaces to dashes/underscores &
 * lowercases the string for db values and filenames etc..
 * @param {string} str the string to keyify
 * @param {string} [replacer] the character to use in
 * place of spaces. Can be '-' or '_'
 * @returns {string} the keyified string
 */
function keyify(str, replacer) {
    if (replacer === '_') {
        return underscore(str).toLowerCase();
    }
    else {
        return hyphenate(str).toLowerCase();
    }
}
exports.keyify = keyify;
/**
 * @function getDomain
 * @export
 * @summary gets the domain from an email address
 * @param {string} str the email address to test
 * @returns {string|null} the domain, or null
 */
function getDomain(str) {
    var parsedDomain = require('parse-domain')(str || '');
    var parts = [parsedDomain.domain, parsedDomain.tld];
    if (parsedDomain.subdomain) {
        parts.unshift(parsedDomain.subdomain);
    }
    return parts.join('.');
}
exports.getDomain = getDomain;
/**
 * @function startsWith
 * @export
 * @summary Reports whether `haystack` starts with `needle`
 * @param {string} haystack the string to search
 * @param {string} needle the substring to search for
 * @returns {boolean} whether haystack starts with needle
 */
function startsWith(haystack, needle) {
    return haystack && haystack.slice(0, needle.length) === needle;
}
exports.startsWith = startsWith;
/**
 * @function endsWith
 * @export
 * @summary Reports whether `haystack` ends with `needle`
 * @param {string} haystack the string to search
 * @param {string} needle the substring to search for
 * @returns {boolean} whether haystack ends with needle
 */
function endsWith(haystack, needle) {
    if (!haystack) {
        return false;
    }
    var offset = haystack.length - needle.length;
    return haystack.slice(offset) === needle;
}
exports.endsWith = endsWith;
/**
 * @function escapeRegExp
 * @export
 * @summary Escapes special characters in a string, enabling
 * the string's use as a regex
 * @param {string} str the string to escape
 * @returns {string} the escaped string
 */
function escapeRegExp(str) {
    return String(str).replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
}
exports.escapeRegExp = escapeRegExp;
/**
 * @function isEmail
 * @export
 * @summary determines whether a string looks like
 * an email address
 * @param {string} str the potential email address
 * @returns {boolean} whether the string looks like an email
 */
function isEmail(str) {
    var regEx = new RegExp('^(([^<>()\\[\\]\\\\.,;:\\s@"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@"]+)*)|' +
        '(".+"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[' +
        'a-zA-Z0-9]{2,}))$');
    return regEx.test(str);
}
/**
 * @function isUrl
 * @export
 * @summary determines whether a string looks like
 * a url
 * @param {string} str the potential url
 * @returns {boolean} whether the string looks like a url
 */
function isUrl(str) {
    var regEx = new RegExp('^(?:(?:https?|ftp):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1' +
        ',3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,' +
        '3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:' +
        '[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)' +
        '(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})' +
        '))(?::\\d{2,5})?(?:[/?#]\\S*)?$', 'i');
    return regEx.test(str);
}
/**
 * @function isIP
 * @export
 * @summary determins whether a string looks like
 * an ip address (either IPv4 or IPv6)
 * @param {string} str the potential ip address
 * @returns {boolean} whether the string looks like an ip
 */
function isIP(str) {
    return isIPv4(str) || isIPv6(str);
}
/**
 * @function isIPv4
 * @export
 * @summary determines whether a string looks like
 * an ip address
 * @param {string} str the potential ip address
 * @returns {boolean} whether the string looks like an ip
 */
function isIPv4(str) {
    var regEx = /^(25[0-5]|2[0-4]\d|1\d\d|0?[0-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|0?[0-9]?\d)){3}$/;
    return regEx.test(str);
}
/**
 * @function isIPv6
 * @export
 * @summary determines whether a string looks like
 * an ip address
 * @param {string} str the potential ip address
 * @returns {boolean} whether the string looks like an ip
 */
function isIPv6(str) {
    var regEx = new RegExp('^\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:' +
        '){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[' +
        '1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1' +
        '\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((' +
        ':[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[' +
        '0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4}' +
        ')|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d' +
        '\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,' +
        '4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})' +
        ')|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|' +
        '2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-F' +
        'a-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]' +
        '|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*$');
    return regEx.test(str);
}
/**
 * @function caseInsensitivePermutations
 * @export
 * @summary generates permutations of all case variations of a given string.
 * @param str {string} The string to get permutations of
 * @returns {string[]} an array of permutations
 */
function caseInsensitivePermutations(str) {
    var permutations = [''];
    var _loop_1 = function (i) {
        var ch = str.charAt(i);
        permutations = _.flatten(permutations.map(function mapPermutations(prefix) {
            var lowerCaseChar = ch.toLowerCase();
            var upperCaseChar = ch.toUpperCase();
            // Don't add unneccesary permutations when ch is not a letter
            if (lowerCaseChar === upperCaseChar) {
                return [prefix + ch];
            }
            else {
                return [prefix + lowerCaseChar, prefix + upperCaseChar];
            }
        }));
    };
    for (var i = 0; i < str.length; i++) {
        _loop_1(i);
    }
    return permutations;
}
exports.caseInsensitivePermutations = caseInsensitivePermutations;
function nonEmpty(str) {
    return typeof str === 'string' && str.length > 0;
}

},{"parse-domain":21,"underscore":24}],19:[function(require,module,exports){
"use strict";
/** @module util */
exports.__esModule = true;
var _array = require("./lib/array");
var _blaze = require("./lib/blaze");
var _collection = require("./lib/collection");
var _config = require("./lib/config");
var _data = require("./lib/data");
var _date = require("./lib/date");
var _emitter = require("./lib/emitter");
var _http = require("./lib/http");
var _image = require("./lib/image");
var _location = require("./lib/location");
var _meteor = require("./lib/meteor");
var _number = require("./lib/number");
var _object = require("./lib/object");
var _popover = require("./lib/popover");
var _reactivity = require("./lib/reactivity");
var _schema = require("./lib/schema");
var _string = require("./lib/string");
/** @memberof util */
exports.array = _array;
/** @memberof util */
exports.blaze = _blaze;
/** @memberof util */
exports.collection = _collection;
/** @memberof util */
exports.config = _config;
/** @memberof util */
exports.data = _data;
/** @memberof util */
exports.date = _date;
/** @memberof util */
exports.emitter = _emitter;
/** @memberof util */
exports.http = _http;
/** @memberof util */
exports.image = _image;
/** @memberof util */
exports.location = _location;
/** @memberof util */
exports.meteor = _meteor;
/** @memberof util */
exports.number = _number;
/** @memberof util */
exports.object = _object;
/** @memberof util */
exports.popover = _popover;
/** @memberof util */
exports.reactivity = _reactivity;
/** @memberof util */
exports.schema = _schema;
/** @memberof util */
exports.string = _string;

},{"./lib/array":1,"./lib/blaze":2,"./lib/collection":3,"./lib/config":4,"./lib/data":5,"./lib/date":6,"./lib/emitter":7,"./lib/http":8,"./lib/image":10,"./lib/location":11,"./lib/meteor":12,"./lib/number":13,"./lib/object":14,"./lib/popover":15,"./lib/reactivity":16,"./lib/schema":17,"./lib/string":18}],20:[function(require,module,exports){
/*!
 * jQuery JavaScript Library v3.2.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2017-03-20T18:59Z
 */
( function( global, factory ) {

	"use strict";

	if ( typeof module === "object" && typeof module.exports === "object" ) {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";

var arr = [];

var document = window.document;

var getProto = Object.getPrototypeOf;

var slice = arr.slice;

var concat = arr.concat;

var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Object );

var support = {};



	function DOMEval( code, doc ) {
		doc = doc || document;

		var script = doc.createElement( "script" );

		script.text = code;
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}
/* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module



var
	version = "3.2.1",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android <=4.0 only
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([a-z])/g,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	};

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {

		// Return all the elements in a clean array
		if ( num == null ) {
			return slice.call( this );
		}

		// Return just the one element from the set
		return num < 0 ? this[ num + this.length ] : this[ num ];
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = Array.isArray( copy ) ) ) ) {

					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && Array.isArray( src ) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject( src ) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isFunction: function( obj ) {
		return jQuery.type( obj ) === "function";
	},

	isWindow: function( obj ) {
		return obj != null && obj === obj.window;
	},

	isNumeric: function( obj ) {

		// As of jQuery 3.0, isNumeric is limited to
		// strings and numbers (primitives or objects)
		// that can be coerced to finite numbers (gh-2662)
		var type = jQuery.type( obj );
		return ( type === "number" || type === "string" ) &&

			// parseFloat NaNs numeric-cast false positives ("")
			// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
			// subtraction forces infinities to NaN
			!isNaN( obj - parseFloat( obj ) );
	},

	isPlainObject: function( obj ) {
		var proto, Ctor;

		// Detect obvious negatives
		// Use toString instead of jQuery.type to catch host objects
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			return false;
		}

		proto = getProto( obj );

		// Objects with no prototype (e.g., `Object.create( null )`) are plain
		if ( !proto ) {
			return true;
		}

		// Objects with prototype are plain iff they were constructed by a global Object function
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: function( obj ) {

		/* eslint-disable no-unused-vars */
		// See https://github.com/eslint/eslint/issues/6125
		var name;

		for ( name in obj ) {
			return false;
		}
		return true;
	},

	type: function( obj ) {
		if ( obj == null ) {
			return obj + "";
		}

		// Support: Android <=2.3 only (functionish RegExp)
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ toString.call( obj ) ] || "object" :
			typeof obj;
	},

	// Evaluates a script in a global context
	globalEval: function( code ) {
		DOMEval( code );
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Support: IE <=9 - 11, Edge 12 - 13
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// Support: Android <=4.0 only
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	// Support: Android <=4.0 only, PhantomJS 1 only
	// push.apply(_, arraylike) throws on ancient WebKit
	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var tmp, args, proxy;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	now: Date.now,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
function( i, name ) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
} );

function isArrayLike( obj ) {

	// Support: real iOS 8.2 only (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = jQuery.type( obj );

	if ( type === "function" || jQuery.isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.3.3
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-08-08
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// https://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// CSS string/identifier serialization
	// https://drafts.csswg.org/cssom/#common-serializing-idioms
	rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
	fcssescape = function( ch, asCodePoint ) {
		if ( asCodePoint ) {

			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
			if ( ch === "\0" ) {
				return "\uFFFD";
			}

			// Control characters and (dependent upon position) numbers get escaped as code points
			return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
		}

		// Other potentially-special ASCII characters get backslash-escaped
		return "\\" + ch;
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	},

	disabledAncestor = addCombinator(
		function( elem ) {
			return elem.disabled === true && ("form" in elem || "label" in elem);
		},
		{ dir: "parentNode", next: "legend" }
	);

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {

		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
			setDocument( context );
		}
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

				// ID selector
				if ( (m = match[1]) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( (elem = context.getElementById( m )) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && (elem = newContext.getElementById( m )) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[2] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( (m = match[3]) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!compilerCache[ selector + " " ] &&
				(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

				if ( nodeType !== 1 ) {
					newContext = context;
					newSelector = selector;

				// qSA looks outside Element context, which is not what we want
				// Thanks to Andrew Dupont for this workaround technique
				// Support: IE <=8
				// Exclude object elements
				} else if ( context.nodeName.toLowerCase() !== "object" ) {

					// Capture the context ID, setting it first if necessary
					if ( (nid = context.getAttribute( "id" )) ) {
						nid = nid.replace( rcssescape, fcssescape );
					} else {
						context.setAttribute( "id", (nid = expando) );
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[i] = "#" + nid + " " + toSelector( groups[i] );
					}
					newSelector = groups.join( "," );

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;
				}

				if ( newSelector ) {
					try {
						push.apply( results,
							newContext.querySelectorAll( newSelector )
						);
						return results;
					} catch ( qsaError ) {
					} finally {
						if ( nid === expando ) {
							context.removeAttribute( "id" );
						}
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement("fieldset");

	try {
		return !!fn( el );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}
		// release memory in IE
		el = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			a.sourceIndex - b.sourceIndex;

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {

	// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Only certain elements can match :enabled or :disabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
		if ( "form" in elem ) {

			// Check for inherited disabledness on relevant non-disabled elements:
			// * listed form-associated elements in a disabled fieldset
			//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
			// * option elements in a disabled optgroup
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
			// All such elements have a "form" property.
			if ( elem.parentNode && elem.disabled === false ) {

				// Option elements defer to a parent optgroup if present
				if ( "label" in elem ) {
					if ( "label" in elem.parentNode ) {
						return elem.parentNode.disabled === disabled;
					} else {
						return elem.disabled === disabled;
					}
				}

				// Support: IE 6 - 11
				// Use the isDisabled shortcut property to check for disabled fieldset ancestors
				return elem.isDisabled === disabled ||

					// Where there is no isDisabled, check manually
					/* jshint -W018 */
					elem.isDisabled !== !disabled &&
						disabledAncestor( elem ) === disabled;
			}

			return elem.disabled === disabled;

		// Try to winnow out elements that can't be disabled before trusting the disabled property.
		// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
		// even exist on them, let alone have a boolean value.
		} else if ( "label" in elem ) {
			return elem.disabled === disabled;
		}

		// Remaining elements are neither :enabled nor :disabled
		return false;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9-11, Edge
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	if ( preferredDoc !== document &&
		(subWindow = document.defaultView) && subWindow.top !== subWindow ) {

		// Support: IE 11, Edge
		if ( subWindow.addEventListener ) {
			subWindow.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( subWindow.attachEvent ) {
			subWindow.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( el ) {
		el.className = "i";
		return !el.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( el ) {
		el.appendChild( document.createComment("") );
		return !el.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( el ) {
		docElem.appendChild( el ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	});

	// ID filter and find
	if ( support.getById ) {
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var elem = context.getElementById( id );
				return elem ? [ elem ] : [];
			}
		};
	} else {
		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};

		// Support: IE 6 - 7 only
		// getElementById is not reliable as a find shortcut
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var node, i, elems,
					elem = context.getElementById( id );

				if ( elem ) {

					// Verify the id attribute
					node = elem.getAttributeNode("id");
					if ( node && node.value === id ) {
						return [ elem ];
					}

					// Fall back on getElementsByName
					elems = context.getElementsByName( id );
					i = 0;
					while ( (elem = elems[i++]) ) {
						node = elem.getAttributeNode("id");
						if ( node && node.value === id ) {
							return [ elem ];
						}
					}
				}

				return [];
			}
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See https://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( el ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// https://bugs.jquery.com/ticket/12359
			docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( el.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !el.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !el.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibling-combinator selector` fails
			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( el ) {
			el.innerHTML = "<a href='' disabled='disabled'></a>" +
				"<select disabled='disabled'><option/></select>";

			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement("input");
			input.setAttribute( "type", "hidden" );
			el.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( el.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( el.querySelectorAll(":enabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: IE9-11+
			// IE's :disabled selector does not pick up the children of disabled fieldsets
			docElem.appendChild( el ).disabled = true;
			if ( el.querySelectorAll(":disabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			el.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( el ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( el, "*" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( el, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === document ? -1 :
				b === document ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		!compilerCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.escape = function( sel ) {
	return (sel + "").replace( rcssescape, fcssescape );
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || (node[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								(outerCache[ node.uniqueID ] = {});

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {
							// Use previously-cached element index if available
							if ( useCache ) {
								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {
								// Use the same loop as above to seek `elem` from the start
								while ( (node = ++nodeIndex && node && node[ dir ] ||
									(diff = nodeIndex = 0) || start.pop()) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] || (node[ expando ] = {});

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												(outerCache[ node.uniqueID ] = {});

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": createDisabledPseudo( false ),
		"disabled": createDisabledPseudo( true ),

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
			return false;
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

						if ( skip && skip === elem.nodeName.toLowerCase() ) {
							elem = elem[ dir ] || elem;
						} else if ( (oldCache = uniqueCache[ key ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
			return false;
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context === document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					if ( !context && elem.ownerDocument !== document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context || document, xml) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( el ) {
	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement("fieldset") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( el ) {
	el.innerHTML = "<a href='#'></a>";
	return el.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( el ) {
	el.innerHTML = "<input/>";
	el.firstChild.setAttribute( "value", "" );
	return el.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( el ) {
	return el.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;

// Deprecated
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;
jQuery.escapeSelector = Sizzle.escape;




var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;



function nodeName( elem, name ) {

  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

};
var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



var risSimple = /^.[^:#\[\.,]*$/;

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			return !!qualifier.call( elem, i, elem ) !== not;
		} );
	}

	// Single element
	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );
	}

	// Arraylike of elements (jQuery, arguments, Array)
	if ( typeof qualifier !== "string" ) {
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	// Simple selector that can be filtered directly, removing non-Elements
	if ( risSimple.test( qualifier ) ) {
		return jQuery.filter( qualifier, elements, not );
	}

	// Complex selector, compare the two sets, removing non-Elements
	qualifier = jQuery.filter( qualifier, elements );
	return jQuery.grep( elements, function( elem ) {
		return ( indexOf.call( qualifier, elem ) > -1 ) !== not && elem.nodeType === 1;
	} );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	if ( elems.length === 1 && elem.nodeType === 1 ) {
		return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
	}

	return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
		return elem.nodeType === 1;
	} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i, ret,
			len = this.length,
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		ret = this.pushStack( [] );

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		return len > 1 ? jQuery.uniqueSort( ret ) : ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					if ( elem ) {

						// Inject the element directly into the jQuery object
						this[ 0 ] = elem;
						this.length = 1;
					}
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			targets = typeof selectors !== "string" && jQuery( selectors );

		// Positional selectors never match, since there's no _selection_ context
		if ( !rneedsContext.test( selectors ) ) {
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( targets ?
						targets.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
        if ( nodeName( elem, "iframe" ) ) {
            return elem.contentDocument;
        }

        // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
        // Treat the template element as a regular one in browsers that
        // don't support it.
        if ( nodeName( elem, "template" ) ) {
            elem = elem.content || elem;
        }

        return jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = locked || options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( jQuery.isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory && !firing ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


function Identity( v ) {
	return v;
}
function Thrower( ex ) {
	throw ex;
}

function adoptValue( value, resolve, reject, noValue ) {
	var method;

	try {

		// Check for promise aspect first to privilege synchronous behavior
		if ( value && jQuery.isFunction( ( method = value.promise ) ) ) {
			method.call( value ).done( resolve ).fail( reject );

		// Other thenables
		} else if ( value && jQuery.isFunction( ( method = value.then ) ) ) {
			method.call( value, resolve, reject );

		// Other non-thenables
		} else {

			// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
			// * false: [ value ].slice( 0 ) => resolve( value )
			// * true: [ value ].slice( 1 ) => resolve()
			resolve.apply( undefined, [ value ].slice( noValue ) );
		}

	// For Promises/A+, convert exceptions into rejections
	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
	// Deferred#then to conditionally suppress rejection.
	} catch ( value ) {

		// Support: Android 4.0 only
		// Strict mode functions invoked without .call/.apply get global-object context
		reject.apply( undefined, [ value ] );
	}
}

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				[ "notify", "progress", jQuery.Callbacks( "memory" ),
					jQuery.Callbacks( "memory" ), 2 ],
				[ "resolve", "done", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 0, "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 1, "rejected" ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				"catch": function( fn ) {
					return promise.then( null, fn );
				},

				// Keep pipe for back-compat
				pipe: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;

					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = jQuery.isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},
				then: function( onFulfilled, onRejected, onProgress ) {
					var maxDepth = 0;
					function resolve( depth, deferred, handler, special ) {
						return function() {
							var that = this,
								args = arguments,
								mightThrow = function() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if ( depth < maxDepth ) {
										return;
									}

									returned = handler.apply( that, args );

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if ( returned === deferred.promise() ) {
										throw new TypeError( "Thenable self-resolution" );
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned &&

										// Support: Promises/A+ section 2.3.4
										// https://promisesaplus.com/#point-64
										// Only check objects and functions for thenability
										( typeof returned === "object" ||
											typeof returned === "function" ) &&
										returned.then;

									// Handle a returned thenable
									if ( jQuery.isFunction( then ) ) {

										// Special processors (notify) just wait for resolution
										if ( special ) {
											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special )
											);

										// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special ),
												resolve( maxDepth, deferred, Identity,
													deferred.notifyWith )
											);
										}

									// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if ( handler !== Identity ) {
											that = undefined;
											args = [ returned ];
										}

										// Process the value(s)
										// Default process is resolve
										( special || deferred.resolveWith )( that, args );
									}
								},

								// Only normal processors (resolve) catch and reject exceptions
								process = special ?
									mightThrow :
									function() {
										try {
											mightThrow();
										} catch ( e ) {

											if ( jQuery.Deferred.exceptionHook ) {
												jQuery.Deferred.exceptionHook( e,
													process.stackTrace );
											}

											// Support: Promises/A+ section 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignore post-resolution exceptions
											if ( depth + 1 >= maxDepth ) {

												// Only substitute handlers pass on context
												// and multiple values (non-spec behavior)
												if ( handler !== Thrower ) {
													that = undefined;
													args = [ e ];
												}

												deferred.rejectWith( that, args );
											}
										}
									};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if ( depth ) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if ( jQuery.Deferred.getStackHook ) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout( process );
							}
						};
					}

					return jQuery.Deferred( function( newDefer ) {

						// progress_handlers.add( ... )
						tuples[ 0 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								jQuery.isFunction( onProgress ) ?
									onProgress :
									Identity,
								newDefer.notifyWith
							)
						);

						// fulfilled_handlers.add( ... )
						tuples[ 1 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								jQuery.isFunction( onFulfilled ) ?
									onFulfilled :
									Identity
							)
						);

						// rejected_handlers.add( ... )
						tuples[ 2 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								jQuery.isFunction( onRejected ) ?
									onRejected :
									Thrower
							)
						);
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 5 ];

			// promise.progress = list.add
			// promise.done = list.add
			// promise.fail = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(
					function() {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[ 3 - i ][ 2 ].disable,

					// progress_callbacks.lock
					tuples[ 0 ][ 2 ].lock
				);
			}

			// progress_handlers.fire
			// fulfilled_handlers.fire
			// rejected_handlers.fire
			list.add( tuple[ 3 ].fire );

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
				return this;
			};

			// deferred.notifyWith = list.fireWith
			// deferred.resolveWith = list.fireWith
			// deferred.rejectWith = list.fireWith
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( singleValue ) {
		var

			// count of uncompleted subordinates
			remaining = arguments.length,

			// count of unprocessed arguments
			i = remaining,

			// subordinate fulfillment data
			resolveContexts = Array( i ),
			resolveValues = slice.call( arguments ),

			// the master Deferred
			master = jQuery.Deferred(),

			// subordinate callback factory
			updateFunc = function( i ) {
				return function( value ) {
					resolveContexts[ i ] = this;
					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( !( --remaining ) ) {
						master.resolveWith( resolveContexts, resolveValues );
					}
				};
			};

		// Single- and empty arguments are adopted like Promise.resolve
		if ( remaining <= 1 ) {
			adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,
				!remaining );

			// Use .then() to unwrap secondary thenables (cf. gh-3000)
			if ( master.state() === "pending" ||
				jQuery.isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

				return master.then();
			}
		}

		// Multiple arguments are aggregated like Promise.all array elements
		while ( i-- ) {
			adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
		}

		return master.promise();
	}
} );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

jQuery.Deferred.exceptionHook = function( error, stack ) {

	// Support: IE 8 - 9 only
	// Console exists when dev tools are open, which can happen at any time
	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
		window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
	}
};




jQuery.readyException = function( error ) {
	window.setTimeout( function() {
		throw error;
	} );
};




// The deferred used on DOM ready
var readyList = jQuery.Deferred();

jQuery.fn.ready = function( fn ) {

	readyList
		.then( fn )

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch( function( error ) {
			jQuery.readyException( error );
		} );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
	}
} );

jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout( jQuery.ready );

} else {

	// Use the handy event callback
	document.addEventListener( "DOMContentLoaded", completed );

	// A fallback to window.onload, that will always work
	window.addEventListener( "load", completed );
}




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( jQuery.type( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !jQuery.isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
					value :
					value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	if ( chainable ) {
		return elems;
	}

	// Gets
	if ( bulk ) {
		return fn.call( elems );
	}

	return len ? fn( elems[ 0 ], key ) : emptyGet;
};
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	cache: function( owner ) {

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		// Always use camelCase key (gh-2257)
		if ( typeof data === "string" ) {
			cache[ jQuery.camelCase( data ) ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ jQuery.camelCase( prop ) ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :

			// Always use camelCase key (gh-2257)
			owner[ this.expando ] && owner[ this.expando ][ jQuery.camelCase( key ) ];
	},
	access: function( owner, key, value ) {

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			return this.get( owner, key );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key !== undefined ) {

			// Support array or space separated string of keys
			if ( Array.isArray( key ) ) {

				// If key is an array of keys...
				// We always set camelCase keys, so remove that.
				key = key.map( jQuery.camelCase );
			} else {
				key = jQuery.camelCase( key );

				// If a key with the spaces exists, use it.
				// Otherwise, create an array by matching non-whitespace
				key = key in cache ?
					[ key ] :
					( key.match( rnothtmlwhite ) || [] );
			}

			i = key.length;

			while ( i-- ) {
				delete cache[ key[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <=35 - 45
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function getData( data ) {
	if ( data === "true" ) {
		return true;
	}

	if ( data === "false" ) {
		return false;
	}

	if ( data === "null" ) {
		return null;
	}

	// Only convert to a number if it doesn't change the string
	if ( data === +data + "" ) {
		return +data;
	}

	if ( rbrace.test( data ) ) {
		return JSON.parse( data );
	}

	return data;
}

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = getData( data );
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE 11 only
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = jQuery.camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// The key will always be camelCased in Data
				data = dataUser.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each( function() {

				// We always store the camelCased key
				dataUser.set( this, key, value );
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || Array.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHiddenWithinTree = function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			jQuery.contains( elem.ownerDocument, elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};

var swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};




function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted,
		scale = 1,
		maxIterations = 20,
		currentValue = tween ?
			function() {
				return tween.cur();
			} :
			function() {
				return jQuery.css( elem, prop, "" );
			},
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		do {

			// If previous iteration zeroed out, double until we get *something*.
			// Use string for doubling so we don't accidentally see scale as unchanged below
			scale = scale || ".5";

			// Adjust and apply
			initialInUnit = initialInUnit / scale;
			jQuery.style( elem, prop, initialInUnit + unit );

		// Update scale, tolerating zero or NaN from tween.cur()
		// Break the loop if scale is unchanged or perfect, or if we've just had enough.
		} while (
			scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations
		);
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


var defaultDisplayMap = {};

function getDefaultDisplay( elem ) {
	var temp,
		doc = elem.ownerDocument,
		nodeName = elem.nodeName,
		display = defaultDisplayMap[ nodeName ];

	if ( display ) {
		return display;
	}

	temp = doc.body.appendChild( doc.createElement( nodeName ) );
	display = jQuery.css( temp, "display" );

	temp.parentNode.removeChild( temp );

	if ( display === "none" ) {
		display = "block";
	}
	defaultDisplayMap[ nodeName ] = display;

	return display;
}

function showHide( elements, show ) {
	var display, elem,
		values = [],
		index = 0,
		length = elements.length;

	// Determine new display value for elements that need to change
	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		display = elem.style.display;
		if ( show ) {

			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
			// check is required in this first loop unless we have a nonempty display value (either
			// inline or about-to-be-restored)
			if ( display === "none" ) {
				values[ index ] = dataPriv.get( elem, "display" ) || null;
				if ( !values[ index ] ) {
					elem.style.display = "";
				}
			}
			if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
				values[ index ] = getDefaultDisplay( elem );
			}
		} else {
			if ( display !== "none" ) {
				values[ index ] = "none";

				// Remember what we're overwriting
				dataPriv.set( elem, "display", display );
			}
		}
	}

	// Set the display of the elements in a second loop to avoid constant reflow
	for ( index = 0; index < length; index++ ) {
		if ( values[ index ] != null ) {
			elements[ index ].style.display = values[ index ];
		}
	}

	return elements;
}

jQuery.fn.extend( {
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHiddenWithinTree( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]+)/i );

var rscriptType = ( /^$|\/(?:java|ecma)script/i );



// We have to close these tags to support XHTML (#13200)
var wrapMap = {

	// Support: IE <=9 only
	option: [ 1, "<select multiple='multiple'>", "</select>" ],

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

// Support: IE <=9 only
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;


function getAll( context, tag ) {

	// Support: IE <=9 - 11 only
	// Use typeof to avoid zero-argument method invocation on host objects (#15151)
	var ret;

	if ( typeof context.getElementsByTagName !== "undefined" ) {
		ret = context.getElementsByTagName( tag || "*" );

	} else if ( typeof context.querySelectorAll !== "undefined" ) {
		ret = context.querySelectorAll( tag || "*" );

	} else {
		ret = [];
	}

	if ( tag === undefined || tag && nodeName( context, tag ) ) {
		return jQuery.merge( [ context ], ret );
	}

	return ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, contains, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( jQuery.type( elem ) === "object" ) {

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (#12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		contains = jQuery.contains( elem.ownerDocument, elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( contains ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0 - 4.3 only
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Android <=4.1 only
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE <=11 only
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
} )();
var documentElement = document.documentElement;



var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE <=9 only
// See #13393 for more info
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Ensure that invalid selectors throw exceptions at attach time
		// Evaluate against documentElement in case elem is a non-element node (e.g., document)
		if ( selector ) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = {};
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( nativeEvent ) {

		// Make a writable jQuery.Event from the native event object
		var event = jQuery.event.fix( nativeEvent );

		var i, j, ret, matched, handleObj, handlerQueue,
			args = new Array( arguments.length ),
			handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;

		for ( i = 1; i < arguments.length; i++ ) {
			args[ i ] = arguments[ i ];
		}

		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or 2) have namespace(s)
				// a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, handleObj, sel, matchedHandlers, matchedSelectors,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		if ( delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!( event.type === "click" && event.button >= 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
					matchedHandlers = [];
					matchedSelectors = {};
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matchedSelectors[ sel ] === undefined ) {
							matchedSelectors[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matchedSelectors[ sel ] ) {
							matchedHandlers.push( handleObj );
						}
					}
					if ( matchedHandlers.length ) {
						handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		cur = this;
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	addProp: function( name, hook ) {
		Object.defineProperty( jQuery.Event.prototype, name, {
			enumerable: true,
			configurable: true,

			get: jQuery.isFunction( hook ) ?
				function() {
					if ( this.originalEvent ) {
							return hook( this.originalEvent );
					}
				} :
				function() {
					if ( this.originalEvent ) {
							return this.originalEvent[ name ];
					}
				},

			set: function( value ) {
				Object.defineProperty( this, name, {
					enumerable: true,
					configurable: true,
					writable: true,
					value: value
				} );
			}
		} );
	},

	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {

			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					this.focus();
					return false;
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {

			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( this.type === "checkbox" && this.click && nodeName( this, "input" ) ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (#504, #13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,

	which: function( event ) {
		var button = event.button;

		// Add which for key events
		if ( event.which == null && rkeyEvent.test( event.type ) ) {
			return event.charCode != null ? event.charCode : event.keyCode;
		}

		// Add which for click: 1 === left; 2 === middle; 3 === right
		if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
			if ( button & 1 ) {
				return 1;
			}

			if ( button & 2 ) {
				return 3;
			}

			if ( button & 4 ) {
				return 2;
			}

			return 0;
		}

		return event.which;
	}
}, jQuery.event.addProp );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var

	/* eslint-disable max-len */

	// See https://github.com/eslint/eslint/issues/3229
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,

	/* eslint-enable */

	// Support: IE <=10 - 11, Edge 12 - 13
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

// Prefer a tbody over its parent table for containing new rows
function manipulationTarget( elem, content ) {
	if ( nodeName( elem, "table" ) &&
		nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return jQuery( ">tbody", elem )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );

	if ( match ) {
		elem.type = match[ 1 ];
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.access( src );
		pdataCur = dataPriv.set( dest, pdataOld );
		events = pdataOld.events;

		if ( events ) {
			delete pdataCur.handle;
			pdataCur.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = concat.apply( [], args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		isFunction = jQuery.isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( isFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( isFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl ) {
								jQuery._evalUrl( node.src );
							}
						} else {
							DOMEval( node.textContent.replace( rcleanScript, "" ), doc );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html.replace( rxhtmlTag, "<$1></$2>" );
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = jQuery.contains( elem.ownerDocument, elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );
var rmargin = ( /^margin/ );

var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};



( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		div.style.cssText =
			"box-sizing:border-box;" +
			"position:relative;display:block;" +
			"margin:auto;border:1px;padding:1px;" +
			"top:1%;width:50%";
		div.innerHTML = "";
		documentElement.appendChild( container );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = divStyle.marginLeft === "2px";
		boxSizingReliableVal = divStyle.width === "4px";

		// Support: Android 4.0 - 4.3 only
		// Some styles come back with percentage values, even though they shouldn't
		div.style.marginRight = "50%";
		pixelMarginRightVal = divStyle.marginRight === "4px";

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	var pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
		"padding:0;margin-top:1px;position:absolute";
	container.appendChild( div );

	jQuery.extend( support, {
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelMarginRight: function() {
			computeStyleTests();
			return pixelMarginRightVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,

		// Support: Firefox 51+
		// Retrieving style before computed somehow
		// fixes an issue with getting wrong values
		// on detached elements
		style = elem.style;

	computed = computed || getStyles( elem );

	// getPropertyValue is needed for:
	//   .css('filter') (IE 9 only, #12537)
	//   .css('--customProperty) (#3144)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];

		if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rcustomProp = /^--/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style;

// Return a css property mapped to a potentially vendor prefixed property
function vendorPropName( name ) {

	// Shortcut for names that are not vendor prefixed
	if ( name in emptyStyle ) {
		return name;
	}

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

// Return a property mapped along what jQuery.cssProps suggests or to
// a vendor prefixed property.
function finalPropName( name ) {
	var ret = jQuery.cssProps[ name ];
	if ( !ret ) {
		ret = jQuery.cssProps[ name ] = vendorPropName( name ) || name;
	}
	return ret;
}

function setPositiveNumber( elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i,
		val = 0;

	// If we already have the right measurement, avoid augmentation
	if ( extra === ( isBorderBox ? "border" : "content" ) ) {
		i = 4;

	// Otherwise initialize for horizontal or vertical properties
	} else {
		i = name === "width" ? 1 : 0;
	}

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {

			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// At this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {

			// At this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// At this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with computed style
	var valueIsBorderBox,
		styles = getStyles( elem ),
		val = curCSS( elem, name, styles ),
		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// Computed unit is not pixels. Stop here and return.
	if ( rnumnonpx.test( val ) ) {
		return val;
	}

	// Check for style in case a browser which returns unreliable values
	// for getComputedStyle silently falls back to the reliable elem.style
	valueIsBorderBox = isBorderBox &&
		( support.boxSizingReliable() || val === elem.style[ name ] );

	// Fall back to offsetWidth/Height when value is "auto"
	// This happens for inline elements with no explicit setting (gh-3571)
	if ( val === "auto" ) {
		val = elem[ "offset" + name[ 0 ].toUpperCase() + name.slice( 1 ) ];
	}

	// Normalize "", auto, and prepare for extra
	val = parseFloat( val ) || 0;

	// Use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		"float": "cssFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			isCustomProp = rcustomProp.test( name ),
			style = elem.style;

		// Make sure that we're working with the right name. We don't
		// want to query the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			if ( type === "number" ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				if ( isCustomProp ) {
					style.setProperty( name, value );
				} else {
					style[ name ] = value;
				}
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = jQuery.camelCase( name ),
			isCustomProp = rcustomProp.test( name );

		// Make sure that we're working with the right name. We don't
		// want to modify the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}

		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
						swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, name, extra );
						} ) :
						getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = extra && getStyles( elem ),
				subtract = extra && augmentWidthOrHeight(
					elem,
					name,
					extra,
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				);

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ name ] = value;
				value = jQuery.css( elem, name );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
				) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( Array.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 &&
				( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
					jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, inProgress,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

function schedule() {
	if ( inProgress ) {
		if ( document.hidden === false && window.requestAnimationFrame ) {
			window.requestAnimationFrame( schedule );
		} else {
			window.setTimeout( schedule, jQuery.fx.interval );
		}

		jQuery.fx.tick();
	}
}

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = jQuery.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "width" in props || "height" in props,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHiddenWithinTree( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Queue-skipping animations hijack the fx hooks
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Detect show/hide animations
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.test( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// Pretend to be hidden if this is a "show" and
				// there is still data from a stopped show/hide
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;

				// Ignore all other no-op show/hide data
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	// Bail out if this is a no-op like .hide().hide()
	propTween = !jQuery.isEmptyObject( props );
	if ( !propTween && jQuery.isEmptyObject( orig ) ) {
		return;
	}

	// Restrict "overflow" and "display" styles during box animations
	if ( isBox && elem.nodeType === 1 ) {

		// Support: IE <=9 - 11, Edge 12 - 13
		// Record all 3 overflow attributes because IE does not infer the shorthand
		// from identically-valued overflowX and overflowY
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Identify a display type, preferring old show/hide data over the CSS cascade
		restoreDisplay = dataShow && dataShow.display;
		if ( restoreDisplay == null ) {
			restoreDisplay = dataPriv.get( elem, "display" );
		}
		display = jQuery.css( elem, "display" );
		if ( display === "none" ) {
			if ( restoreDisplay ) {
				display = restoreDisplay;
			} else {

				// Get nonempty value(s) by temporarily forcing visibility
				showHide( [ elem ], true );
				restoreDisplay = elem.style.display || restoreDisplay;
				display = jQuery.css( elem, "display" );
				showHide( [ elem ] );
			}
		}

		// Animate inline elements as inline-block
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			if ( jQuery.css( elem, "float" ) === "none" ) {

				// Restore the original display value at the end of pure show/hide animations
				if ( !propTween ) {
					anim.done( function() {
						style.display = restoreDisplay;
					} );
					if ( restoreDisplay == null ) {
						display = style.display;
						restoreDisplay = display === "none" ? "" : display;
					}
				}
				style.display = "inline-block";
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implement show/hide animations
	propTween = false;
	for ( prop in orig ) {

		// General show/hide setup for this element animation
		if ( !propTween ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
			}

			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}

			// Show elements before animating them
			if ( hidden ) {
				showHide( [ elem ], true );
			}

			/* eslint-disable no-loop-func */

			anim.done( function() {

			/* eslint-enable no-loop-func */

				// The final step of a "hide" animation is actually hiding the element
				if ( !hidden ) {
					showHide( [ elem ] );
				}
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Per-property setup
		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
		if ( !( prop in dataShow ) ) {
			dataShow[ prop ] = propTween.start;
			if ( hidden ) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( Array.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			// If there's more to do, yield
			if ( percent < 1 && length ) {
				return remaining;
			}

			// If this was an empty animation, synthesize a final progress notification
			if ( !length ) {
				deferred.notifyWith( elem, [ animation, 1, 0 ] );
			}

			// Resolve the animation and report its conclusion
			deferred.resolveWith( elem, [ animation ] );
			return false;
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( jQuery.isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					jQuery.proxy( result.stop, result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	// Attach callbacks from options
	animation
		.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	return animation;
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnothtmlwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	// Go to the end state if fx are off
	if ( jQuery.fx.off ) {
		opt.duration = 0;

	} else {
		if ( typeof opt.duration !== "number" ) {
			if ( opt.duration in jQuery.fx.speeds ) {
				opt.duration = jQuery.fx.speeds[ opt.duration ];

			} else {
				opt.duration = jQuery.fx.speeds._default;
			}
		}
	}

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Run the timer and safely remove it when done (allowing for external removal)
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	jQuery.fx.start();
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( inProgress ) {
		return;
	}

	inProgress = true;
	schedule();
};

jQuery.fx.stop = function() {
	inProgress = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: Android <=4.3 only
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE <=11 only
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: IE <=11 only
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,

			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match( rnothtmlwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// Support: IE <=9 - 11 only
				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				if ( tabindex ) {
					return parseInt( tabindex, 10 );
				}

				if (
					rfocusable.test( elem.nodeName ) ||
					rclickable.test( elem.nodeName ) &&
					elem.href
				) {
					return 0;
				}

				return -1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




	// Strip and collapse whitespace according to HTML spec
	// https://html.spec.whatwg.org/multipage/infrastructure.html#strip-and-collapse-whitespace
	function stripAndCollapse( value ) {
		var tokens = value.match( rnothtmlwhite ) || [];
		return tokens.join( " " );
	}


function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( typeof value === "string" && value ) {
			classes = value.match( rnothtmlwhite ) || [];

			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		if ( typeof value === "string" && value ) {
			classes = value.match( rnothtmlwhite ) || [];

			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value;

		if ( typeof stateVal === "boolean" && type === "string" ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( type === "string" ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = value.match( rnothtmlwhite ) || [];

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
						"" :
						dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
					return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				// Handle most common string cases
				if ( typeof ret === "string" ) {
					return ret.replace( rreturn, "" );
				}

				// Handle cases where value is null/undef or number
				return ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( Array.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option, i,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length;

				if ( index < 0 ) {
					i = max;

				} else {
					i = one ? index : 0;
				}

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					/* eslint-disable no-cond-assign */

					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}

					/* eslint-enable no-cond-assign */
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( Array.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					elem[ type ]();
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
} );

jQuery.fn.extend( {
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );




support.focusin = "onfocusin" in window;


// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					dataPriv.remove( doc, fix );

				} else {
					dataPriv.access( doc, fix, attaches );
				}
			}
		};
	} );
}
var location = window.location;

var nonce = jQuery.now();

var rquery = ( /\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( Array.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = jQuery.isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	// If an array was passed in, assume that it is an array of form elements.
	if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} )
		.filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} )
		.map( function( i, elem ) {
			var val = jQuery( this ).val();

			if ( val == null ) {
				return null;
			}

			if ( Array.isArray( val ) ) {
				return jQuery.map( val, function( val ) {
					return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
				} );
			}

			return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


var
	r20 = /%20/g,
	rhash = /#.*$/,
	rantiCache = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );
	originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

		if ( jQuery.isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",

		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 13
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add or update anti-cache param if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rantiCache, "$1" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce++ ) + uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );


jQuery._evalUrl = function( url ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,
		"throws": true
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( jQuery.isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" ).prop( {
					charset: s.scriptCharset,
					src: s.url
				} ).on(
					"load error",
					callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					}
				);

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = stripAndCollapse( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var doc, docElem, rect, win,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		rect = elem.getBoundingClientRect();

		doc = elem.ownerDocument;
		docElem = doc.documentElement;
		win = doc.defaultView;

		return {
			top: rect.top + win.pageYOffset - docElem.clientTop,
			left: rect.left + win.pageXOffset - docElem.clientLeft
		};
	},

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
		// because it is its only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume getBoundingClientRect is there when computed position is fixed
			offset = elem.getBoundingClientRect();

		} else {

			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset = {
				top: parentOffset.top + jQuery.css( offsetParent[ 0 ], "borderTopWidth", true ),
				left: parentOffset.left + jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true )
			};
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {

			// Coalesce documents and windows
			var win;
			if ( jQuery.isWindow( elem ) ) {
				win = elem;
			} else if ( elem.nodeType === 9 ) {
				win = elem.defaultView;
			}

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
		function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	}
} );

jQuery.holdReady = function( hold ) {
	if ( hold ) {
		jQuery.readyWait++;
	} else {
		jQuery.ready( true );
	}
};
jQuery.isArray = Array.isArray;
jQuery.parseJSON = JSON.parse;
jQuery.nodeName = nodeName;




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	} );
}




var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( !noGlobal ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;
} );

},{}],21:[function(require,module,exports){
"use strict";

var urlParts = /^(https?:\/\/)?([^/]*@)?(.+?)(:\d{2,5})?([/?].*)?$/; // 1 = protocol, 2 = auth, 3 = domain, 4 = port, 5 = path
var knownTlds = require("./tld.js");
var dot = /\./g;

/**
 * Removes all unnecessary parts of the domain (e.g. protocol, auth, port, path, query)
 * and parses the remaining domain. The returned object contains the properties 'subdomain', 'domain' and 'tld'.
 *
 * Since the top-level domain is handled differently by every country, this function only
 * supports all tlds listed in lib/build/tld.txt.
 *
 * If the given url is not valid or isn't supported by the tld.txt, this function returns null.
 *
 * @param {string} url
 * @param {Object} [options]
 * @param {Array<string>|RegExp} [options.customTlds]
 * @param {boolean} [options.privateTlds]
 * @returns {Object|null}
 */
function parseDomain(url, options) {
    var urlSplit;
    var tld = null;
    var domain;
    var subdomain;

    if (!url || typeof url !== "string") {
        return null;
    }

    if (!options || typeof options !== "object") {
        options = Object.create(null);
    }
    if ("privateTlds" in options === false) {
        options.privateTlds = false;
    }

    // urlSplit can't be null because urlParts will always match at the third capture
    urlSplit = url.toLowerCase().match(urlParts);
    domain = urlSplit[3]; // domain will now be something like sub.domain.example.com

    // for potentially unrecognized tlds, try matching against custom tlds
    if (options.customTlds) {
        if (options.customTlds instanceof RegExp === false) {
            // build regexp from options.customTlds
            options.customTlds = new RegExp("\\.(" + options.customTlds.join("|") + ")$");
        }
        // try matching against a built regexp of custom tlds
        tld = domain.match(options.customTlds);
    }

    // If no custom tlds, check if tld is supported
    if (tld === null) {
        tld = domain.match(options.privateTlds ? knownTlds : knownTlds.icann);
    }

    if (tld === null) {
        return null;
    }

    tld = tld[0];

    // remove tld and split by dot
    urlSplit = domain.slice(0, -tld.length).split(dot);

    if (tld.charAt(0) === ".") {
        // removes the remaining dot, if present (added to handle localhost)
        tld = tld.slice(1);
    }
    domain = urlSplit.pop();
    subdomain = urlSplit.join(".");

    return {
        tld: tld,
        domain: domain,
        subdomain: subdomain
    };
}

module.exports = parseDomain;

},{"./tld.js":22}],22:[function(require,module,exports){
exports = module.exports = /\.(ac|com\.ac|edu\.ac|gov\.ac|net\.ac|mil\.ac|org\.ac|ad|nom\.ad|ae|co\.ae|net\.ae|org\.ae|sch\.ae|ac\.ae|gov\.ae|mil\.ae|aero|accident-investigation\.aero|accident-prevention\.aero|aerobatic\.aero|aeroclub\.aero|aerodrome\.aero|agents\.aero|aircraft\.aero|airline\.aero|airport\.aero|air-surveillance\.aero|airtraffic\.aero|air-traffic-control\.aero|ambulance\.aero|amusement\.aero|association\.aero|author\.aero|ballooning\.aero|broker\.aero|caa\.aero|cargo\.aero|catering\.aero|certification\.aero|championship\.aero|charter\.aero|civilaviation\.aero|club\.aero|conference\.aero|consultant\.aero|consulting\.aero|control\.aero|council\.aero|crew\.aero|design\.aero|dgca\.aero|educator\.aero|emergency\.aero|engine\.aero|engineer\.aero|entertainment\.aero|equipment\.aero|exchange\.aero|express\.aero|federation\.aero|flight\.aero|freight\.aero|fuel\.aero|gliding\.aero|government\.aero|groundhandling\.aero|group\.aero|hanggliding\.aero|homebuilt\.aero|insurance\.aero|journal\.aero|journalist\.aero|leasing\.aero|logistics\.aero|magazine\.aero|maintenance\.aero|media\.aero|microlight\.aero|modelling\.aero|navigation\.aero|parachuting\.aero|paragliding\.aero|passenger-association\.aero|pilot\.aero|press\.aero|production\.aero|recreation\.aero|repbody\.aero|res\.aero|research\.aero|rotorcraft\.aero|safety\.aero|scientist\.aero|services\.aero|show\.aero|skydiving\.aero|software\.aero|student\.aero|trader\.aero|trading\.aero|trainer\.aero|union\.aero|workinggroup\.aero|works\.aero|af|gov\.af|com\.af|org\.af|net\.af|edu\.af|ag|com\.ag|org\.ag|net\.ag|co\.ag|nom\.ag|ai|off\.ai|com\.ai|net\.ai|org\.ai|al|com\.al|edu\.al|gov\.al|mil\.al|net\.al|org\.al|am|ao|ed\.ao|gv\.ao|og\.ao|co\.ao|pb\.ao|it\.ao|aq|ar|com\.ar|edu\.ar|gob\.ar|gov\.ar|int\.ar|mil\.ar|net\.ar|org\.ar|tur\.ar|arpa|e164\.arpa|in-addr\.arpa|ip6\.arpa|iris\.arpa|uri\.arpa|urn\.arpa|as|gov\.as|asia|at|ac\.at|co\.at|gv\.at|or\.at|au|com\.au|net\.au|org\.au|edu\.au|gov\.au|asn\.au|id\.au|info\.au|conf\.au|oz\.au|act\.au|nsw\.au|nt\.au|qld\.au|sa\.au|tas\.au|vic\.au|wa\.au|act\.edu\.au|nsw\.edu\.au|nt\.edu\.au|qld\.edu\.au|sa\.edu\.au|tas\.edu\.au|vic\.edu\.au|wa\.edu\.au|qld\.gov\.au|sa\.gov\.au|tas\.gov\.au|vic\.gov\.au|wa\.gov\.au|aw|com\.aw|ax|az|com\.az|net\.az|int\.az|gov\.az|org\.az|edu\.az|info\.az|pp\.az|mil\.az|name\.az|pro\.az|biz\.az|ba|com\.ba|edu\.ba|gov\.ba|mil\.ba|net\.ba|org\.ba|bb|biz\.bb|co\.bb|com\.bb|edu\.bb|gov\.bb|info\.bb|net\.bb|org\.bb|store\.bb|tv\.bb|[^.]+\.bd|be|ac\.be|bf|gov\.bf|bg|a\.bg|b\.bg|c\.bg|d\.bg|e\.bg|f\.bg|g\.bg|h\.bg|i\.bg|j\.bg|k\.bg|l\.bg|m\.bg|n\.bg|o\.bg|p\.bg|q\.bg|r\.bg|s\.bg|t\.bg|u\.bg|v\.bg|w\.bg|x\.bg|y\.bg|z\.bg|0\.bg|1\.bg|2\.bg|3\.bg|4\.bg|5\.bg|6\.bg|7\.bg|8\.bg|9\.bg|bh|com\.bh|edu\.bh|net\.bh|org\.bh|gov\.bh|bi|co\.bi|com\.bi|edu\.bi|or\.bi|org\.bi|biz|bj|asso\.bj|barreau\.bj|gouv\.bj|bm|com\.bm|edu\.bm|gov\.bm|net\.bm|org\.bm|[^.]+\.bn|bo|com\.bo|edu\.bo|gov\.bo|gob\.bo|int\.bo|org\.bo|net\.bo|mil\.bo|tv\.bo|br|adm\.br|adv\.br|agr\.br|am\.br|arq\.br|art\.br|ato\.br|b\.br|bio\.br|blog\.br|bmd\.br|cim\.br|cng\.br|cnt\.br|com\.br|coop\.br|ecn\.br|eco\.br|edu\.br|emp\.br|eng\.br|esp\.br|etc\.br|eti\.br|far\.br|flog\.br|fm\.br|fnd\.br|fot\.br|fst\.br|g12\.br|ggf\.br|gov\.br|imb\.br|ind\.br|inf\.br|jor\.br|jus\.br|leg\.br|lel\.br|mat\.br|med\.br|mil\.br|mp\.br|mus\.br|net\.br|[^.]+\.nom\.br|not\.br|ntr\.br|odo\.br|org\.br|ppg\.br|pro\.br|psc\.br|psi\.br|qsl\.br|radio\.br|rec\.br|slg\.br|srv\.br|taxi\.br|teo\.br|tmp\.br|trd\.br|tur\.br|tv\.br|vet\.br|vlog\.br|wiki\.br|zlg\.br|bs|com\.bs|net\.bs|org\.bs|edu\.bs|gov\.bs|bt|com\.bt|edu\.bt|gov\.bt|net\.bt|org\.bt|bv|bw|co\.bw|org\.bw|by|gov\.by|mil\.by|com\.by|of\.by|bz|com\.bz|net\.bz|org\.bz|edu\.bz|gov\.bz|ca|ab\.ca|bc\.ca|mb\.ca|nb\.ca|nf\.ca|nl\.ca|ns\.ca|nt\.ca|nu\.ca|on\.ca|pe\.ca|qc\.ca|sk\.ca|yk\.ca|gc\.ca|cat|cc|cd|gov\.cd|cf|cg|ch|ci|org\.ci|or\.ci|com\.ci|co\.ci|edu\.ci|ed\.ci|ac\.ci|net\.ci|go\.ci|asso\.ci|aéroport\.ci|int\.ci|presse\.ci|md\.ci|gouv\.ci|[^.]+\.ck|!www\.ck|cl|gov\.cl|gob\.cl|co\.cl|mil\.cl|cm|co\.cm|com\.cm|gov\.cm|net\.cm|cn|ac\.cn|com\.cn|edu\.cn|gov\.cn|net\.cn|org\.cn|mil\.cn|公司\.cn|网络\.cn|網絡\.cn|ah\.cn|bj\.cn|cq\.cn|fj\.cn|gd\.cn|gs\.cn|gz\.cn|gx\.cn|ha\.cn|hb\.cn|he\.cn|hi\.cn|hl\.cn|hn\.cn|jl\.cn|js\.cn|jx\.cn|ln\.cn|nm\.cn|nx\.cn|qh\.cn|sc\.cn|sd\.cn|sh\.cn|sn\.cn|sx\.cn|tj\.cn|xj\.cn|xz\.cn|yn\.cn|zj\.cn|hk\.cn|mo\.cn|tw\.cn|co|arts\.co|com\.co|edu\.co|firm\.co|gov\.co|info\.co|int\.co|mil\.co|net\.co|nom\.co|org\.co|rec\.co|web\.co|com|coop|cr|ac\.cr|co\.cr|ed\.cr|fi\.cr|go\.cr|or\.cr|sa\.cr|cu|com\.cu|edu\.cu|org\.cu|net\.cu|gov\.cu|inf\.cu|cv|cw|com\.cw|edu\.cw|net\.cw|org\.cw|cx|gov\.cx|cy|ac\.cy|biz\.cy|com\.cy|ekloges\.cy|gov\.cy|ltd\.cy|name\.cy|net\.cy|org\.cy|parliament\.cy|press\.cy|pro\.cy|tm\.cy|cz|de|dj|dk|dm|com\.dm|net\.dm|org\.dm|edu\.dm|gov\.dm|do|art\.do|com\.do|edu\.do|gob\.do|gov\.do|mil\.do|net\.do|org\.do|sld\.do|web\.do|dz|com\.dz|org\.dz|net\.dz|gov\.dz|edu\.dz|asso\.dz|pol\.dz|art\.dz|ec|com\.ec|info\.ec|net\.ec|fin\.ec|k12\.ec|med\.ec|pro\.ec|org\.ec|edu\.ec|gov\.ec|gob\.ec|mil\.ec|edu|ee|edu\.ee|gov\.ee|riik\.ee|lib\.ee|med\.ee|com\.ee|pri\.ee|aip\.ee|org\.ee|fie\.ee|eg|com\.eg|edu\.eg|eun\.eg|gov\.eg|mil\.eg|name\.eg|net\.eg|org\.eg|sci\.eg|[^.]+\.er|es|com\.es|nom\.es|org\.es|gob\.es|edu\.es|et|com\.et|gov\.et|org\.et|edu\.et|biz\.et|name\.et|info\.et|net\.et|eu|fi|aland\.fi|[^.]+\.fj|[^.]+\.fk|fm|fo|fr|com\.fr|asso\.fr|nom\.fr|prd\.fr|presse\.fr|tm\.fr|aeroport\.fr|assedic\.fr|avocat\.fr|avoues\.fr|cci\.fr|chambagri\.fr|chirurgiens-dentistes\.fr|experts-comptables\.fr|geometre-expert\.fr|gouv\.fr|greta\.fr|huissier-justice\.fr|medecin\.fr|notaires\.fr|pharmacien\.fr|port\.fr|veterinaire\.fr|ga|gb|gd|ge|com\.ge|edu\.ge|gov\.ge|org\.ge|mil\.ge|net\.ge|pvt\.ge|gf|gg|co\.gg|net\.gg|org\.gg|gh|com\.gh|edu\.gh|gov\.gh|org\.gh|mil\.gh|gi|com\.gi|ltd\.gi|gov\.gi|mod\.gi|edu\.gi|org\.gi|gl|co\.gl|com\.gl|edu\.gl|net\.gl|org\.gl|gm|gn|ac\.gn|com\.gn|edu\.gn|gov\.gn|org\.gn|net\.gn|gov|gp|com\.gp|net\.gp|mobi\.gp|edu\.gp|org\.gp|asso\.gp|gq|gr|com\.gr|edu\.gr|net\.gr|org\.gr|gov\.gr|gs|gt|com\.gt|edu\.gt|gob\.gt|ind\.gt|mil\.gt|net\.gt|org\.gt|[^.]+\.gu|gw|gy|co\.gy|com\.gy|edu\.gy|gov\.gy|net\.gy|org\.gy|hk|com\.hk|edu\.hk|gov\.hk|idv\.hk|net\.hk|org\.hk|公司\.hk|教育\.hk|敎育\.hk|政府\.hk|個人\.hk|个人\.hk|箇人\.hk|網络\.hk|网络\.hk|组織\.hk|網絡\.hk|网絡\.hk|组织\.hk|組織\.hk|組织\.hk|hm|hn|com\.hn|edu\.hn|org\.hn|net\.hn|mil\.hn|gob\.hn|hr|iz\.hr|from\.hr|name\.hr|com\.hr|ht|com\.ht|shop\.ht|firm\.ht|info\.ht|adult\.ht|net\.ht|pro\.ht|org\.ht|med\.ht|art\.ht|coop\.ht|pol\.ht|asso\.ht|edu\.ht|rel\.ht|gouv\.ht|perso\.ht|hu|co\.hu|info\.hu|org\.hu|priv\.hu|sport\.hu|tm\.hu|2000\.hu|agrar\.hu|bolt\.hu|casino\.hu|city\.hu|erotica\.hu|erotika\.hu|film\.hu|forum\.hu|games\.hu|hotel\.hu|ingatlan\.hu|jogasz\.hu|konyvelo\.hu|lakas\.hu|media\.hu|news\.hu|reklam\.hu|sex\.hu|shop\.hu|suli\.hu|szex\.hu|tozsde\.hu|utazas\.hu|video\.hu|id|ac\.id|biz\.id|co\.id|desa\.id|go\.id|mil\.id|my\.id|net\.id|or\.id|sch\.id|web\.id|ie|gov\.ie|il|ac\.il|co\.il|gov\.il|idf\.il|k12\.il|muni\.il|net\.il|org\.il|im|ac\.im|co\.im|com\.im|ltd\.co\.im|net\.im|org\.im|plc\.co\.im|tt\.im|tv\.im|in|co\.in|firm\.in|net\.in|org\.in|gen\.in|ind\.in|nic\.in|ac\.in|edu\.in|res\.in|gov\.in|mil\.in|info|int|eu\.int|io|com\.io|iq|gov\.iq|edu\.iq|mil\.iq|com\.iq|org\.iq|net\.iq|ir|ac\.ir|co\.ir|gov\.ir|id\.ir|net\.ir|org\.ir|sch\.ir|ایران\.ir|ايران\.ir|is|net\.is|com\.is|edu\.is|gov\.is|org\.is|int\.is|it|gov\.it|edu\.it|abr\.it|abruzzo\.it|aosta-valley\.it|aostavalley\.it|bas\.it|basilicata\.it|cal\.it|calabria\.it|cam\.it|campania\.it|emilia-romagna\.it|emiliaromagna\.it|emr\.it|friuli-v-giulia\.it|friuli-ve-giulia\.it|friuli-vegiulia\.it|friuli-venezia-giulia\.it|friuli-veneziagiulia\.it|friuli-vgiulia\.it|friuliv-giulia\.it|friulive-giulia\.it|friulivegiulia\.it|friulivenezia-giulia\.it|friuliveneziagiulia\.it|friulivgiulia\.it|fvg\.it|laz\.it|lazio\.it|lig\.it|liguria\.it|lom\.it|lombardia\.it|lombardy\.it|lucania\.it|mar\.it|marche\.it|mol\.it|molise\.it|piedmont\.it|piemonte\.it|pmn\.it|pug\.it|puglia\.it|sar\.it|sardegna\.it|sardinia\.it|sic\.it|sicilia\.it|sicily\.it|taa\.it|tos\.it|toscana\.it|trentino-a-adige\.it|trentino-aadige\.it|trentino-alto-adige\.it|trentino-altoadige\.it|trentino-s-tirol\.it|trentino-stirol\.it|trentino-sud-tirol\.it|trentino-sudtirol\.it|trentino-sued-tirol\.it|trentino-suedtirol\.it|trentinoa-adige\.it|trentinoaadige\.it|trentinoalto-adige\.it|trentinoaltoadige\.it|trentinos-tirol\.it|trentinostirol\.it|trentinosud-tirol\.it|trentinosudtirol\.it|trentinosued-tirol\.it|trentinosuedtirol\.it|tuscany\.it|umb\.it|umbria\.it|val-d-aosta\.it|val-daosta\.it|vald-aosta\.it|valdaosta\.it|valle-aosta\.it|valle-d-aosta\.it|valle-daosta\.it|valleaosta\.it|valled-aosta\.it|valledaosta\.it|vallee-aoste\.it|valleeaoste\.it|vao\.it|vda\.it|ven\.it|veneto\.it|ag\.it|agrigento\.it|al\.it|alessandria\.it|alto-adige\.it|altoadige\.it|an\.it|ancona\.it|andria-barletta-trani\.it|andria-trani-barletta\.it|andriabarlettatrani\.it|andriatranibarletta\.it|ao\.it|aosta\.it|aoste\.it|ap\.it|aq\.it|aquila\.it|ar\.it|arezzo\.it|ascoli-piceno\.it|ascolipiceno\.it|asti\.it|at\.it|av\.it|avellino\.it|ba\.it|balsan\.it|bari\.it|barletta-trani-andria\.it|barlettatraniandria\.it|belluno\.it|benevento\.it|bergamo\.it|bg\.it|bi\.it|biella\.it|bl\.it|bn\.it|bo\.it|bologna\.it|bolzano\.it|bozen\.it|br\.it|brescia\.it|brindisi\.it|bs\.it|bt\.it|bz\.it|ca\.it|cagliari\.it|caltanissetta\.it|campidano-medio\.it|campidanomedio\.it|campobasso\.it|carbonia-iglesias\.it|carboniaiglesias\.it|carrara-massa\.it|carraramassa\.it|caserta\.it|catania\.it|catanzaro\.it|cb\.it|ce\.it|cesena-forli\.it|cesenaforli\.it|ch\.it|chieti\.it|ci\.it|cl\.it|cn\.it|co\.it|como\.it|cosenza\.it|cr\.it|cremona\.it|crotone\.it|cs\.it|ct\.it|cuneo\.it|cz\.it|dell-ogliastra\.it|dellogliastra\.it|en\.it|enna\.it|fc\.it|fe\.it|fermo\.it|ferrara\.it|fg\.it|fi\.it|firenze\.it|florence\.it|fm\.it|foggia\.it|forli-cesena\.it|forlicesena\.it|fr\.it|frosinone\.it|ge\.it|genoa\.it|genova\.it|go\.it|gorizia\.it|gr\.it|grosseto\.it|iglesias-carbonia\.it|iglesiascarbonia\.it|im\.it|imperia\.it|is\.it|isernia\.it|kr\.it|la-spezia\.it|laquila\.it|laspezia\.it|latina\.it|lc\.it|le\.it|lecce\.it|lecco\.it|li\.it|livorno\.it|lo\.it|lodi\.it|lt\.it|lu\.it|lucca\.it|macerata\.it|mantova\.it|massa-carrara\.it|massacarrara\.it|matera\.it|mb\.it|mc\.it|me\.it|medio-campidano\.it|mediocampidano\.it|messina\.it|mi\.it|milan\.it|milano\.it|mn\.it|mo\.it|modena\.it|monza-brianza\.it|monza-e-della-brianza\.it|monza\.it|monzabrianza\.it|monzaebrianza\.it|monzaedellabrianza\.it|ms\.it|mt\.it|na\.it|naples\.it|napoli\.it|no\.it|novara\.it|nu\.it|nuoro\.it|og\.it|ogliastra\.it|olbia-tempio\.it|olbiatempio\.it|or\.it|oristano\.it|ot\.it|pa\.it|padova\.it|padua\.it|palermo\.it|parma\.it|pavia\.it|pc\.it|pd\.it|pe\.it|perugia\.it|pesaro-urbino\.it|pesarourbino\.it|pescara\.it|pg\.it|pi\.it|piacenza\.it|pisa\.it|pistoia\.it|pn\.it|po\.it|pordenone\.it|potenza\.it|pr\.it|prato\.it|pt\.it|pu\.it|pv\.it|pz\.it|ra\.it|ragusa\.it|ravenna\.it|rc\.it|re\.it|reggio-calabria\.it|reggio-emilia\.it|reggiocalabria\.it|reggioemilia\.it|rg\.it|ri\.it|rieti\.it|rimini\.it|rm\.it|rn\.it|ro\.it|roma\.it|rome\.it|rovigo\.it|sa\.it|salerno\.it|sassari\.it|savona\.it|si\.it|siena\.it|siracusa\.it|so\.it|sondrio\.it|sp\.it|sr\.it|ss\.it|suedtirol\.it|sv\.it|ta\.it|taranto\.it|te\.it|tempio-olbia\.it|tempioolbia\.it|teramo\.it|terni\.it|tn\.it|to\.it|torino\.it|tp\.it|tr\.it|trani-andria-barletta\.it|trani-barletta-andria\.it|traniandriabarletta\.it|tranibarlettaandria\.it|trapani\.it|trentino\.it|trento\.it|treviso\.it|trieste\.it|ts\.it|turin\.it|tv\.it|ud\.it|udine\.it|urbino-pesaro\.it|urbinopesaro\.it|va\.it|varese\.it|vb\.it|vc\.it|ve\.it|venezia\.it|venice\.it|verbania\.it|vercelli\.it|verona\.it|vi\.it|vibo-valentia\.it|vibovalentia\.it|vicenza\.it|viterbo\.it|vr\.it|vs\.it|vt\.it|vv\.it|je|co\.je|net\.je|org\.je|[^.]+\.jm|jo|com\.jo|org\.jo|net\.jo|edu\.jo|sch\.jo|gov\.jo|mil\.jo|name\.jo|jobs|jp|ac\.jp|ad\.jp|co\.jp|ed\.jp|go\.jp|gr\.jp|lg\.jp|ne\.jp|or\.jp|aichi\.jp|akita\.jp|aomori\.jp|chiba\.jp|ehime\.jp|fukui\.jp|fukuoka\.jp|fukushima\.jp|gifu\.jp|gunma\.jp|hiroshima\.jp|hokkaido\.jp|hyogo\.jp|ibaraki\.jp|ishikawa\.jp|iwate\.jp|kagawa\.jp|kagoshima\.jp|kanagawa\.jp|kochi\.jp|kumamoto\.jp|kyoto\.jp|mie\.jp|miyagi\.jp|miyazaki\.jp|nagano\.jp|nagasaki\.jp|nara\.jp|niigata\.jp|oita\.jp|okayama\.jp|okinawa\.jp|osaka\.jp|saga\.jp|saitama\.jp|shiga\.jp|shimane\.jp|shizuoka\.jp|tochigi\.jp|tokushima\.jp|tokyo\.jp|tottori\.jp|toyama\.jp|wakayama\.jp|yamagata\.jp|yamaguchi\.jp|yamanashi\.jp|栃木\.jp|愛知\.jp|愛媛\.jp|兵庫\.jp|熊本\.jp|茨城\.jp|北海道\.jp|千葉\.jp|和歌山\.jp|長崎\.jp|長野\.jp|新潟\.jp|青森\.jp|静岡\.jp|東京\.jp|石川\.jp|埼玉\.jp|三重\.jp|京都\.jp|佐賀\.jp|大分\.jp|大阪\.jp|奈良\.jp|宮城\.jp|宮崎\.jp|富山\.jp|山口\.jp|山形\.jp|山梨\.jp|岩手\.jp|岐阜\.jp|岡山\.jp|島根\.jp|広島\.jp|徳島\.jp|沖縄\.jp|滋賀\.jp|神奈川\.jp|福井\.jp|福岡\.jp|福島\.jp|秋田\.jp|群馬\.jp|香川\.jp|高知\.jp|鳥取\.jp|鹿児島\.jp|[^.]+\.kawasaki\.jp|[^.]+\.kitakyushu\.jp|[^.]+\.kobe\.jp|[^.]+\.nagoya\.jp|[^.]+\.sapporo\.jp|[^.]+\.sendai\.jp|[^.]+\.yokohama\.jp|!city\.kawasaki\.jp|!city\.kitakyushu\.jp|!city\.kobe\.jp|!city\.nagoya\.jp|!city\.sapporo\.jp|!city\.sendai\.jp|!city\.yokohama\.jp|aisai\.aichi\.jp|ama\.aichi\.jp|anjo\.aichi\.jp|asuke\.aichi\.jp|chiryu\.aichi\.jp|chita\.aichi\.jp|fuso\.aichi\.jp|gamagori\.aichi\.jp|handa\.aichi\.jp|hazu\.aichi\.jp|hekinan\.aichi\.jp|higashiura\.aichi\.jp|ichinomiya\.aichi\.jp|inazawa\.aichi\.jp|inuyama\.aichi\.jp|isshiki\.aichi\.jp|iwakura\.aichi\.jp|kanie\.aichi\.jp|kariya\.aichi\.jp|kasugai\.aichi\.jp|kira\.aichi\.jp|kiyosu\.aichi\.jp|komaki\.aichi\.jp|konan\.aichi\.jp|kota\.aichi\.jp|mihama\.aichi\.jp|miyoshi\.aichi\.jp|nishio\.aichi\.jp|nisshin\.aichi\.jp|obu\.aichi\.jp|oguchi\.aichi\.jp|oharu\.aichi\.jp|okazaki\.aichi\.jp|owariasahi\.aichi\.jp|seto\.aichi\.jp|shikatsu\.aichi\.jp|shinshiro\.aichi\.jp|shitara\.aichi\.jp|tahara\.aichi\.jp|takahama\.aichi\.jp|tobishima\.aichi\.jp|toei\.aichi\.jp|togo\.aichi\.jp|tokai\.aichi\.jp|tokoname\.aichi\.jp|toyoake\.aichi\.jp|toyohashi\.aichi\.jp|toyokawa\.aichi\.jp|toyone\.aichi\.jp|toyota\.aichi\.jp|tsushima\.aichi\.jp|yatomi\.aichi\.jp|akita\.akita\.jp|daisen\.akita\.jp|fujisato\.akita\.jp|gojome\.akita\.jp|hachirogata\.akita\.jp|happou\.akita\.jp|higashinaruse\.akita\.jp|honjo\.akita\.jp|honjyo\.akita\.jp|ikawa\.akita\.jp|kamikoani\.akita\.jp|kamioka\.akita\.jp|katagami\.akita\.jp|kazuno\.akita\.jp|kitaakita\.akita\.jp|kosaka\.akita\.jp|kyowa\.akita\.jp|misato\.akita\.jp|mitane\.akita\.jp|moriyoshi\.akita\.jp|nikaho\.akita\.jp|noshiro\.akita\.jp|odate\.akita\.jp|oga\.akita\.jp|ogata\.akita\.jp|semboku\.akita\.jp|yokote\.akita\.jp|yurihonjo\.akita\.jp|aomori\.aomori\.jp|gonohe\.aomori\.jp|hachinohe\.aomori\.jp|hashikami\.aomori\.jp|hiranai\.aomori\.jp|hirosaki\.aomori\.jp|itayanagi\.aomori\.jp|kuroishi\.aomori\.jp|misawa\.aomori\.jp|mutsu\.aomori\.jp|nakadomari\.aomori\.jp|noheji\.aomori\.jp|oirase\.aomori\.jp|owani\.aomori\.jp|rokunohe\.aomori\.jp|sannohe\.aomori\.jp|shichinohe\.aomori\.jp|shingo\.aomori\.jp|takko\.aomori\.jp|towada\.aomori\.jp|tsugaru\.aomori\.jp|tsuruta\.aomori\.jp|abiko\.chiba\.jp|asahi\.chiba\.jp|chonan\.chiba\.jp|chosei\.chiba\.jp|choshi\.chiba\.jp|chuo\.chiba\.jp|funabashi\.chiba\.jp|futtsu\.chiba\.jp|hanamigawa\.chiba\.jp|ichihara\.chiba\.jp|ichikawa\.chiba\.jp|ichinomiya\.chiba\.jp|inzai\.chiba\.jp|isumi\.chiba\.jp|kamagaya\.chiba\.jp|kamogawa\.chiba\.jp|kashiwa\.chiba\.jp|katori\.chiba\.jp|katsuura\.chiba\.jp|kimitsu\.chiba\.jp|kisarazu\.chiba\.jp|kozaki\.chiba\.jp|kujukuri\.chiba\.jp|kyonan\.chiba\.jp|matsudo\.chiba\.jp|midori\.chiba\.jp|mihama\.chiba\.jp|minamiboso\.chiba\.jp|mobara\.chiba\.jp|mutsuzawa\.chiba\.jp|nagara\.chiba\.jp|nagareyama\.chiba\.jp|narashino\.chiba\.jp|narita\.chiba\.jp|noda\.chiba\.jp|oamishirasato\.chiba\.jp|omigawa\.chiba\.jp|onjuku\.chiba\.jp|otaki\.chiba\.jp|sakae\.chiba\.jp|sakura\.chiba\.jp|shimofusa\.chiba\.jp|shirako\.chiba\.jp|shiroi\.chiba\.jp|shisui\.chiba\.jp|sodegaura\.chiba\.jp|sosa\.chiba\.jp|tako\.chiba\.jp|tateyama\.chiba\.jp|togane\.chiba\.jp|tohnosho\.chiba\.jp|tomisato\.chiba\.jp|urayasu\.chiba\.jp|yachimata\.chiba\.jp|yachiyo\.chiba\.jp|yokaichiba\.chiba\.jp|yokoshibahikari\.chiba\.jp|yotsukaido\.chiba\.jp|ainan\.ehime\.jp|honai\.ehime\.jp|ikata\.ehime\.jp|imabari\.ehime\.jp|iyo\.ehime\.jp|kamijima\.ehime\.jp|kihoku\.ehime\.jp|kumakogen\.ehime\.jp|masaki\.ehime\.jp|matsuno\.ehime\.jp|matsuyama\.ehime\.jp|namikata\.ehime\.jp|niihama\.ehime\.jp|ozu\.ehime\.jp|saijo\.ehime\.jp|seiyo\.ehime\.jp|shikokuchuo\.ehime\.jp|tobe\.ehime\.jp|toon\.ehime\.jp|uchiko\.ehime\.jp|uwajima\.ehime\.jp|yawatahama\.ehime\.jp|echizen\.fukui\.jp|eiheiji\.fukui\.jp|fukui\.fukui\.jp|ikeda\.fukui\.jp|katsuyama\.fukui\.jp|mihama\.fukui\.jp|minamiechizen\.fukui\.jp|obama\.fukui\.jp|ohi\.fukui\.jp|ono\.fukui\.jp|sabae\.fukui\.jp|sakai\.fukui\.jp|takahama\.fukui\.jp|tsuruga\.fukui\.jp|wakasa\.fukui\.jp|ashiya\.fukuoka\.jp|buzen\.fukuoka\.jp|chikugo\.fukuoka\.jp|chikuho\.fukuoka\.jp|chikujo\.fukuoka\.jp|chikushino\.fukuoka\.jp|chikuzen\.fukuoka\.jp|chuo\.fukuoka\.jp|dazaifu\.fukuoka\.jp|fukuchi\.fukuoka\.jp|hakata\.fukuoka\.jp|higashi\.fukuoka\.jp|hirokawa\.fukuoka\.jp|hisayama\.fukuoka\.jp|iizuka\.fukuoka\.jp|inatsuki\.fukuoka\.jp|kaho\.fukuoka\.jp|kasuga\.fukuoka\.jp|kasuya\.fukuoka\.jp|kawara\.fukuoka\.jp|keisen\.fukuoka\.jp|koga\.fukuoka\.jp|kurate\.fukuoka\.jp|kurogi\.fukuoka\.jp|kurume\.fukuoka\.jp|minami\.fukuoka\.jp|miyako\.fukuoka\.jp|miyama\.fukuoka\.jp|miyawaka\.fukuoka\.jp|mizumaki\.fukuoka\.jp|munakata\.fukuoka\.jp|nakagawa\.fukuoka\.jp|nakama\.fukuoka\.jp|nishi\.fukuoka\.jp|nogata\.fukuoka\.jp|ogori\.fukuoka\.jp|okagaki\.fukuoka\.jp|okawa\.fukuoka\.jp|oki\.fukuoka\.jp|omuta\.fukuoka\.jp|onga\.fukuoka\.jp|onojo\.fukuoka\.jp|oto\.fukuoka\.jp|saigawa\.fukuoka\.jp|sasaguri\.fukuoka\.jp|shingu\.fukuoka\.jp|shinyoshitomi\.fukuoka\.jp|shonai\.fukuoka\.jp|soeda\.fukuoka\.jp|sue\.fukuoka\.jp|tachiarai\.fukuoka\.jp|tagawa\.fukuoka\.jp|takata\.fukuoka\.jp|toho\.fukuoka\.jp|toyotsu\.fukuoka\.jp|tsuiki\.fukuoka\.jp|ukiha\.fukuoka\.jp|umi\.fukuoka\.jp|usui\.fukuoka\.jp|yamada\.fukuoka\.jp|yame\.fukuoka\.jp|yanagawa\.fukuoka\.jp|yukuhashi\.fukuoka\.jp|aizubange\.fukushima\.jp|aizumisato\.fukushima\.jp|aizuwakamatsu\.fukushima\.jp|asakawa\.fukushima\.jp|bandai\.fukushima\.jp|date\.fukushima\.jp|fukushima\.fukushima\.jp|furudono\.fukushima\.jp|futaba\.fukushima\.jp|hanawa\.fukushima\.jp|higashi\.fukushima\.jp|hirata\.fukushima\.jp|hirono\.fukushima\.jp|iitate\.fukushima\.jp|inawashiro\.fukushima\.jp|ishikawa\.fukushima\.jp|iwaki\.fukushima\.jp|izumizaki\.fukushima\.jp|kagamiishi\.fukushima\.jp|kaneyama\.fukushima\.jp|kawamata\.fukushima\.jp|kitakata\.fukushima\.jp|kitashiobara\.fukushima\.jp|koori\.fukushima\.jp|koriyama\.fukushima\.jp|kunimi\.fukushima\.jp|miharu\.fukushima\.jp|mishima\.fukushima\.jp|namie\.fukushima\.jp|nango\.fukushima\.jp|nishiaizu\.fukushima\.jp|nishigo\.fukushima\.jp|okuma\.fukushima\.jp|omotego\.fukushima\.jp|ono\.fukushima\.jp|otama\.fukushima\.jp|samegawa\.fukushima\.jp|shimogo\.fukushima\.jp|shirakawa\.fukushima\.jp|showa\.fukushima\.jp|soma\.fukushima\.jp|sukagawa\.fukushima\.jp|taishin\.fukushima\.jp|tamakawa\.fukushima\.jp|tanagura\.fukushima\.jp|tenei\.fukushima\.jp|yabuki\.fukushima\.jp|yamato\.fukushima\.jp|yamatsuri\.fukushima\.jp|yanaizu\.fukushima\.jp|yugawa\.fukushima\.jp|anpachi\.gifu\.jp|ena\.gifu\.jp|gifu\.gifu\.jp|ginan\.gifu\.jp|godo\.gifu\.jp|gujo\.gifu\.jp|hashima\.gifu\.jp|hichiso\.gifu\.jp|hida\.gifu\.jp|higashishirakawa\.gifu\.jp|ibigawa\.gifu\.jp|ikeda\.gifu\.jp|kakamigahara\.gifu\.jp|kani\.gifu\.jp|kasahara\.gifu\.jp|kasamatsu\.gifu\.jp|kawaue\.gifu\.jp|kitagata\.gifu\.jp|mino\.gifu\.jp|minokamo\.gifu\.jp|mitake\.gifu\.jp|mizunami\.gifu\.jp|motosu\.gifu\.jp|nakatsugawa\.gifu\.jp|ogaki\.gifu\.jp|sakahogi\.gifu\.jp|seki\.gifu\.jp|sekigahara\.gifu\.jp|shirakawa\.gifu\.jp|tajimi\.gifu\.jp|takayama\.gifu\.jp|tarui\.gifu\.jp|toki\.gifu\.jp|tomika\.gifu\.jp|wanouchi\.gifu\.jp|yamagata\.gifu\.jp|yaotsu\.gifu\.jp|yoro\.gifu\.jp|annaka\.gunma\.jp|chiyoda\.gunma\.jp|fujioka\.gunma\.jp|higashiagatsuma\.gunma\.jp|isesaki\.gunma\.jp|itakura\.gunma\.jp|kanna\.gunma\.jp|kanra\.gunma\.jp|katashina\.gunma\.jp|kawaba\.gunma\.jp|kiryu\.gunma\.jp|kusatsu\.gunma\.jp|maebashi\.gunma\.jp|meiwa\.gunma\.jp|midori\.gunma\.jp|minakami\.gunma\.jp|naganohara\.gunma\.jp|nakanojo\.gunma\.jp|nanmoku\.gunma\.jp|numata\.gunma\.jp|oizumi\.gunma\.jp|ora\.gunma\.jp|ota\.gunma\.jp|shibukawa\.gunma\.jp|shimonita\.gunma\.jp|shinto\.gunma\.jp|showa\.gunma\.jp|takasaki\.gunma\.jp|takayama\.gunma\.jp|tamamura\.gunma\.jp|tatebayashi\.gunma\.jp|tomioka\.gunma\.jp|tsukiyono\.gunma\.jp|tsumagoi\.gunma\.jp|ueno\.gunma\.jp|yoshioka\.gunma\.jp|asaminami\.hiroshima\.jp|daiwa\.hiroshima\.jp|etajima\.hiroshima\.jp|fuchu\.hiroshima\.jp|fukuyama\.hiroshima\.jp|hatsukaichi\.hiroshima\.jp|higashihiroshima\.hiroshima\.jp|hongo\.hiroshima\.jp|jinsekikogen\.hiroshima\.jp|kaita\.hiroshima\.jp|kui\.hiroshima\.jp|kumano\.hiroshima\.jp|kure\.hiroshima\.jp|mihara\.hiroshima\.jp|miyoshi\.hiroshima\.jp|naka\.hiroshima\.jp|onomichi\.hiroshima\.jp|osakikamijima\.hiroshima\.jp|otake\.hiroshima\.jp|saka\.hiroshima\.jp|sera\.hiroshima\.jp|seranishi\.hiroshima\.jp|shinichi\.hiroshima\.jp|shobara\.hiroshima\.jp|takehara\.hiroshima\.jp|abashiri\.hokkaido\.jp|abira\.hokkaido\.jp|aibetsu\.hokkaido\.jp|akabira\.hokkaido\.jp|akkeshi\.hokkaido\.jp|asahikawa\.hokkaido\.jp|ashibetsu\.hokkaido\.jp|ashoro\.hokkaido\.jp|assabu\.hokkaido\.jp|atsuma\.hokkaido\.jp|bibai\.hokkaido\.jp|biei\.hokkaido\.jp|bifuka\.hokkaido\.jp|bihoro\.hokkaido\.jp|biratori\.hokkaido\.jp|chippubetsu\.hokkaido\.jp|chitose\.hokkaido\.jp|date\.hokkaido\.jp|ebetsu\.hokkaido\.jp|embetsu\.hokkaido\.jp|eniwa\.hokkaido\.jp|erimo\.hokkaido\.jp|esan\.hokkaido\.jp|esashi\.hokkaido\.jp|fukagawa\.hokkaido\.jp|fukushima\.hokkaido\.jp|furano\.hokkaido\.jp|furubira\.hokkaido\.jp|haboro\.hokkaido\.jp|hakodate\.hokkaido\.jp|hamatonbetsu\.hokkaido\.jp|hidaka\.hokkaido\.jp|higashikagura\.hokkaido\.jp|higashikawa\.hokkaido\.jp|hiroo\.hokkaido\.jp|hokuryu\.hokkaido\.jp|hokuto\.hokkaido\.jp|honbetsu\.hokkaido\.jp|horokanai\.hokkaido\.jp|horonobe\.hokkaido\.jp|ikeda\.hokkaido\.jp|imakane\.hokkaido\.jp|ishikari\.hokkaido\.jp|iwamizawa\.hokkaido\.jp|iwanai\.hokkaido\.jp|kamifurano\.hokkaido\.jp|kamikawa\.hokkaido\.jp|kamishihoro\.hokkaido\.jp|kamisunagawa\.hokkaido\.jp|kamoenai\.hokkaido\.jp|kayabe\.hokkaido\.jp|kembuchi\.hokkaido\.jp|kikonai\.hokkaido\.jp|kimobetsu\.hokkaido\.jp|kitahiroshima\.hokkaido\.jp|kitami\.hokkaido\.jp|kiyosato\.hokkaido\.jp|koshimizu\.hokkaido\.jp|kunneppu\.hokkaido\.jp|kuriyama\.hokkaido\.jp|kuromatsunai\.hokkaido\.jp|kushiro\.hokkaido\.jp|kutchan\.hokkaido\.jp|kyowa\.hokkaido\.jp|mashike\.hokkaido\.jp|matsumae\.hokkaido\.jp|mikasa\.hokkaido\.jp|minamifurano\.hokkaido\.jp|mombetsu\.hokkaido\.jp|moseushi\.hokkaido\.jp|mukawa\.hokkaido\.jp|muroran\.hokkaido\.jp|naie\.hokkaido\.jp|nakagawa\.hokkaido\.jp|nakasatsunai\.hokkaido\.jp|nakatombetsu\.hokkaido\.jp|nanae\.hokkaido\.jp|nanporo\.hokkaido\.jp|nayoro\.hokkaido\.jp|nemuro\.hokkaido\.jp|niikappu\.hokkaido\.jp|niki\.hokkaido\.jp|nishiokoppe\.hokkaido\.jp|noboribetsu\.hokkaido\.jp|numata\.hokkaido\.jp|obihiro\.hokkaido\.jp|obira\.hokkaido\.jp|oketo\.hokkaido\.jp|okoppe\.hokkaido\.jp|otaru\.hokkaido\.jp|otobe\.hokkaido\.jp|otofuke\.hokkaido\.jp|otoineppu\.hokkaido\.jp|oumu\.hokkaido\.jp|ozora\.hokkaido\.jp|pippu\.hokkaido\.jp|rankoshi\.hokkaido\.jp|rebun\.hokkaido\.jp|rikubetsu\.hokkaido\.jp|rishiri\.hokkaido\.jp|rishirifuji\.hokkaido\.jp|saroma\.hokkaido\.jp|sarufutsu\.hokkaido\.jp|shakotan\.hokkaido\.jp|shari\.hokkaido\.jp|shibecha\.hokkaido\.jp|shibetsu\.hokkaido\.jp|shikabe\.hokkaido\.jp|shikaoi\.hokkaido\.jp|shimamaki\.hokkaido\.jp|shimizu\.hokkaido\.jp|shimokawa\.hokkaido\.jp|shinshinotsu\.hokkaido\.jp|shintoku\.hokkaido\.jp|shiranuka\.hokkaido\.jp|shiraoi\.hokkaido\.jp|shiriuchi\.hokkaido\.jp|sobetsu\.hokkaido\.jp|sunagawa\.hokkaido\.jp|taiki\.hokkaido\.jp|takasu\.hokkaido\.jp|takikawa\.hokkaido\.jp|takinoue\.hokkaido\.jp|teshikaga\.hokkaido\.jp|tobetsu\.hokkaido\.jp|tohma\.hokkaido\.jp|tomakomai\.hokkaido\.jp|tomari\.hokkaido\.jp|toya\.hokkaido\.jp|toyako\.hokkaido\.jp|toyotomi\.hokkaido\.jp|toyoura\.hokkaido\.jp|tsubetsu\.hokkaido\.jp|tsukigata\.hokkaido\.jp|urakawa\.hokkaido\.jp|urausu\.hokkaido\.jp|uryu\.hokkaido\.jp|utashinai\.hokkaido\.jp|wakkanai\.hokkaido\.jp|wassamu\.hokkaido\.jp|yakumo\.hokkaido\.jp|yoichi\.hokkaido\.jp|aioi\.hyogo\.jp|akashi\.hyogo\.jp|ako\.hyogo\.jp|amagasaki\.hyogo\.jp|aogaki\.hyogo\.jp|asago\.hyogo\.jp|ashiya\.hyogo\.jp|awaji\.hyogo\.jp|fukusaki\.hyogo\.jp|goshiki\.hyogo\.jp|harima\.hyogo\.jp|himeji\.hyogo\.jp|ichikawa\.hyogo\.jp|inagawa\.hyogo\.jp|itami\.hyogo\.jp|kakogawa\.hyogo\.jp|kamigori\.hyogo\.jp|kamikawa\.hyogo\.jp|kasai\.hyogo\.jp|kasuga\.hyogo\.jp|kawanishi\.hyogo\.jp|miki\.hyogo\.jp|minamiawaji\.hyogo\.jp|nishinomiya\.hyogo\.jp|nishiwaki\.hyogo\.jp|ono\.hyogo\.jp|sanda\.hyogo\.jp|sannan\.hyogo\.jp|sasayama\.hyogo\.jp|sayo\.hyogo\.jp|shingu\.hyogo\.jp|shinonsen\.hyogo\.jp|shiso\.hyogo\.jp|sumoto\.hyogo\.jp|taishi\.hyogo\.jp|taka\.hyogo\.jp|takarazuka\.hyogo\.jp|takasago\.hyogo\.jp|takino\.hyogo\.jp|tamba\.hyogo\.jp|tatsuno\.hyogo\.jp|toyooka\.hyogo\.jp|yabu\.hyogo\.jp|yashiro\.hyogo\.jp|yoka\.hyogo\.jp|yokawa\.hyogo\.jp|ami\.ibaraki\.jp|asahi\.ibaraki\.jp|bando\.ibaraki\.jp|chikusei\.ibaraki\.jp|daigo\.ibaraki\.jp|fujishiro\.ibaraki\.jp|hitachi\.ibaraki\.jp|hitachinaka\.ibaraki\.jp|hitachiomiya\.ibaraki\.jp|hitachiota\.ibaraki\.jp|ibaraki\.ibaraki\.jp|ina\.ibaraki\.jp|inashiki\.ibaraki\.jp|itako\.ibaraki\.jp|iwama\.ibaraki\.jp|joso\.ibaraki\.jp|kamisu\.ibaraki\.jp|kasama\.ibaraki\.jp|kashima\.ibaraki\.jp|kasumigaura\.ibaraki\.jp|koga\.ibaraki\.jp|miho\.ibaraki\.jp|mito\.ibaraki\.jp|moriya\.ibaraki\.jp|naka\.ibaraki\.jp|namegata\.ibaraki\.jp|oarai\.ibaraki\.jp|ogawa\.ibaraki\.jp|omitama\.ibaraki\.jp|ryugasaki\.ibaraki\.jp|sakai\.ibaraki\.jp|sakuragawa\.ibaraki\.jp|shimodate\.ibaraki\.jp|shimotsuma\.ibaraki\.jp|shirosato\.ibaraki\.jp|sowa\.ibaraki\.jp|suifu\.ibaraki\.jp|takahagi\.ibaraki\.jp|tamatsukuri\.ibaraki\.jp|tokai\.ibaraki\.jp|tomobe\.ibaraki\.jp|tone\.ibaraki\.jp|toride\.ibaraki\.jp|tsuchiura\.ibaraki\.jp|tsukuba\.ibaraki\.jp|uchihara\.ibaraki\.jp|ushiku\.ibaraki\.jp|yachiyo\.ibaraki\.jp|yamagata\.ibaraki\.jp|yawara\.ibaraki\.jp|yuki\.ibaraki\.jp|anamizu\.ishikawa\.jp|hakui\.ishikawa\.jp|hakusan\.ishikawa\.jp|kaga\.ishikawa\.jp|kahoku\.ishikawa\.jp|kanazawa\.ishikawa\.jp|kawakita\.ishikawa\.jp|komatsu\.ishikawa\.jp|nakanoto\.ishikawa\.jp|nanao\.ishikawa\.jp|nomi\.ishikawa\.jp|nonoichi\.ishikawa\.jp|noto\.ishikawa\.jp|shika\.ishikawa\.jp|suzu\.ishikawa\.jp|tsubata\.ishikawa\.jp|tsurugi\.ishikawa\.jp|uchinada\.ishikawa\.jp|wajima\.ishikawa\.jp|fudai\.iwate\.jp|fujisawa\.iwate\.jp|hanamaki\.iwate\.jp|hiraizumi\.iwate\.jp|hirono\.iwate\.jp|ichinohe\.iwate\.jp|ichinoseki\.iwate\.jp|iwaizumi\.iwate\.jp|iwate\.iwate\.jp|joboji\.iwate\.jp|kamaishi\.iwate\.jp|kanegasaki\.iwate\.jp|karumai\.iwate\.jp|kawai\.iwate\.jp|kitakami\.iwate\.jp|kuji\.iwate\.jp|kunohe\.iwate\.jp|kuzumaki\.iwate\.jp|miyako\.iwate\.jp|mizusawa\.iwate\.jp|morioka\.iwate\.jp|ninohe\.iwate\.jp|noda\.iwate\.jp|ofunato\.iwate\.jp|oshu\.iwate\.jp|otsuchi\.iwate\.jp|rikuzentakata\.iwate\.jp|shiwa\.iwate\.jp|shizukuishi\.iwate\.jp|sumita\.iwate\.jp|tanohata\.iwate\.jp|tono\.iwate\.jp|yahaba\.iwate\.jp|yamada\.iwate\.jp|ayagawa\.kagawa\.jp|higashikagawa\.kagawa\.jp|kanonji\.kagawa\.jp|kotohira\.kagawa\.jp|manno\.kagawa\.jp|marugame\.kagawa\.jp|mitoyo\.kagawa\.jp|naoshima\.kagawa\.jp|sanuki\.kagawa\.jp|tadotsu\.kagawa\.jp|takamatsu\.kagawa\.jp|tonosho\.kagawa\.jp|uchinomi\.kagawa\.jp|utazu\.kagawa\.jp|zentsuji\.kagawa\.jp|akune\.kagoshima\.jp|amami\.kagoshima\.jp|hioki\.kagoshima\.jp|isa\.kagoshima\.jp|isen\.kagoshima\.jp|izumi\.kagoshima\.jp|kagoshima\.kagoshima\.jp|kanoya\.kagoshima\.jp|kawanabe\.kagoshima\.jp|kinko\.kagoshima\.jp|kouyama\.kagoshima\.jp|makurazaki\.kagoshima\.jp|matsumoto\.kagoshima\.jp|minamitane\.kagoshima\.jp|nakatane\.kagoshima\.jp|nishinoomote\.kagoshima\.jp|satsumasendai\.kagoshima\.jp|soo\.kagoshima\.jp|tarumizu\.kagoshima\.jp|yusui\.kagoshima\.jp|aikawa\.kanagawa\.jp|atsugi\.kanagawa\.jp|ayase\.kanagawa\.jp|chigasaki\.kanagawa\.jp|ebina\.kanagawa\.jp|fujisawa\.kanagawa\.jp|hadano\.kanagawa\.jp|hakone\.kanagawa\.jp|hiratsuka\.kanagawa\.jp|isehara\.kanagawa\.jp|kaisei\.kanagawa\.jp|kamakura\.kanagawa\.jp|kiyokawa\.kanagawa\.jp|matsuda\.kanagawa\.jp|minamiashigara\.kanagawa\.jp|miura\.kanagawa\.jp|nakai\.kanagawa\.jp|ninomiya\.kanagawa\.jp|odawara\.kanagawa\.jp|oi\.kanagawa\.jp|oiso\.kanagawa\.jp|sagamihara\.kanagawa\.jp|samukawa\.kanagawa\.jp|tsukui\.kanagawa\.jp|yamakita\.kanagawa\.jp|yamato\.kanagawa\.jp|yokosuka\.kanagawa\.jp|yugawara\.kanagawa\.jp|zama\.kanagawa\.jp|zushi\.kanagawa\.jp|aki\.kochi\.jp|geisei\.kochi\.jp|hidaka\.kochi\.jp|higashitsuno\.kochi\.jp|ino\.kochi\.jp|kagami\.kochi\.jp|kami\.kochi\.jp|kitagawa\.kochi\.jp|kochi\.kochi\.jp|mihara\.kochi\.jp|motoyama\.kochi\.jp|muroto\.kochi\.jp|nahari\.kochi\.jp|nakamura\.kochi\.jp|nankoku\.kochi\.jp|nishitosa\.kochi\.jp|niyodogawa\.kochi\.jp|ochi\.kochi\.jp|okawa\.kochi\.jp|otoyo\.kochi\.jp|otsuki\.kochi\.jp|sakawa\.kochi\.jp|sukumo\.kochi\.jp|susaki\.kochi\.jp|tosa\.kochi\.jp|tosashimizu\.kochi\.jp|toyo\.kochi\.jp|tsuno\.kochi\.jp|umaji\.kochi\.jp|yasuda\.kochi\.jp|yusuhara\.kochi\.jp|amakusa\.kumamoto\.jp|arao\.kumamoto\.jp|aso\.kumamoto\.jp|choyo\.kumamoto\.jp|gyokuto\.kumamoto\.jp|kamiamakusa\.kumamoto\.jp|kikuchi\.kumamoto\.jp|kumamoto\.kumamoto\.jp|mashiki\.kumamoto\.jp|mifune\.kumamoto\.jp|minamata\.kumamoto\.jp|minamioguni\.kumamoto\.jp|nagasu\.kumamoto\.jp|nishihara\.kumamoto\.jp|oguni\.kumamoto\.jp|ozu\.kumamoto\.jp|sumoto\.kumamoto\.jp|takamori\.kumamoto\.jp|uki\.kumamoto\.jp|uto\.kumamoto\.jp|yamaga\.kumamoto\.jp|yamato\.kumamoto\.jp|yatsushiro\.kumamoto\.jp|ayabe\.kyoto\.jp|fukuchiyama\.kyoto\.jp|higashiyama\.kyoto\.jp|ide\.kyoto\.jp|ine\.kyoto\.jp|joyo\.kyoto\.jp|kameoka\.kyoto\.jp|kamo\.kyoto\.jp|kita\.kyoto\.jp|kizu\.kyoto\.jp|kumiyama\.kyoto\.jp|kyotamba\.kyoto\.jp|kyotanabe\.kyoto\.jp|kyotango\.kyoto\.jp|maizuru\.kyoto\.jp|minami\.kyoto\.jp|minamiyamashiro\.kyoto\.jp|miyazu\.kyoto\.jp|muko\.kyoto\.jp|nagaokakyo\.kyoto\.jp|nakagyo\.kyoto\.jp|nantan\.kyoto\.jp|oyamazaki\.kyoto\.jp|sakyo\.kyoto\.jp|seika\.kyoto\.jp|tanabe\.kyoto\.jp|uji\.kyoto\.jp|ujitawara\.kyoto\.jp|wazuka\.kyoto\.jp|yamashina\.kyoto\.jp|yawata\.kyoto\.jp|asahi\.mie\.jp|inabe\.mie\.jp|ise\.mie\.jp|kameyama\.mie\.jp|kawagoe\.mie\.jp|kiho\.mie\.jp|kisosaki\.mie\.jp|kiwa\.mie\.jp|komono\.mie\.jp|kumano\.mie\.jp|kuwana\.mie\.jp|matsusaka\.mie\.jp|meiwa\.mie\.jp|mihama\.mie\.jp|minamiise\.mie\.jp|misugi\.mie\.jp|miyama\.mie\.jp|nabari\.mie\.jp|shima\.mie\.jp|suzuka\.mie\.jp|tado\.mie\.jp|taiki\.mie\.jp|taki\.mie\.jp|tamaki\.mie\.jp|toba\.mie\.jp|tsu\.mie\.jp|udono\.mie\.jp|ureshino\.mie\.jp|watarai\.mie\.jp|yokkaichi\.mie\.jp|furukawa\.miyagi\.jp|higashimatsushima\.miyagi\.jp|ishinomaki\.miyagi\.jp|iwanuma\.miyagi\.jp|kakuda\.miyagi\.jp|kami\.miyagi\.jp|kawasaki\.miyagi\.jp|marumori\.miyagi\.jp|matsushima\.miyagi\.jp|minamisanriku\.miyagi\.jp|misato\.miyagi\.jp|murata\.miyagi\.jp|natori\.miyagi\.jp|ogawara\.miyagi\.jp|ohira\.miyagi\.jp|onagawa\.miyagi\.jp|osaki\.miyagi\.jp|rifu\.miyagi\.jp|semine\.miyagi\.jp|shibata\.miyagi\.jp|shichikashuku\.miyagi\.jp|shikama\.miyagi\.jp|shiogama\.miyagi\.jp|shiroishi\.miyagi\.jp|tagajo\.miyagi\.jp|taiwa\.miyagi\.jp|tome\.miyagi\.jp|tomiya\.miyagi\.jp|wakuya\.miyagi\.jp|watari\.miyagi\.jp|yamamoto\.miyagi\.jp|zao\.miyagi\.jp|aya\.miyazaki\.jp|ebino\.miyazaki\.jp|gokase\.miyazaki\.jp|hyuga\.miyazaki\.jp|kadogawa\.miyazaki\.jp|kawaminami\.miyazaki\.jp|kijo\.miyazaki\.jp|kitagawa\.miyazaki\.jp|kitakata\.miyazaki\.jp|kitaura\.miyazaki\.jp|kobayashi\.miyazaki\.jp|kunitomi\.miyazaki\.jp|kushima\.miyazaki\.jp|mimata\.miyazaki\.jp|miyakonojo\.miyazaki\.jp|miyazaki\.miyazaki\.jp|morotsuka\.miyazaki\.jp|nichinan\.miyazaki\.jp|nishimera\.miyazaki\.jp|nobeoka\.miyazaki\.jp|saito\.miyazaki\.jp|shiiba\.miyazaki\.jp|shintomi\.miyazaki\.jp|takaharu\.miyazaki\.jp|takanabe\.miyazaki\.jp|takazaki\.miyazaki\.jp|tsuno\.miyazaki\.jp|achi\.nagano\.jp|agematsu\.nagano\.jp|anan\.nagano\.jp|aoki\.nagano\.jp|asahi\.nagano\.jp|azumino\.nagano\.jp|chikuhoku\.nagano\.jp|chikuma\.nagano\.jp|chino\.nagano\.jp|fujimi\.nagano\.jp|hakuba\.nagano\.jp|hara\.nagano\.jp|hiraya\.nagano\.jp|iida\.nagano\.jp|iijima\.nagano\.jp|iiyama\.nagano\.jp|iizuna\.nagano\.jp|ikeda\.nagano\.jp|ikusaka\.nagano\.jp|ina\.nagano\.jp|karuizawa\.nagano\.jp|kawakami\.nagano\.jp|kiso\.nagano\.jp|kisofukushima\.nagano\.jp|kitaaiki\.nagano\.jp|komagane\.nagano\.jp|komoro\.nagano\.jp|matsukawa\.nagano\.jp|matsumoto\.nagano\.jp|miasa\.nagano\.jp|minamiaiki\.nagano\.jp|minamimaki\.nagano\.jp|minamiminowa\.nagano\.jp|minowa\.nagano\.jp|miyada\.nagano\.jp|miyota\.nagano\.jp|mochizuki\.nagano\.jp|nagano\.nagano\.jp|nagawa\.nagano\.jp|nagiso\.nagano\.jp|nakagawa\.nagano\.jp|nakano\.nagano\.jp|nozawaonsen\.nagano\.jp|obuse\.nagano\.jp|ogawa\.nagano\.jp|okaya\.nagano\.jp|omachi\.nagano\.jp|omi\.nagano\.jp|ookuwa\.nagano\.jp|ooshika\.nagano\.jp|otaki\.nagano\.jp|otari\.nagano\.jp|sakae\.nagano\.jp|sakaki\.nagano\.jp|saku\.nagano\.jp|sakuho\.nagano\.jp|shimosuwa\.nagano\.jp|shinanomachi\.nagano\.jp|shiojiri\.nagano\.jp|suwa\.nagano\.jp|suzaka\.nagano\.jp|takagi\.nagano\.jp|takamori\.nagano\.jp|takayama\.nagano\.jp|tateshina\.nagano\.jp|tatsuno\.nagano\.jp|togakushi\.nagano\.jp|togura\.nagano\.jp|tomi\.nagano\.jp|ueda\.nagano\.jp|wada\.nagano\.jp|yamagata\.nagano\.jp|yamanouchi\.nagano\.jp|yasaka\.nagano\.jp|yasuoka\.nagano\.jp|chijiwa\.nagasaki\.jp|futsu\.nagasaki\.jp|goto\.nagasaki\.jp|hasami\.nagasaki\.jp|hirado\.nagasaki\.jp|iki\.nagasaki\.jp|isahaya\.nagasaki\.jp|kawatana\.nagasaki\.jp|kuchinotsu\.nagasaki\.jp|matsuura\.nagasaki\.jp|nagasaki\.nagasaki\.jp|obama\.nagasaki\.jp|omura\.nagasaki\.jp|oseto\.nagasaki\.jp|saikai\.nagasaki\.jp|sasebo\.nagasaki\.jp|seihi\.nagasaki\.jp|shimabara\.nagasaki\.jp|shinkamigoto\.nagasaki\.jp|togitsu\.nagasaki\.jp|tsushima\.nagasaki\.jp|unzen\.nagasaki\.jp|ando\.nara\.jp|gose\.nara\.jp|heguri\.nara\.jp|higashiyoshino\.nara\.jp|ikaruga\.nara\.jp|ikoma\.nara\.jp|kamikitayama\.nara\.jp|kanmaki\.nara\.jp|kashiba\.nara\.jp|kashihara\.nara\.jp|katsuragi\.nara\.jp|kawai\.nara\.jp|kawakami\.nara\.jp|kawanishi\.nara\.jp|koryo\.nara\.jp|kurotaki\.nara\.jp|mitsue\.nara\.jp|miyake\.nara\.jp|nara\.nara\.jp|nosegawa\.nara\.jp|oji\.nara\.jp|ouda\.nara\.jp|oyodo\.nara\.jp|sakurai\.nara\.jp|sango\.nara\.jp|shimoichi\.nara\.jp|shimokitayama\.nara\.jp|shinjo\.nara\.jp|soni\.nara\.jp|takatori\.nara\.jp|tawaramoto\.nara\.jp|tenkawa\.nara\.jp|tenri\.nara\.jp|uda\.nara\.jp|yamatokoriyama\.nara\.jp|yamatotakada\.nara\.jp|yamazoe\.nara\.jp|yoshino\.nara\.jp|aga\.niigata\.jp|agano\.niigata\.jp|gosen\.niigata\.jp|itoigawa\.niigata\.jp|izumozaki\.niigata\.jp|joetsu\.niigata\.jp|kamo\.niigata\.jp|kariwa\.niigata\.jp|kashiwazaki\.niigata\.jp|minamiuonuma\.niigata\.jp|mitsuke\.niigata\.jp|muika\.niigata\.jp|murakami\.niigata\.jp|myoko\.niigata\.jp|nagaoka\.niigata\.jp|niigata\.niigata\.jp|ojiya\.niigata\.jp|omi\.niigata\.jp|sado\.niigata\.jp|sanjo\.niigata\.jp|seiro\.niigata\.jp|seirou\.niigata\.jp|sekikawa\.niigata\.jp|shibata\.niigata\.jp|tagami\.niigata\.jp|tainai\.niigata\.jp|tochio\.niigata\.jp|tokamachi\.niigata\.jp|tsubame\.niigata\.jp|tsunan\.niigata\.jp|uonuma\.niigata\.jp|yahiko\.niigata\.jp|yoita\.niigata\.jp|yuzawa\.niigata\.jp|beppu\.oita\.jp|bungoono\.oita\.jp|bungotakada\.oita\.jp|hasama\.oita\.jp|hiji\.oita\.jp|himeshima\.oita\.jp|hita\.oita\.jp|kamitsue\.oita\.jp|kokonoe\.oita\.jp|kuju\.oita\.jp|kunisaki\.oita\.jp|kusu\.oita\.jp|oita\.oita\.jp|saiki\.oita\.jp|taketa\.oita\.jp|tsukumi\.oita\.jp|usa\.oita\.jp|usuki\.oita\.jp|yufu\.oita\.jp|akaiwa\.okayama\.jp|asakuchi\.okayama\.jp|bizen\.okayama\.jp|hayashima\.okayama\.jp|ibara\.okayama\.jp|kagamino\.okayama\.jp|kasaoka\.okayama\.jp|kibichuo\.okayama\.jp|kumenan\.okayama\.jp|kurashiki\.okayama\.jp|maniwa\.okayama\.jp|misaki\.okayama\.jp|nagi\.okayama\.jp|niimi\.okayama\.jp|nishiawakura\.okayama\.jp|okayama\.okayama\.jp|satosho\.okayama\.jp|setouchi\.okayama\.jp|shinjo\.okayama\.jp|shoo\.okayama\.jp|soja\.okayama\.jp|takahashi\.okayama\.jp|tamano\.okayama\.jp|tsuyama\.okayama\.jp|wake\.okayama\.jp|yakage\.okayama\.jp|aguni\.okinawa\.jp|ginowan\.okinawa\.jp|ginoza\.okinawa\.jp|gushikami\.okinawa\.jp|haebaru\.okinawa\.jp|higashi\.okinawa\.jp|hirara\.okinawa\.jp|iheya\.okinawa\.jp|ishigaki\.okinawa\.jp|ishikawa\.okinawa\.jp|itoman\.okinawa\.jp|izena\.okinawa\.jp|kadena\.okinawa\.jp|kin\.okinawa\.jp|kitadaito\.okinawa\.jp|kitanakagusuku\.okinawa\.jp|kumejima\.okinawa\.jp|kunigami\.okinawa\.jp|minamidaito\.okinawa\.jp|motobu\.okinawa\.jp|nago\.okinawa\.jp|naha\.okinawa\.jp|nakagusuku\.okinawa\.jp|nakijin\.okinawa\.jp|nanjo\.okinawa\.jp|nishihara\.okinawa\.jp|ogimi\.okinawa\.jp|okinawa\.okinawa\.jp|onna\.okinawa\.jp|shimoji\.okinawa\.jp|taketomi\.okinawa\.jp|tarama\.okinawa\.jp|tokashiki\.okinawa\.jp|tomigusuku\.okinawa\.jp|tonaki\.okinawa\.jp|urasoe\.okinawa\.jp|uruma\.okinawa\.jp|yaese\.okinawa\.jp|yomitan\.okinawa\.jp|yonabaru\.okinawa\.jp|yonaguni\.okinawa\.jp|zamami\.okinawa\.jp|abeno\.osaka\.jp|chihayaakasaka\.osaka\.jp|chuo\.osaka\.jp|daito\.osaka\.jp|fujiidera\.osaka\.jp|habikino\.osaka\.jp|hannan\.osaka\.jp|higashiosaka\.osaka\.jp|higashisumiyoshi\.osaka\.jp|higashiyodogawa\.osaka\.jp|hirakata\.osaka\.jp|ibaraki\.osaka\.jp|ikeda\.osaka\.jp|izumi\.osaka\.jp|izumiotsu\.osaka\.jp|izumisano\.osaka\.jp|kadoma\.osaka\.jp|kaizuka\.osaka\.jp|kanan\.osaka\.jp|kashiwara\.osaka\.jp|katano\.osaka\.jp|kawachinagano\.osaka\.jp|kishiwada\.osaka\.jp|kita\.osaka\.jp|kumatori\.osaka\.jp|matsubara\.osaka\.jp|minato\.osaka\.jp|minoh\.osaka\.jp|misaki\.osaka\.jp|moriguchi\.osaka\.jp|neyagawa\.osaka\.jp|nishi\.osaka\.jp|nose\.osaka\.jp|osakasayama\.osaka\.jp|sakai\.osaka\.jp|sayama\.osaka\.jp|sennan\.osaka\.jp|settsu\.osaka\.jp|shijonawate\.osaka\.jp|shimamoto\.osaka\.jp|suita\.osaka\.jp|tadaoka\.osaka\.jp|taishi\.osaka\.jp|tajiri\.osaka\.jp|takaishi\.osaka\.jp|takatsuki\.osaka\.jp|tondabayashi\.osaka\.jp|toyonaka\.osaka\.jp|toyono\.osaka\.jp|yao\.osaka\.jp|ariake\.saga\.jp|arita\.saga\.jp|fukudomi\.saga\.jp|genkai\.saga\.jp|hamatama\.saga\.jp|hizen\.saga\.jp|imari\.saga\.jp|kamimine\.saga\.jp|kanzaki\.saga\.jp|karatsu\.saga\.jp|kashima\.saga\.jp|kitagata\.saga\.jp|kitahata\.saga\.jp|kiyama\.saga\.jp|kouhoku\.saga\.jp|kyuragi\.saga\.jp|nishiarita\.saga\.jp|ogi\.saga\.jp|omachi\.saga\.jp|ouchi\.saga\.jp|saga\.saga\.jp|shiroishi\.saga\.jp|taku\.saga\.jp|tara\.saga\.jp|tosu\.saga\.jp|yoshinogari\.saga\.jp|arakawa\.saitama\.jp|asaka\.saitama\.jp|chichibu\.saitama\.jp|fujimi\.saitama\.jp|fujimino\.saitama\.jp|fukaya\.saitama\.jp|hanno\.saitama\.jp|hanyu\.saitama\.jp|hasuda\.saitama\.jp|hatogaya\.saitama\.jp|hatoyama\.saitama\.jp|hidaka\.saitama\.jp|higashichichibu\.saitama\.jp|higashimatsuyama\.saitama\.jp|honjo\.saitama\.jp|ina\.saitama\.jp|iruma\.saitama\.jp|iwatsuki\.saitama\.jp|kamiizumi\.saitama\.jp|kamikawa\.saitama\.jp|kamisato\.saitama\.jp|kasukabe\.saitama\.jp|kawagoe\.saitama\.jp|kawaguchi\.saitama\.jp|kawajima\.saitama\.jp|kazo\.saitama\.jp|kitamoto\.saitama\.jp|koshigaya\.saitama\.jp|kounosu\.saitama\.jp|kuki\.saitama\.jp|kumagaya\.saitama\.jp|matsubushi\.saitama\.jp|minano\.saitama\.jp|misato\.saitama\.jp|miyashiro\.saitama\.jp|miyoshi\.saitama\.jp|moroyama\.saitama\.jp|nagatoro\.saitama\.jp|namegawa\.saitama\.jp|niiza\.saitama\.jp|ogano\.saitama\.jp|ogawa\.saitama\.jp|ogose\.saitama\.jp|okegawa\.saitama\.jp|omiya\.saitama\.jp|otaki\.saitama\.jp|ranzan\.saitama\.jp|ryokami\.saitama\.jp|saitama\.saitama\.jp|sakado\.saitama\.jp|satte\.saitama\.jp|sayama\.saitama\.jp|shiki\.saitama\.jp|shiraoka\.saitama\.jp|soka\.saitama\.jp|sugito\.saitama\.jp|toda\.saitama\.jp|tokigawa\.saitama\.jp|tokorozawa\.saitama\.jp|tsurugashima\.saitama\.jp|urawa\.saitama\.jp|warabi\.saitama\.jp|yashio\.saitama\.jp|yokoze\.saitama\.jp|yono\.saitama\.jp|yorii\.saitama\.jp|yoshida\.saitama\.jp|yoshikawa\.saitama\.jp|yoshimi\.saitama\.jp|aisho\.shiga\.jp|gamo\.shiga\.jp|higashiomi\.shiga\.jp|hikone\.shiga\.jp|koka\.shiga\.jp|konan\.shiga\.jp|kosei\.shiga\.jp|koto\.shiga\.jp|kusatsu\.shiga\.jp|maibara\.shiga\.jp|moriyama\.shiga\.jp|nagahama\.shiga\.jp|nishiazai\.shiga\.jp|notogawa\.shiga\.jp|omihachiman\.shiga\.jp|otsu\.shiga\.jp|ritto\.shiga\.jp|ryuoh\.shiga\.jp|takashima\.shiga\.jp|takatsuki\.shiga\.jp|torahime\.shiga\.jp|toyosato\.shiga\.jp|yasu\.shiga\.jp|akagi\.shimane\.jp|ama\.shimane\.jp|gotsu\.shimane\.jp|hamada\.shimane\.jp|higashiizumo\.shimane\.jp|hikawa\.shimane\.jp|hikimi\.shimane\.jp|izumo\.shimane\.jp|kakinoki\.shimane\.jp|masuda\.shimane\.jp|matsue\.shimane\.jp|misato\.shimane\.jp|nishinoshima\.shimane\.jp|ohda\.shimane\.jp|okinoshima\.shimane\.jp|okuizumo\.shimane\.jp|shimane\.shimane\.jp|tamayu\.shimane\.jp|tsuwano\.shimane\.jp|unnan\.shimane\.jp|yakumo\.shimane\.jp|yasugi\.shimane\.jp|yatsuka\.shimane\.jp|arai\.shizuoka\.jp|atami\.shizuoka\.jp|fuji\.shizuoka\.jp|fujieda\.shizuoka\.jp|fujikawa\.shizuoka\.jp|fujinomiya\.shizuoka\.jp|fukuroi\.shizuoka\.jp|gotemba\.shizuoka\.jp|haibara\.shizuoka\.jp|hamamatsu\.shizuoka\.jp|higashiizu\.shizuoka\.jp|ito\.shizuoka\.jp|iwata\.shizuoka\.jp|izu\.shizuoka\.jp|izunokuni\.shizuoka\.jp|kakegawa\.shizuoka\.jp|kannami\.shizuoka\.jp|kawanehon\.shizuoka\.jp|kawazu\.shizuoka\.jp|kikugawa\.shizuoka\.jp|kosai\.shizuoka\.jp|makinohara\.shizuoka\.jp|matsuzaki\.shizuoka\.jp|minamiizu\.shizuoka\.jp|mishima\.shizuoka\.jp|morimachi\.shizuoka\.jp|nishiizu\.shizuoka\.jp|numazu\.shizuoka\.jp|omaezaki\.shizuoka\.jp|shimada\.shizuoka\.jp|shimizu\.shizuoka\.jp|shimoda\.shizuoka\.jp|shizuoka\.shizuoka\.jp|susono\.shizuoka\.jp|yaizu\.shizuoka\.jp|yoshida\.shizuoka\.jp|ashikaga\.tochigi\.jp|bato\.tochigi\.jp|haga\.tochigi\.jp|ichikai\.tochigi\.jp|iwafune\.tochigi\.jp|kaminokawa\.tochigi\.jp|kanuma\.tochigi\.jp|karasuyama\.tochigi\.jp|kuroiso\.tochigi\.jp|mashiko\.tochigi\.jp|mibu\.tochigi\.jp|moka\.tochigi\.jp|motegi\.tochigi\.jp|nasu\.tochigi\.jp|nasushiobara\.tochigi\.jp|nikko\.tochigi\.jp|nishikata\.tochigi\.jp|nogi\.tochigi\.jp|ohira\.tochigi\.jp|ohtawara\.tochigi\.jp|oyama\.tochigi\.jp|sakura\.tochigi\.jp|sano\.tochigi\.jp|shimotsuke\.tochigi\.jp|shioya\.tochigi\.jp|takanezawa\.tochigi\.jp|tochigi\.tochigi\.jp|tsuga\.tochigi\.jp|ujiie\.tochigi\.jp|utsunomiya\.tochigi\.jp|yaita\.tochigi\.jp|aizumi\.tokushima\.jp|anan\.tokushima\.jp|ichiba\.tokushima\.jp|itano\.tokushima\.jp|kainan\.tokushima\.jp|komatsushima\.tokushima\.jp|matsushige\.tokushima\.jp|mima\.tokushima\.jp|minami\.tokushima\.jp|miyoshi\.tokushima\.jp|mugi\.tokushima\.jp|nakagawa\.tokushima\.jp|naruto\.tokushima\.jp|sanagochi\.tokushima\.jp|shishikui\.tokushima\.jp|tokushima\.tokushima\.jp|wajiki\.tokushima\.jp|adachi\.tokyo\.jp|akiruno\.tokyo\.jp|akishima\.tokyo\.jp|aogashima\.tokyo\.jp|arakawa\.tokyo\.jp|bunkyo\.tokyo\.jp|chiyoda\.tokyo\.jp|chofu\.tokyo\.jp|chuo\.tokyo\.jp|edogawa\.tokyo\.jp|fuchu\.tokyo\.jp|fussa\.tokyo\.jp|hachijo\.tokyo\.jp|hachioji\.tokyo\.jp|hamura\.tokyo\.jp|higashikurume\.tokyo\.jp|higashimurayama\.tokyo\.jp|higashiyamato\.tokyo\.jp|hino\.tokyo\.jp|hinode\.tokyo\.jp|hinohara\.tokyo\.jp|inagi\.tokyo\.jp|itabashi\.tokyo\.jp|katsushika\.tokyo\.jp|kita\.tokyo\.jp|kiyose\.tokyo\.jp|kodaira\.tokyo\.jp|koganei\.tokyo\.jp|kokubunji\.tokyo\.jp|komae\.tokyo\.jp|koto\.tokyo\.jp|kouzushima\.tokyo\.jp|kunitachi\.tokyo\.jp|machida\.tokyo\.jp|meguro\.tokyo\.jp|minato\.tokyo\.jp|mitaka\.tokyo\.jp|mizuho\.tokyo\.jp|musashimurayama\.tokyo\.jp|musashino\.tokyo\.jp|nakano\.tokyo\.jp|nerima\.tokyo\.jp|ogasawara\.tokyo\.jp|okutama\.tokyo\.jp|ome\.tokyo\.jp|oshima\.tokyo\.jp|ota\.tokyo\.jp|setagaya\.tokyo\.jp|shibuya\.tokyo\.jp|shinagawa\.tokyo\.jp|shinjuku\.tokyo\.jp|suginami\.tokyo\.jp|sumida\.tokyo\.jp|tachikawa\.tokyo\.jp|taito\.tokyo\.jp|tama\.tokyo\.jp|toshima\.tokyo\.jp|chizu\.tottori\.jp|hino\.tottori\.jp|kawahara\.tottori\.jp|koge\.tottori\.jp|kotoura\.tottori\.jp|misasa\.tottori\.jp|nanbu\.tottori\.jp|nichinan\.tottori\.jp|sakaiminato\.tottori\.jp|tottori\.tottori\.jp|wakasa\.tottori\.jp|yazu\.tottori\.jp|yonago\.tottori\.jp|asahi\.toyama\.jp|fuchu\.toyama\.jp|fukumitsu\.toyama\.jp|funahashi\.toyama\.jp|himi\.toyama\.jp|imizu\.toyama\.jp|inami\.toyama\.jp|johana\.toyama\.jp|kamiichi\.toyama\.jp|kurobe\.toyama\.jp|nakaniikawa\.toyama\.jp|namerikawa\.toyama\.jp|nanto\.toyama\.jp|nyuzen\.toyama\.jp|oyabe\.toyama\.jp|taira\.toyama\.jp|takaoka\.toyama\.jp|tateyama\.toyama\.jp|toga\.toyama\.jp|tonami\.toyama\.jp|toyama\.toyama\.jp|unazuki\.toyama\.jp|uozu\.toyama\.jp|yamada\.toyama\.jp|arida\.wakayama\.jp|aridagawa\.wakayama\.jp|gobo\.wakayama\.jp|hashimoto\.wakayama\.jp|hidaka\.wakayama\.jp|hirogawa\.wakayama\.jp|inami\.wakayama\.jp|iwade\.wakayama\.jp|kainan\.wakayama\.jp|kamitonda\.wakayama\.jp|katsuragi\.wakayama\.jp|kimino\.wakayama\.jp|kinokawa\.wakayama\.jp|kitayama\.wakayama\.jp|koya\.wakayama\.jp|koza\.wakayama\.jp|kozagawa\.wakayama\.jp|kudoyama\.wakayama\.jp|kushimoto\.wakayama\.jp|mihama\.wakayama\.jp|misato\.wakayama\.jp|nachikatsuura\.wakayama\.jp|shingu\.wakayama\.jp|shirahama\.wakayama\.jp|taiji\.wakayama\.jp|tanabe\.wakayama\.jp|wakayama\.wakayama\.jp|yuasa\.wakayama\.jp|yura\.wakayama\.jp|asahi\.yamagata\.jp|funagata\.yamagata\.jp|higashine\.yamagata\.jp|iide\.yamagata\.jp|kahoku\.yamagata\.jp|kaminoyama\.yamagata\.jp|kaneyama\.yamagata\.jp|kawanishi\.yamagata\.jp|mamurogawa\.yamagata\.jp|mikawa\.yamagata\.jp|murayama\.yamagata\.jp|nagai\.yamagata\.jp|nakayama\.yamagata\.jp|nanyo\.yamagata\.jp|nishikawa\.yamagata\.jp|obanazawa\.yamagata\.jp|oe\.yamagata\.jp|oguni\.yamagata\.jp|ohkura\.yamagata\.jp|oishida\.yamagata\.jp|sagae\.yamagata\.jp|sakata\.yamagata\.jp|sakegawa\.yamagata\.jp|shinjo\.yamagata\.jp|shirataka\.yamagata\.jp|shonai\.yamagata\.jp|takahata\.yamagata\.jp|tendo\.yamagata\.jp|tozawa\.yamagata\.jp|tsuruoka\.yamagata\.jp|yamagata\.yamagata\.jp|yamanobe\.yamagata\.jp|yonezawa\.yamagata\.jp|yuza\.yamagata\.jp|abu\.yamaguchi\.jp|hagi\.yamaguchi\.jp|hikari\.yamaguchi\.jp|hofu\.yamaguchi\.jp|iwakuni\.yamaguchi\.jp|kudamatsu\.yamaguchi\.jp|mitou\.yamaguchi\.jp|nagato\.yamaguchi\.jp|oshima\.yamaguchi\.jp|shimonoseki\.yamaguchi\.jp|shunan\.yamaguchi\.jp|tabuse\.yamaguchi\.jp|tokuyama\.yamaguchi\.jp|toyota\.yamaguchi\.jp|ube\.yamaguchi\.jp|yuu\.yamaguchi\.jp|chuo\.yamanashi\.jp|doshi\.yamanashi\.jp|fuefuki\.yamanashi\.jp|fujikawa\.yamanashi\.jp|fujikawaguchiko\.yamanashi\.jp|fujiyoshida\.yamanashi\.jp|hayakawa\.yamanashi\.jp|hokuto\.yamanashi\.jp|ichikawamisato\.yamanashi\.jp|kai\.yamanashi\.jp|kofu\.yamanashi\.jp|koshu\.yamanashi\.jp|kosuge\.yamanashi\.jp|minami-alps\.yamanashi\.jp|minobu\.yamanashi\.jp|nakamichi\.yamanashi\.jp|nanbu\.yamanashi\.jp|narusawa\.yamanashi\.jp|nirasaki\.yamanashi\.jp|nishikatsura\.yamanashi\.jp|oshino\.yamanashi\.jp|otsuki\.yamanashi\.jp|showa\.yamanashi\.jp|tabayama\.yamanashi\.jp|tsuru\.yamanashi\.jp|uenohara\.yamanashi\.jp|yamanakako\.yamanashi\.jp|yamanashi\.yamanashi\.jp|[^.]+\.ke|kg|org\.kg|net\.kg|com\.kg|edu\.kg|gov\.kg|mil\.kg|[^.]+\.kh|ki|edu\.ki|biz\.ki|net\.ki|org\.ki|gov\.ki|info\.ki|com\.ki|km|org\.km|nom\.km|gov\.km|prd\.km|tm\.km|edu\.km|mil\.km|ass\.km|com\.km|coop\.km|asso\.km|presse\.km|medecin\.km|notaires\.km|pharmaciens\.km|veterinaire\.km|gouv\.km|kn|net\.kn|org\.kn|edu\.kn|gov\.kn|kp|com\.kp|edu\.kp|gov\.kp|org\.kp|rep\.kp|tra\.kp|kr|ac\.kr|co\.kr|es\.kr|go\.kr|hs\.kr|kg\.kr|mil\.kr|ms\.kr|ne\.kr|or\.kr|pe\.kr|re\.kr|sc\.kr|busan\.kr|chungbuk\.kr|chungnam\.kr|daegu\.kr|daejeon\.kr|gangwon\.kr|gwangju\.kr|gyeongbuk\.kr|gyeonggi\.kr|gyeongnam\.kr|incheon\.kr|jeju\.kr|jeonbuk\.kr|jeonnam\.kr|seoul\.kr|ulsan\.kr|[^.]+\.kw|ky|edu\.ky|gov\.ky|com\.ky|org\.ky|net\.ky|kz|org\.kz|edu\.kz|net\.kz|gov\.kz|mil\.kz|com\.kz|la|int\.la|net\.la|info\.la|edu\.la|gov\.la|per\.la|com\.la|org\.la|lb|com\.lb|edu\.lb|gov\.lb|net\.lb|org\.lb|lc|com\.lc|net\.lc|co\.lc|org\.lc|edu\.lc|gov\.lc|li|lk|gov\.lk|sch\.lk|net\.lk|int\.lk|com\.lk|org\.lk|edu\.lk|ngo\.lk|soc\.lk|web\.lk|ltd\.lk|assn\.lk|grp\.lk|hotel\.lk|ac\.lk|lr|com\.lr|edu\.lr|gov\.lr|org\.lr|net\.lr|ls|co\.ls|org\.ls|lt|gov\.lt|lu|lv|com\.lv|edu\.lv|gov\.lv|org\.lv|mil\.lv|id\.lv|net\.lv|asn\.lv|conf\.lv|ly|com\.ly|net\.ly|gov\.ly|plc\.ly|edu\.ly|sch\.ly|med\.ly|org\.ly|id\.ly|ma|co\.ma|net\.ma|gov\.ma|org\.ma|ac\.ma|press\.ma|mc|tm\.mc|asso\.mc|md|me|co\.me|net\.me|org\.me|edu\.me|ac\.me|gov\.me|its\.me|priv\.me|mg|org\.mg|nom\.mg|gov\.mg|prd\.mg|tm\.mg|edu\.mg|mil\.mg|com\.mg|co\.mg|mh|mil|mk|com\.mk|org\.mk|net\.mk|edu\.mk|gov\.mk|inf\.mk|name\.mk|ml|com\.ml|edu\.ml|gouv\.ml|gov\.ml|net\.ml|org\.ml|presse\.ml|[^.]+\.mm|mn|gov\.mn|edu\.mn|org\.mn|mo|com\.mo|net\.mo|org\.mo|edu\.mo|gov\.mo|mobi|mp|mq|mr|gov\.mr|ms|com\.ms|edu\.ms|gov\.ms|net\.ms|org\.ms|mt|com\.mt|edu\.mt|net\.mt|org\.mt|mu|com\.mu|net\.mu|org\.mu|gov\.mu|ac\.mu|co\.mu|or\.mu|museum|academy\.museum|agriculture\.museum|air\.museum|airguard\.museum|alabama\.museum|alaska\.museum|amber\.museum|ambulance\.museum|american\.museum|americana\.museum|americanantiques\.museum|americanart\.museum|amsterdam\.museum|and\.museum|annefrank\.museum|anthro\.museum|anthropology\.museum|antiques\.museum|aquarium\.museum|arboretum\.museum|archaeological\.museum|archaeology\.museum|architecture\.museum|art\.museum|artanddesign\.museum|artcenter\.museum|artdeco\.museum|arteducation\.museum|artgallery\.museum|arts\.museum|artsandcrafts\.museum|asmatart\.museum|assassination\.museum|assisi\.museum|association\.museum|astronomy\.museum|atlanta\.museum|austin\.museum|australia\.museum|automotive\.museum|aviation\.museum|axis\.museum|badajoz\.museum|baghdad\.museum|bahn\.museum|bale\.museum|baltimore\.museum|barcelona\.museum|baseball\.museum|basel\.museum|baths\.museum|bauern\.museum|beauxarts\.museum|beeldengeluid\.museum|bellevue\.museum|bergbau\.museum|berkeley\.museum|berlin\.museum|bern\.museum|bible\.museum|bilbao\.museum|bill\.museum|birdart\.museum|birthplace\.museum|bonn\.museum|boston\.museum|botanical\.museum|botanicalgarden\.museum|botanicgarden\.museum|botany\.museum|brandywinevalley\.museum|brasil\.museum|bristol\.museum|british\.museum|britishcolumbia\.museum|broadcast\.museum|brunel\.museum|brussel\.museum|brussels\.museum|bruxelles\.museum|building\.museum|burghof\.museum|bus\.museum|bushey\.museum|cadaques\.museum|california\.museum|cambridge\.museum|can\.museum|canada\.museum|capebreton\.museum|carrier\.museum|cartoonart\.museum|casadelamoneda\.museum|castle\.museum|castres\.museum|celtic\.museum|center\.museum|chattanooga\.museum|cheltenham\.museum|chesapeakebay\.museum|chicago\.museum|children\.museum|childrens\.museum|childrensgarden\.museum|chiropractic\.museum|chocolate\.museum|christiansburg\.museum|cincinnati\.museum|cinema\.museum|circus\.museum|civilisation\.museum|civilization\.museum|civilwar\.museum|clinton\.museum|clock\.museum|coal\.museum|coastaldefence\.museum|cody\.museum|coldwar\.museum|collection\.museum|colonialwilliamsburg\.museum|coloradoplateau\.museum|columbia\.museum|columbus\.museum|communication\.museum|communications\.museum|community\.museum|computer\.museum|computerhistory\.museum|comunicações\.museum|contemporary\.museum|contemporaryart\.museum|convent\.museum|copenhagen\.museum|corporation\.museum|correios-e-telecomunicações\.museum|corvette\.museum|costume\.museum|countryestate\.museum|county\.museum|crafts\.museum|cranbrook\.museum|creation\.museum|cultural\.museum|culturalcenter\.museum|culture\.museum|cyber\.museum|cymru\.museum|dali\.museum|dallas\.museum|database\.museum|ddr\.museum|decorativearts\.museum|delaware\.museum|delmenhorst\.museum|denmark\.museum|depot\.museum|design\.museum|detroit\.museum|dinosaur\.museum|discovery\.museum|dolls\.museum|donostia\.museum|durham\.museum|eastafrica\.museum|eastcoast\.museum|education\.museum|educational\.museum|egyptian\.museum|eisenbahn\.museum|elburg\.museum|elvendrell\.museum|embroidery\.museum|encyclopedic\.museum|england\.museum|entomology\.museum|environment\.museum|environmentalconservation\.museum|epilepsy\.museum|essex\.museum|estate\.museum|ethnology\.museum|exeter\.museum|exhibition\.museum|family\.museum|farm\.museum|farmequipment\.museum|farmers\.museum|farmstead\.museum|field\.museum|figueres\.museum|filatelia\.museum|film\.museum|fineart\.museum|finearts\.museum|finland\.museum|flanders\.museum|florida\.museum|force\.museum|fortmissoula\.museum|fortworth\.museum|foundation\.museum|francaise\.museum|frankfurt\.museum|franziskaner\.museum|freemasonry\.museum|freiburg\.museum|fribourg\.museum|frog\.museum|fundacio\.museum|furniture\.museum|gallery\.museum|garden\.museum|gateway\.museum|geelvinck\.museum|gemological\.museum|geology\.museum|georgia\.museum|giessen\.museum|glas\.museum|glass\.museum|gorge\.museum|grandrapids\.museum|graz\.museum|guernsey\.museum|halloffame\.museum|hamburg\.museum|handson\.museum|harvestcelebration\.museum|hawaii\.museum|health\.museum|heimatunduhren\.museum|hellas\.museum|helsinki\.museum|hembygdsforbund\.museum|heritage\.museum|histoire\.museum|historical\.museum|historicalsociety\.museum|historichouses\.museum|historisch\.museum|historisches\.museum|history\.museum|historyofscience\.museum|horology\.museum|house\.museum|humanities\.museum|illustration\.museum|imageandsound\.museum|indian\.museum|indiana\.museum|indianapolis\.museum|indianmarket\.museum|intelligence\.museum|interactive\.museum|iraq\.museum|iron\.museum|isleofman\.museum|jamison\.museum|jefferson\.museum|jerusalem\.museum|jewelry\.museum|jewish\.museum|jewishart\.museum|jfk\.museum|journalism\.museum|judaica\.museum|judygarland\.museum|juedisches\.museum|juif\.museum|karate\.museum|karikatur\.museum|kids\.museum|koebenhavn\.museum|koeln\.museum|kunst\.museum|kunstsammlung\.museum|kunstunddesign\.museum|labor\.museum|labour\.museum|lajolla\.museum|lancashire\.museum|landes\.museum|lans\.museum|läns\.museum|larsson\.museum|lewismiller\.museum|lincoln\.museum|linz\.museum|living\.museum|livinghistory\.museum|localhistory\.museum|london\.museum|losangeles\.museum|louvre\.museum|loyalist\.museum|lucerne\.museum|luxembourg\.museum|luzern\.museum|mad\.museum|madrid\.museum|mallorca\.museum|manchester\.museum|mansion\.museum|mansions\.museum|manx\.museum|marburg\.museum|maritime\.museum|maritimo\.museum|maryland\.museum|marylhurst\.museum|media\.museum|medical\.museum|medizinhistorisches\.museum|meeres\.museum|memorial\.museum|mesaverde\.museum|michigan\.museum|midatlantic\.museum|military\.museum|mill\.museum|miners\.museum|mining\.museum|minnesota\.museum|missile\.museum|missoula\.museum|modern\.museum|moma\.museum|money\.museum|monmouth\.museum|monticello\.museum|montreal\.museum|moscow\.museum|motorcycle\.museum|muenchen\.museum|muenster\.museum|mulhouse\.museum|muncie\.museum|museet\.museum|museumcenter\.museum|museumvereniging\.museum|music\.museum|national\.museum|nationalfirearms\.museum|nationalheritage\.museum|nativeamerican\.museum|naturalhistory\.museum|naturalhistorymuseum\.museum|naturalsciences\.museum|nature\.museum|naturhistorisches\.museum|natuurwetenschappen\.museum|naumburg\.museum|naval\.museum|nebraska\.museum|neues\.museum|newhampshire\.museum|newjersey\.museum|newmexico\.museum|newport\.museum|newspaper\.museum|newyork\.museum|niepce\.museum|norfolk\.museum|north\.museum|nrw\.museum|nuernberg\.museum|nuremberg\.museum|nyc\.museum|nyny\.museum|oceanographic\.museum|oceanographique\.museum|omaha\.museum|online\.museum|ontario\.museum|openair\.museum|oregon\.museum|oregontrail\.museum|otago\.museum|oxford\.museum|pacific\.museum|paderborn\.museum|palace\.museum|paleo\.museum|palmsprings\.museum|panama\.museum|paris\.museum|pasadena\.museum|pharmacy\.museum|philadelphia\.museum|philadelphiaarea\.museum|philately\.museum|phoenix\.museum|photography\.museum|pilots\.museum|pittsburgh\.museum|planetarium\.museum|plantation\.museum|plants\.museum|plaza\.museum|portal\.museum|portland\.museum|portlligat\.museum|posts-and-telecommunications\.museum|preservation\.museum|presidio\.museum|press\.museum|project\.museum|public\.museum|pubol\.museum|quebec\.museum|railroad\.museum|railway\.museum|research\.museum|resistance\.museum|riodejaneiro\.museum|rochester\.museum|rockart\.museum|roma\.museum|russia\.museum|saintlouis\.museum|salem\.museum|salvadordali\.museum|salzburg\.museum|sandiego\.museum|sanfrancisco\.museum|santabarbara\.museum|santacruz\.museum|santafe\.museum|saskatchewan\.museum|satx\.museum|savannahga\.museum|schlesisches\.museum|schoenbrunn\.museum|schokoladen\.museum|school\.museum|schweiz\.museum|science\.museum|scienceandhistory\.museum|scienceandindustry\.museum|sciencecenter\.museum|sciencecenters\.museum|science-fiction\.museum|sciencehistory\.museum|sciences\.museum|sciencesnaturelles\.museum|scotland\.museum|seaport\.museum|settlement\.museum|settlers\.museum|shell\.museum|sherbrooke\.museum|sibenik\.museum|silk\.museum|ski\.museum|skole\.museum|society\.museum|sologne\.museum|soundandvision\.museum|southcarolina\.museum|southwest\.museum|space\.museum|spy\.museum|square\.museum|stadt\.museum|stalbans\.museum|starnberg\.museum|state\.museum|stateofdelaware\.museum|station\.museum|steam\.museum|steiermark\.museum|stjohn\.museum|stockholm\.museum|stpetersburg\.museum|stuttgart\.museum|suisse\.museum|surgeonshall\.museum|surrey\.museum|svizzera\.museum|sweden\.museum|sydney\.museum|tank\.museum|tcm\.museum|technology\.museum|telekommunikation\.museum|television\.museum|texas\.museum|textile\.museum|theater\.museum|time\.museum|timekeeping\.museum|topology\.museum|torino\.museum|touch\.museum|town\.museum|transport\.museum|tree\.museum|trolley\.museum|trust\.museum|trustee\.museum|uhren\.museum|ulm\.museum|undersea\.museum|university\.museum|usa\.museum|usantiques\.museum|usarts\.museum|uscountryestate\.museum|usculture\.museum|usdecorativearts\.museum|usgarden\.museum|ushistory\.museum|ushuaia\.museum|uslivinghistory\.museum|utah\.museum|uvic\.museum|valley\.museum|vantaa\.museum|versailles\.museum|viking\.museum|village\.museum|virginia\.museum|virtual\.museum|virtuel\.museum|vlaanderen\.museum|volkenkunde\.museum|wales\.museum|wallonie\.museum|war\.museum|washingtondc\.museum|watchandclock\.museum|watch-and-clock\.museum|western\.museum|westfalen\.museum|whaling\.museum|wildlife\.museum|williamsburg\.museum|windmill\.museum|workshop\.museum|york\.museum|yorkshire\.museum|yosemite\.museum|youth\.museum|zoological\.museum|zoology\.museum|ירושלים\.museum|иком\.museum|mv|aero\.mv|biz\.mv|com\.mv|coop\.mv|edu\.mv|gov\.mv|info\.mv|int\.mv|mil\.mv|museum\.mv|name\.mv|net\.mv|org\.mv|pro\.mv|mw|ac\.mw|biz\.mw|co\.mw|com\.mw|coop\.mw|edu\.mw|gov\.mw|int\.mw|museum\.mw|net\.mw|org\.mw|mx|com\.mx|org\.mx|gob\.mx|edu\.mx|net\.mx|my|com\.my|net\.my|org\.my|gov\.my|edu\.my|mil\.my|name\.my|mz|ac\.mz|adv\.mz|co\.mz|edu\.mz|gov\.mz|mil\.mz|net\.mz|org\.mz|na|info\.na|pro\.na|name\.na|school\.na|or\.na|dr\.na|us\.na|mx\.na|ca\.na|in\.na|cc\.na|tv\.na|ws\.na|mobi\.na|co\.na|com\.na|org\.na|name|nc|asso\.nc|ne|net|nf|com\.nf|net\.nf|per\.nf|rec\.nf|web\.nf|arts\.nf|firm\.nf|info\.nf|other\.nf|store\.nf|ng|com\.ng|edu\.ng|gov\.ng|i\.ng|mil\.ng|mobi\.ng|name\.ng|net\.ng|org\.ng|sch\.ng|ni|ac\.ni|biz\.ni|co\.ni|com\.ni|edu\.ni|gob\.ni|in\.ni|info\.ni|int\.ni|mil\.ni|net\.ni|nom\.ni|org\.ni|web\.ni|nl|bv\.nl|no|fhs\.no|vgs\.no|fylkesbibl\.no|folkebibl\.no|museum\.no|idrett\.no|priv\.no|mil\.no|stat\.no|dep\.no|kommune\.no|herad\.no|aa\.no|ah\.no|bu\.no|fm\.no|hl\.no|hm\.no|jan-mayen\.no|mr\.no|nl\.no|nt\.no|of\.no|ol\.no|oslo\.no|rl\.no|sf\.no|st\.no|svalbard\.no|tm\.no|tr\.no|va\.no|vf\.no|gs\.aa\.no|gs\.ah\.no|gs\.bu\.no|gs\.fm\.no|gs\.hl\.no|gs\.hm\.no|gs\.jan-mayen\.no|gs\.mr\.no|gs\.nl\.no|gs\.nt\.no|gs\.of\.no|gs\.ol\.no|gs\.oslo\.no|gs\.rl\.no|gs\.sf\.no|gs\.st\.no|gs\.svalbard\.no|gs\.tm\.no|gs\.tr\.no|gs\.va\.no|gs\.vf\.no|akrehamn\.no|åkrehamn\.no|algard\.no|ålgård\.no|arna\.no|brumunddal\.no|bryne\.no|bronnoysund\.no|brønnøysund\.no|drobak\.no|drøbak\.no|egersund\.no|fetsund\.no|floro\.no|florø\.no|fredrikstad\.no|hokksund\.no|honefoss\.no|hønefoss\.no|jessheim\.no|jorpeland\.no|jørpeland\.no|kirkenes\.no|kopervik\.no|krokstadelva\.no|langevag\.no|langevåg\.no|leirvik\.no|mjondalen\.no|mjøndalen\.no|mo-i-rana\.no|mosjoen\.no|mosjøen\.no|nesoddtangen\.no|orkanger\.no|osoyro\.no|osøyro\.no|raholt\.no|råholt\.no|sandnessjoen\.no|sandnessjøen\.no|skedsmokorset\.no|slattum\.no|spjelkavik\.no|stathelle\.no|stavern\.no|stjordalshalsen\.no|stjørdalshalsen\.no|tananger\.no|tranby\.no|vossevangen\.no|afjord\.no|åfjord\.no|agdenes\.no|al\.no|ål\.no|alesund\.no|ålesund\.no|alstahaug\.no|alta\.no|áltá\.no|alaheadju\.no|álaheadju\.no|alvdal\.no|amli\.no|åmli\.no|amot\.no|åmot\.no|andebu\.no|andoy\.no|andøy\.no|andasuolo\.no|ardal\.no|årdal\.no|aremark\.no|arendal\.no|ås\.no|aseral\.no|åseral\.no|asker\.no|askim\.no|askvoll\.no|askoy\.no|askøy\.no|asnes\.no|åsnes\.no|audnedaln\.no|aukra\.no|aure\.no|aurland\.no|aurskog-holand\.no|aurskog-høland\.no|austevoll\.no|austrheim\.no|averoy\.no|averøy\.no|balestrand\.no|ballangen\.no|balat\.no|bálát\.no|balsfjord\.no|bahccavuotna\.no|báhccavuotna\.no|bamble\.no|bardu\.no|beardu\.no|beiarn\.no|bajddar\.no|bájddar\.no|baidar\.no|báidár\.no|berg\.no|bergen\.no|berlevag\.no|berlevåg\.no|bearalvahki\.no|bearalváhki\.no|bindal\.no|birkenes\.no|bjarkoy\.no|bjarkøy\.no|bjerkreim\.no|bjugn\.no|bodo\.no|bodø\.no|badaddja\.no|bådåddjå\.no|budejju\.no|bokn\.no|bremanger\.no|bronnoy\.no|brønnøy\.no|bygland\.no|bykle\.no|barum\.no|bærum\.no|bo\.telemark\.no|bø\.telemark\.no|bo\.nordland\.no|bø\.nordland\.no|bievat\.no|bievát\.no|bomlo\.no|bømlo\.no|batsfjord\.no|båtsfjord\.no|bahcavuotna\.no|báhcavuotna\.no|dovre\.no|drammen\.no|drangedal\.no|dyroy\.no|dyrøy\.no|donna\.no|dønna\.no|eid\.no|eidfjord\.no|eidsberg\.no|eidskog\.no|eidsvoll\.no|eigersund\.no|elverum\.no|enebakk\.no|engerdal\.no|etne\.no|etnedal\.no|evenes\.no|evenassi\.no|evenášši\.no|evje-og-hornnes\.no|farsund\.no|fauske\.no|fuossko\.no|fuoisku\.no|fedje\.no|fet\.no|finnoy\.no|finnøy\.no|fitjar\.no|fjaler\.no|fjell\.no|flakstad\.no|flatanger\.no|flekkefjord\.no|flesberg\.no|flora\.no|fla\.no|flå\.no|folldal\.no|forsand\.no|fosnes\.no|frei\.no|frogn\.no|froland\.no|frosta\.no|frana\.no|fræna\.no|froya\.no|frøya\.no|fusa\.no|fyresdal\.no|forde\.no|førde\.no|gamvik\.no|gangaviika\.no|gáŋgaviika\.no|gaular\.no|gausdal\.no|gildeskal\.no|gildeskål\.no|giske\.no|gjemnes\.no|gjerdrum\.no|gjerstad\.no|gjesdal\.no|gjovik\.no|gjøvik\.no|gloppen\.no|gol\.no|gran\.no|grane\.no|granvin\.no|gratangen\.no|grimstad\.no|grong\.no|kraanghke\.no|kråanghke\.no|grue\.no|gulen\.no|hadsel\.no|halden\.no|halsa\.no|hamar\.no|hamaroy\.no|habmer\.no|hábmer\.no|hapmir\.no|hápmir\.no|hammerfest\.no|hammarfeasta\.no|hámmárfeasta\.no|haram\.no|hareid\.no|harstad\.no|hasvik\.no|aknoluokta\.no|ákŋoluokta\.no|hattfjelldal\.no|aarborte\.no|haugesund\.no|hemne\.no|hemnes\.no|hemsedal\.no|heroy\.more-og-romsdal\.no|herøy\.møre-og-romsdal\.no|heroy\.nordland\.no|herøy\.nordland\.no|hitra\.no|hjartdal\.no|hjelmeland\.no|hobol\.no|hobøl\.no|hof\.no|hol\.no|hole\.no|holmestrand\.no|holtalen\.no|holtålen\.no|hornindal\.no|horten\.no|hurdal\.no|hurum\.no|hvaler\.no|hyllestad\.no|hagebostad\.no|hægebostad\.no|hoyanger\.no|høyanger\.no|hoylandet\.no|høylandet\.no|ha\.no|hå\.no|ibestad\.no|inderoy\.no|inderøy\.no|iveland\.no|jevnaker\.no|jondal\.no|jolster\.no|jølster\.no|karasjok\.no|karasjohka\.no|kárášjohka\.no|karlsoy\.no|galsa\.no|gálsá\.no|karmoy\.no|karmøy\.no|kautokeino\.no|guovdageaidnu\.no|klepp\.no|klabu\.no|klæbu\.no|kongsberg\.no|kongsvinger\.no|kragero\.no|kragerø\.no|kristiansand\.no|kristiansund\.no|krodsherad\.no|krødsherad\.no|kvalsund\.no|rahkkeravju\.no|ráhkkerávju\.no|kvam\.no|kvinesdal\.no|kvinnherad\.no|kviteseid\.no|kvitsoy\.no|kvitsøy\.no|kvafjord\.no|kvæfjord\.no|giehtavuoatna\.no|kvanangen\.no|kvænangen\.no|navuotna\.no|návuotna\.no|kafjord\.no|kåfjord\.no|gaivuotna\.no|gáivuotna\.no|larvik\.no|lavangen\.no|lavagis\.no|loabat\.no|loabát\.no|lebesby\.no|davvesiida\.no|leikanger\.no|leirfjord\.no|leka\.no|leksvik\.no|lenvik\.no|leangaviika\.no|leaŋgaviika\.no|lesja\.no|levanger\.no|lier\.no|lierne\.no|lillehammer\.no|lillesand\.no|lindesnes\.no|lindas\.no|lindås\.no|lom\.no|loppa\.no|lahppi\.no|láhppi\.no|lund\.no|lunner\.no|luroy\.no|lurøy\.no|luster\.no|lyngdal\.no|lyngen\.no|ivgu\.no|lardal\.no|lerdal\.no|lærdal\.no|lodingen\.no|lødingen\.no|lorenskog\.no|lørenskog\.no|loten\.no|løten\.no|malvik\.no|masoy\.no|måsøy\.no|muosat\.no|muosát\.no|mandal\.no|marker\.no|marnardal\.no|masfjorden\.no|meland\.no|meldal\.no|melhus\.no|meloy\.no|meløy\.no|meraker\.no|meråker\.no|moareke\.no|moåreke\.no|midsund\.no|midtre-gauldal\.no|modalen\.no|modum\.no|molde\.no|moskenes\.no|moss\.no|mosvik\.no|malselv\.no|målselv\.no|malatvuopmi\.no|málatvuopmi\.no|namdalseid\.no|aejrie\.no|namsos\.no|namsskogan\.no|naamesjevuemie\.no|nååmesjevuemie\.no|laakesvuemie\.no|nannestad\.no|narvik\.no|narviika\.no|naustdal\.no|nedre-eiker\.no|nes\.akershus\.no|nes\.buskerud\.no|nesna\.no|nesodden\.no|nesseby\.no|unjarga\.no|unjárga\.no|nesset\.no|nissedal\.no|nittedal\.no|nord-aurdal\.no|nord-fron\.no|nord-odal\.no|norddal\.no|nordkapp\.no|davvenjarga\.no|davvenjárga\.no|nordre-land\.no|nordreisa\.no|raisa\.no|ráisa\.no|nore-og-uvdal\.no|notodden\.no|naroy\.no|nærøy\.no|notteroy\.no|nøtterøy\.no|odda\.no|oksnes\.no|øksnes\.no|oppdal\.no|oppegard\.no|oppegård\.no|orkdal\.no|orland\.no|ørland\.no|orskog\.no|ørskog\.no|orsta\.no|ørsta\.no|os\.hedmark\.no|os\.hordaland\.no|osen\.no|osteroy\.no|osterøy\.no|ostre-toten\.no|østre-toten\.no|overhalla\.no|ovre-eiker\.no|øvre-eiker\.no|oyer\.no|øyer\.no|oygarden\.no|øygarden\.no|oystre-slidre\.no|øystre-slidre\.no|porsanger\.no|porsangu\.no|porsáŋgu\.no|porsgrunn\.no|radoy\.no|radøy\.no|rakkestad\.no|rana\.no|ruovat\.no|randaberg\.no|rauma\.no|rendalen\.no|rennebu\.no|rennesoy\.no|rennesøy\.no|rindal\.no|ringebu\.no|ringerike\.no|ringsaker\.no|rissa\.no|risor\.no|risør\.no|roan\.no|rollag\.no|rygge\.no|ralingen\.no|rælingen\.no|rodoy\.no|rødøy\.no|romskog\.no|rømskog\.no|roros\.no|røros\.no|rost\.no|røst\.no|royken\.no|røyken\.no|royrvik\.no|røyrvik\.no|rade\.no|råde\.no|salangen\.no|siellak\.no|saltdal\.no|salat\.no|sálát\.no|sálat\.no|samnanger\.no|sande\.more-og-romsdal\.no|sande\.møre-og-romsdal\.no|sande\.vestfold\.no|sandefjord\.no|sandnes\.no|sandoy\.no|sandøy\.no|sarpsborg\.no|sauda\.no|sauherad\.no|sel\.no|selbu\.no|selje\.no|seljord\.no|sigdal\.no|siljan\.no|sirdal\.no|skaun\.no|skedsmo\.no|ski\.no|skien\.no|skiptvet\.no|skjervoy\.no|skjervøy\.no|skierva\.no|skiervá\.no|skjak\.no|skjåk\.no|skodje\.no|skanland\.no|skånland\.no|skanit\.no|skánit\.no|smola\.no|smøla\.no|snillfjord\.no|snasa\.no|snåsa\.no|snoasa\.no|snaase\.no|snåase\.no|sogndal\.no|sokndal\.no|sola\.no|solund\.no|songdalen\.no|sortland\.no|spydeberg\.no|stange\.no|stavanger\.no|steigen\.no|steinkjer\.no|stjordal\.no|stjørdal\.no|stokke\.no|stor-elvdal\.no|stord\.no|stordal\.no|storfjord\.no|omasvuotna\.no|strand\.no|stranda\.no|stryn\.no|sula\.no|suldal\.no|sund\.no|sunndal\.no|surnadal\.no|sveio\.no|svelvik\.no|sykkylven\.no|sogne\.no|søgne\.no|somna\.no|sømna\.no|sondre-land\.no|søndre-land\.no|sor-aurdal\.no|sør-aurdal\.no|sor-fron\.no|sør-fron\.no|sor-odal\.no|sør-odal\.no|sor-varanger\.no|sør-varanger\.no|matta-varjjat\.no|mátta-várjjat\.no|sorfold\.no|sørfold\.no|sorreisa\.no|sørreisa\.no|sorum\.no|sørum\.no|tana\.no|deatnu\.no|time\.no|tingvoll\.no|tinn\.no|tjeldsund\.no|dielddanuorri\.no|tjome\.no|tjøme\.no|tokke\.no|tolga\.no|torsken\.no|tranoy\.no|tranøy\.no|tromso\.no|tromsø\.no|tromsa\.no|romsa\.no|trondheim\.no|troandin\.no|trysil\.no|trana\.no|træna\.no|trogstad\.no|trøgstad\.no|tvedestrand\.no|tydal\.no|tynset\.no|tysfjord\.no|divtasvuodna\.no|divttasvuotna\.no|tysnes\.no|tysvar\.no|tysvær\.no|tonsberg\.no|tønsberg\.no|ullensaker\.no|ullensvang\.no|ulvik\.no|utsira\.no|vadso\.no|vadsø\.no|cahcesuolo\.no|čáhcesuolo\.no|vaksdal\.no|valle\.no|vang\.no|vanylven\.no|vardo\.no|vardø\.no|varggat\.no|várggát\.no|vefsn\.no|vaapste\.no|vega\.no|vegarshei\.no|vegårshei\.no|vennesla\.no|verdal\.no|verran\.no|vestby\.no|vestnes\.no|vestre-slidre\.no|vestre-toten\.no|vestvagoy\.no|vestvågøy\.no|vevelstad\.no|vik\.no|vikna\.no|vindafjord\.no|volda\.no|voss\.no|varoy\.no|værøy\.no|vagan\.no|vågan\.no|voagat\.no|vagsoy\.no|vågsøy\.no|vaga\.no|vågå\.no|valer\.ostfold\.no|våler\.østfold\.no|valer\.hedmark\.no|våler\.hedmark\.no|[^.]+\.np|nr|biz\.nr|info\.nr|gov\.nr|edu\.nr|org\.nr|net\.nr|com\.nr|nu|nz|ac\.nz|co\.nz|cri\.nz|geek\.nz|gen\.nz|govt\.nz|health\.nz|iwi\.nz|kiwi\.nz|maori\.nz|mil\.nz|māori\.nz|net\.nz|org\.nz|parliament\.nz|school\.nz|om|co\.om|com\.om|edu\.om|gov\.om|med\.om|museum\.om|net\.om|org\.om|pro\.om|onion|org|pa|ac\.pa|gob\.pa|com\.pa|org\.pa|sld\.pa|edu\.pa|net\.pa|ing\.pa|abo\.pa|med\.pa|nom\.pa|pe|edu\.pe|gob\.pe|nom\.pe|mil\.pe|org\.pe|com\.pe|net\.pe|pf|com\.pf|org\.pf|edu\.pf|[^.]+\.pg|ph|com\.ph|net\.ph|org\.ph|gov\.ph|edu\.ph|ngo\.ph|mil\.ph|i\.ph|pk|com\.pk|net\.pk|edu\.pk|org\.pk|fam\.pk|biz\.pk|web\.pk|gov\.pk|gob\.pk|gok\.pk|gon\.pk|gop\.pk|gos\.pk|info\.pk|pl|com\.pl|net\.pl|org\.pl|aid\.pl|agro\.pl|atm\.pl|auto\.pl|biz\.pl|edu\.pl|gmina\.pl|gsm\.pl|info\.pl|mail\.pl|miasta\.pl|media\.pl|mil\.pl|nieruchomosci\.pl|nom\.pl|pc\.pl|powiat\.pl|priv\.pl|realestate\.pl|rel\.pl|sex\.pl|shop\.pl|sklep\.pl|sos\.pl|szkola\.pl|targi\.pl|tm\.pl|tourism\.pl|travel\.pl|turystyka\.pl|gov\.pl|ap\.gov\.pl|ic\.gov\.pl|is\.gov\.pl|us\.gov\.pl|kmpsp\.gov\.pl|kppsp\.gov\.pl|kwpsp\.gov\.pl|psp\.gov\.pl|wskr\.gov\.pl|kwp\.gov\.pl|mw\.gov\.pl|ug\.gov\.pl|um\.gov\.pl|umig\.gov\.pl|ugim\.gov\.pl|upow\.gov\.pl|uw\.gov\.pl|starostwo\.gov\.pl|pa\.gov\.pl|po\.gov\.pl|psse\.gov\.pl|pup\.gov\.pl|rzgw\.gov\.pl|sa\.gov\.pl|so\.gov\.pl|sr\.gov\.pl|wsa\.gov\.pl|sko\.gov\.pl|uzs\.gov\.pl|wiih\.gov\.pl|winb\.gov\.pl|pinb\.gov\.pl|wios\.gov\.pl|witd\.gov\.pl|wzmiuw\.gov\.pl|piw\.gov\.pl|wiw\.gov\.pl|griw\.gov\.pl|wif\.gov\.pl|oum\.gov\.pl|sdn\.gov\.pl|zp\.gov\.pl|uppo\.gov\.pl|mup\.gov\.pl|wuoz\.gov\.pl|konsulat\.gov\.pl|oirm\.gov\.pl|augustow\.pl|babia-gora\.pl|bedzin\.pl|beskidy\.pl|bialowieza\.pl|bialystok\.pl|bielawa\.pl|bieszczady\.pl|boleslawiec\.pl|bydgoszcz\.pl|bytom\.pl|cieszyn\.pl|czeladz\.pl|czest\.pl|dlugoleka\.pl|elblag\.pl|elk\.pl|glogow\.pl|gniezno\.pl|gorlice\.pl|grajewo\.pl|ilawa\.pl|jaworzno\.pl|jelenia-gora\.pl|jgora\.pl|kalisz\.pl|kazimierz-dolny\.pl|karpacz\.pl|kartuzy\.pl|kaszuby\.pl|katowice\.pl|kepno\.pl|ketrzyn\.pl|klodzko\.pl|kobierzyce\.pl|kolobrzeg\.pl|konin\.pl|konskowola\.pl|kutno\.pl|lapy\.pl|lebork\.pl|legnica\.pl|lezajsk\.pl|limanowa\.pl|lomza\.pl|lowicz\.pl|lubin\.pl|lukow\.pl|malbork\.pl|malopolska\.pl|mazowsze\.pl|mazury\.pl|mielec\.pl|mielno\.pl|mragowo\.pl|naklo\.pl|nowaruda\.pl|nysa\.pl|olawa\.pl|olecko\.pl|olkusz\.pl|olsztyn\.pl|opoczno\.pl|opole\.pl|ostroda\.pl|ostroleka\.pl|ostrowiec\.pl|ostrowwlkp\.pl|pila\.pl|pisz\.pl|podhale\.pl|podlasie\.pl|polkowice\.pl|pomorze\.pl|pomorskie\.pl|prochowice\.pl|pruszkow\.pl|przeworsk\.pl|pulawy\.pl|radom\.pl|rawa-maz\.pl|rybnik\.pl|rzeszow\.pl|sanok\.pl|sejny\.pl|slask\.pl|slupsk\.pl|sosnowiec\.pl|stalowa-wola\.pl|skoczow\.pl|starachowice\.pl|stargard\.pl|suwalki\.pl|swidnica\.pl|swiebodzin\.pl|swinoujscie\.pl|szczecin\.pl|szczytno\.pl|tarnobrzeg\.pl|tgory\.pl|turek\.pl|tychy\.pl|ustka\.pl|walbrzych\.pl|warmia\.pl|warszawa\.pl|waw\.pl|wegrow\.pl|wielun\.pl|wlocl\.pl|wloclawek\.pl|wodzislaw\.pl|wolomin\.pl|wroclaw\.pl|zachpomor\.pl|zagan\.pl|zarow\.pl|zgora\.pl|zgorzelec\.pl|pm|pn|gov\.pn|co\.pn|org\.pn|edu\.pn|net\.pn|post|pr|com\.pr|net\.pr|org\.pr|gov\.pr|edu\.pr|isla\.pr|pro\.pr|biz\.pr|info\.pr|name\.pr|est\.pr|prof\.pr|ac\.pr|pro|aaa\.pro|aca\.pro|acct\.pro|avocat\.pro|bar\.pro|cpa\.pro|eng\.pro|jur\.pro|law\.pro|med\.pro|recht\.pro|ps|edu\.ps|gov\.ps|sec\.ps|plo\.ps|com\.ps|org\.ps|net\.ps|pt|net\.pt|gov\.pt|org\.pt|edu\.pt|int\.pt|publ\.pt|com\.pt|nome\.pt|pw|co\.pw|ne\.pw|or\.pw|ed\.pw|go\.pw|belau\.pw|py|com\.py|coop\.py|edu\.py|gov\.py|mil\.py|net\.py|org\.py|qa|com\.qa|edu\.qa|gov\.qa|mil\.qa|name\.qa|net\.qa|org\.qa|sch\.qa|re|asso\.re|com\.re|nom\.re|ro|arts\.ro|com\.ro|firm\.ro|info\.ro|nom\.ro|nt\.ro|org\.ro|rec\.ro|store\.ro|tm\.ro|www\.ro|rs|ac\.rs|co\.rs|edu\.rs|gov\.rs|in\.rs|org\.rs|ru|ac\.ru|edu\.ru|gov\.ru|int\.ru|mil\.ru|test\.ru|rw|gov\.rw|net\.rw|edu\.rw|ac\.rw|com\.rw|co\.rw|int\.rw|mil\.rw|gouv\.rw|sa|com\.sa|net\.sa|org\.sa|gov\.sa|med\.sa|pub\.sa|edu\.sa|sch\.sa|sb|com\.sb|edu\.sb|gov\.sb|net\.sb|org\.sb|sc|com\.sc|gov\.sc|net\.sc|org\.sc|edu\.sc|sd|com\.sd|net\.sd|org\.sd|edu\.sd|med\.sd|tv\.sd|gov\.sd|info\.sd|se|a\.se|ac\.se|b\.se|bd\.se|brand\.se|c\.se|d\.se|e\.se|f\.se|fh\.se|fhsk\.se|fhv\.se|g\.se|h\.se|i\.se|k\.se|komforb\.se|kommunalforbund\.se|komvux\.se|l\.se|lanbib\.se|m\.se|n\.se|naturbruksgymn\.se|o\.se|org\.se|p\.se|parti\.se|pp\.se|press\.se|r\.se|s\.se|t\.se|tm\.se|u\.se|w\.se|x\.se|y\.se|z\.se|sg|com\.sg|net\.sg|org\.sg|gov\.sg|edu\.sg|per\.sg|sh|com\.sh|net\.sh|gov\.sh|org\.sh|mil\.sh|si|sj|sk|sl|com\.sl|net\.sl|edu\.sl|gov\.sl|org\.sl|sm|sn|art\.sn|com\.sn|edu\.sn|gouv\.sn|org\.sn|perso\.sn|univ\.sn|so|com\.so|net\.so|org\.so|sr|st|co\.st|com\.st|consulado\.st|edu\.st|embaixada\.st|gov\.st|mil\.st|net\.st|org\.st|principe\.st|saotome\.st|store\.st|su|sv|com\.sv|edu\.sv|gob\.sv|org\.sv|red\.sv|sx|gov\.sx|sy|edu\.sy|gov\.sy|net\.sy|mil\.sy|com\.sy|org\.sy|sz|co\.sz|ac\.sz|org\.sz|tc|td|tel|tf|tg|th|ac\.th|co\.th|go\.th|in\.th|mi\.th|net\.th|or\.th|tj|ac\.tj|biz\.tj|co\.tj|com\.tj|edu\.tj|go\.tj|gov\.tj|int\.tj|mil\.tj|name\.tj|net\.tj|nic\.tj|org\.tj|test\.tj|web\.tj|tk|tl|gov\.tl|tm|com\.tm|co\.tm|org\.tm|net\.tm|nom\.tm|gov\.tm|mil\.tm|edu\.tm|tn|com\.tn|ens\.tn|fin\.tn|gov\.tn|ind\.tn|intl\.tn|nat\.tn|net\.tn|org\.tn|info\.tn|perso\.tn|tourism\.tn|edunet\.tn|rnrt\.tn|rns\.tn|rnu\.tn|mincom\.tn|agrinet\.tn|defense\.tn|turen\.tn|to|com\.to|gov\.to|net\.to|org\.to|edu\.to|mil\.to|tr|com\.tr|info\.tr|biz\.tr|net\.tr|org\.tr|web\.tr|gen\.tr|tv\.tr|av\.tr|dr\.tr|bbs\.tr|name\.tr|tel\.tr|gov\.tr|bel\.tr|pol\.tr|mil\.tr|k12\.tr|edu\.tr|kep\.tr|nc\.tr|gov\.nc\.tr|travel|tt|co\.tt|com\.tt|org\.tt|net\.tt|biz\.tt|info\.tt|pro\.tt|int\.tt|coop\.tt|jobs\.tt|mobi\.tt|travel\.tt|museum\.tt|aero\.tt|name\.tt|gov\.tt|edu\.tt|tv|tw|edu\.tw|gov\.tw|mil\.tw|com\.tw|net\.tw|org\.tw|idv\.tw|game\.tw|ebiz\.tw|club\.tw|網路\.tw|組織\.tw|商業\.tw|tz|ac\.tz|co\.tz|go\.tz|hotel\.tz|info\.tz|me\.tz|mil\.tz|mobi\.tz|ne\.tz|or\.tz|sc\.tz|tv\.tz|ua|com\.ua|edu\.ua|gov\.ua|in\.ua|net\.ua|org\.ua|cherkassy\.ua|cherkasy\.ua|chernigov\.ua|chernihiv\.ua|chernivtsi\.ua|chernovtsy\.ua|ck\.ua|cn\.ua|cr\.ua|crimea\.ua|cv\.ua|dn\.ua|dnepropetrovsk\.ua|dnipropetrovsk\.ua|dominic\.ua|donetsk\.ua|dp\.ua|if\.ua|ivano-frankivsk\.ua|kh\.ua|kharkiv\.ua|kharkov\.ua|kherson\.ua|khmelnitskiy\.ua|khmelnytskyi\.ua|kiev\.ua|kirovograd\.ua|km\.ua|kr\.ua|krym\.ua|ks\.ua|kv\.ua|kyiv\.ua|lg\.ua|lt\.ua|lugansk\.ua|lutsk\.ua|lv\.ua|lviv\.ua|mk\.ua|mykolaiv\.ua|nikolaev\.ua|od\.ua|odesa\.ua|odessa\.ua|pl\.ua|poltava\.ua|rivne\.ua|rovno\.ua|rv\.ua|sb\.ua|sebastopol\.ua|sevastopol\.ua|sm\.ua|sumy\.ua|te\.ua|ternopil\.ua|uz\.ua|uzhgorod\.ua|vinnica\.ua|vinnytsia\.ua|vn\.ua|volyn\.ua|yalta\.ua|zaporizhzhe\.ua|zaporizhzhia\.ua|zhitomir\.ua|zhytomyr\.ua|zp\.ua|zt\.ua|ug|co\.ug|or\.ug|ac\.ug|sc\.ug|go\.ug|ne\.ug|com\.ug|org\.ug|uk|ac\.uk|co\.uk|gov\.uk|ltd\.uk|me\.uk|net\.uk|nhs\.uk|org\.uk|plc\.uk|police\.uk|[^.]+\.sch\.uk|us|dni\.us|fed\.us|isa\.us|kids\.us|nsn\.us|ak\.us|al\.us|ar\.us|as\.us|az\.us|ca\.us|co\.us|ct\.us|dc\.us|de\.us|fl\.us|ga\.us|gu\.us|hi\.us|ia\.us|id\.us|il\.us|in\.us|ks\.us|ky\.us|la\.us|ma\.us|md\.us|me\.us|mi\.us|mn\.us|mo\.us|ms\.us|mt\.us|nc\.us|nd\.us|ne\.us|nh\.us|nj\.us|nm\.us|nv\.us|ny\.us|oh\.us|ok\.us|or\.us|pa\.us|pr\.us|ri\.us|sc\.us|sd\.us|tn\.us|tx\.us|ut\.us|vi\.us|vt\.us|va\.us|wa\.us|wi\.us|wv\.us|wy\.us|k12\.ak\.us|k12\.al\.us|k12\.ar\.us|k12\.as\.us|k12\.az\.us|k12\.ca\.us|k12\.co\.us|k12\.ct\.us|k12\.dc\.us|k12\.de\.us|k12\.fl\.us|k12\.ga\.us|k12\.gu\.us|k12\.ia\.us|k12\.id\.us|k12\.il\.us|k12\.in\.us|k12\.ks\.us|k12\.ky\.us|k12\.la\.us|k12\.ma\.us|k12\.md\.us|k12\.me\.us|k12\.mi\.us|k12\.mn\.us|k12\.mo\.us|k12\.ms\.us|k12\.mt\.us|k12\.nc\.us|k12\.ne\.us|k12\.nh\.us|k12\.nj\.us|k12\.nm\.us|k12\.nv\.us|k12\.ny\.us|k12\.oh\.us|k12\.ok\.us|k12\.or\.us|k12\.pa\.us|k12\.pr\.us|k12\.ri\.us|k12\.sc\.us|k12\.tn\.us|k12\.tx\.us|k12\.ut\.us|k12\.vi\.us|k12\.vt\.us|k12\.va\.us|k12\.wa\.us|k12\.wi\.us|k12\.wy\.us|cc\.ak\.us|cc\.al\.us|cc\.ar\.us|cc\.as\.us|cc\.az\.us|cc\.ca\.us|cc\.co\.us|cc\.ct\.us|cc\.dc\.us|cc\.de\.us|cc\.fl\.us|cc\.ga\.us|cc\.gu\.us|cc\.hi\.us|cc\.ia\.us|cc\.id\.us|cc\.il\.us|cc\.in\.us|cc\.ks\.us|cc\.ky\.us|cc\.la\.us|cc\.ma\.us|cc\.md\.us|cc\.me\.us|cc\.mi\.us|cc\.mn\.us|cc\.mo\.us|cc\.ms\.us|cc\.mt\.us|cc\.nc\.us|cc\.nd\.us|cc\.ne\.us|cc\.nh\.us|cc\.nj\.us|cc\.nm\.us|cc\.nv\.us|cc\.ny\.us|cc\.oh\.us|cc\.ok\.us|cc\.or\.us|cc\.pa\.us|cc\.pr\.us|cc\.ri\.us|cc\.sc\.us|cc\.sd\.us|cc\.tn\.us|cc\.tx\.us|cc\.ut\.us|cc\.vi\.us|cc\.vt\.us|cc\.va\.us|cc\.wa\.us|cc\.wi\.us|cc\.wv\.us|cc\.wy\.us|lib\.ak\.us|lib\.al\.us|lib\.ar\.us|lib\.as\.us|lib\.az\.us|lib\.ca\.us|lib\.co\.us|lib\.ct\.us|lib\.dc\.us|lib\.fl\.us|lib\.ga\.us|lib\.gu\.us|lib\.hi\.us|lib\.ia\.us|lib\.id\.us|lib\.il\.us|lib\.in\.us|lib\.ks\.us|lib\.ky\.us|lib\.la\.us|lib\.ma\.us|lib\.md\.us|lib\.me\.us|lib\.mi\.us|lib\.mn\.us|lib\.mo\.us|lib\.ms\.us|lib\.mt\.us|lib\.nc\.us|lib\.nd\.us|lib\.ne\.us|lib\.nh\.us|lib\.nj\.us|lib\.nm\.us|lib\.nv\.us|lib\.ny\.us|lib\.oh\.us|lib\.ok\.us|lib\.or\.us|lib\.pa\.us|lib\.pr\.us|lib\.ri\.us|lib\.sc\.us|lib\.sd\.us|lib\.tn\.us|lib\.tx\.us|lib\.ut\.us|lib\.vi\.us|lib\.vt\.us|lib\.va\.us|lib\.wa\.us|lib\.wi\.us|lib\.wy\.us|pvt\.k12\.ma\.us|chtr\.k12\.ma\.us|paroch\.k12\.ma\.us|uy|com\.uy|edu\.uy|gub\.uy|mil\.uy|net\.uy|org\.uy|uz|co\.uz|com\.uz|net\.uz|org\.uz|va|vc|com\.vc|net\.vc|org\.vc|gov\.vc|mil\.vc|edu\.vc|ve|arts\.ve|co\.ve|com\.ve|e12\.ve|edu\.ve|firm\.ve|gob\.ve|gov\.ve|info\.ve|int\.ve|mil\.ve|net\.ve|org\.ve|rec\.ve|store\.ve|tec\.ve|web\.ve|vg|vi|co\.vi|com\.vi|k12\.vi|net\.vi|org\.vi|vn|com\.vn|net\.vn|org\.vn|edu\.vn|gov\.vn|int\.vn|ac\.vn|biz\.vn|info\.vn|name\.vn|pro\.vn|health\.vn|vu|com\.vu|edu\.vu|net\.vu|org\.vu|wf|ws|com\.ws|net\.ws|org\.ws|gov\.ws|edu\.ws|yt|امارات|հայ|বাংলা|бел|中国|中國|الجزائر|مصر|ею|გე|ελ|香港|भारत|بھارت|భారత్|ભારત|ਭਾਰਤ|ভারত|இந்தியா|ایران|ايران|عراق|الاردن|한국|қаз|ලංකා|இலங்கை|المغرب|мкд|мон|澳門|澳门|مليسيا|عمان|پاکستان|پاكستان|فلسطين|срб|пр\.срб|орг\.срб|обр\.срб|од\.срб|упр\.срб|ак\.срб|рф|قطر|السعودية|السعودیة|السعودیۃ|السعوديه|سودان|新加坡|சிங்கப்பூர்|سورية|سوريا|ไทย|تونس|台灣|台湾|臺灣|укр|اليمن|xxx|[^.]+\.ye|ac\.za|agric\.za|alt\.za|co\.za|edu\.za|gov\.za|grondar\.za|law\.za|mil\.za|net\.za|ngo\.za|nis\.za|nom\.za|org\.za|school\.za|tm\.za|web\.za|zm|ac\.zm|biz\.zm|co\.zm|com\.zm|edu\.zm|gov\.zm|info\.zm|mil\.zm|net\.zm|org\.zm|sch\.zm|[^.]+\.zw|aaa|aarp|abarth|abb|abbott|abbvie|abc|able|abogado|abudhabi|academy|accenture|accountant|accountants|aco|active|actor|adac|ads|adult|aeg|aetna|afamilycompany|afl|africa|agakhan|agency|aig|aigo|airbus|airforce|airtel|akdn|alfaromeo|alibaba|alipay|allfinanz|allstate|ally|alsace|alstom|americanexpress|americanfamily|amex|amfam|amica|amsterdam|analytics|android|anquan|anz|aol|apartments|app|apple|aquarelle|arab|aramco|archi|army|art|arte|asda|associates|athleta|attorney|auction|audi|audible|audio|auspost|author|auto|autos|avianca|aws|axa|azure|baby|baidu|banamex|bananarepublic|band|bank|bar|barcelona|barclaycard|barclays|barefoot|bargains|baseball|basketball|bauhaus|bayern|bbc|bbt|bbva|bcg|bcn|beats|beauty|beer|bentley|berlin|best|bestbuy|bet|bharti|bible|bid|bike|bing|bingo|bio|black|blackfriday|blanco|blockbuster|blog|bloomberg|blue|bms|bmw|bnl|bnpparibas|boats|boehringer|bofa|bom|bond|boo|book|booking|boots|bosch|bostik|boston|bot|boutique|box|bradesco|bridgestone|broadway|broker|brother|brussels|budapest|bugatti|build|builders|business|buy|buzz|bzh|cab|cafe|cal|call|calvinklein|cam|camera|camp|cancerresearch|canon|capetown|capital|capitalone|car|caravan|cards|care|career|careers|cars|cartier|casa|case|caseih|cash|casino|catering|catholic|cba|cbn|cbre|cbs|ceb|center|ceo|cern|cfa|cfd|chanel|channel|chase|chat|cheap|chintai|chloe|christmas|chrome|chrysler|church|cipriani|circle|cisco|citadel|citi|citic|city|cityeats|claims|cleaning|click|clinic|clinique|clothing|cloud|club|clubmed|coach|codes|coffee|college|cologne|comcast|commbank|community|company|compare|computer|comsec|condos|construction|consulting|contact|contractors|cooking|cookingchannel|cool|corsica|country|coupon|coupons|courses|credit|creditcard|creditunion|cricket|crown|crs|cruise|cruises|csc|cuisinella|cymru|cyou|dabur|dad|dance|data|date|dating|datsun|day|dclk|dds|deal|dealer|deals|degree|delivery|dell|deloitte|delta|democrat|dental|dentist|desi|design|dev|dhl|diamonds|diet|digital|direct|directory|discount|discover|dish|diy|dnp|docs|doctor|dodge|dog|doha|domains|dot|download|drive|dtv|dubai|duck|dunlop|duns|dupont|durban|dvag|dvr|dwg|earth|eat|eco|edeka|education|email|emerck|energy|engineer|engineering|enterprises|epost|epson|equipment|ericsson|erni|esq|estate|esurance|etisalat|eurovision|eus|events|everbank|exchange|expert|exposed|express|extraspace|fage|fail|fairwinds|faith|family|fan|fans|farm|farmers|fashion|fast|fedex|feedback|ferrari|ferrero|fiat|fidelity|fido|film|final|finance|financial|fire|firestone|firmdale|fish|fishing|fit|fitness|flickr|flights|flir|florist|flowers|fly|foo|food|foodnetwork|football|ford|forex|forsale|forum|foundation|fox|free|fresenius|frl|frogans|frontdoor|frontier|ftr|fujitsu|fujixerox|fun|fund|furniture|futbol|fyi|gal|gallery|gallo|gallup|game|games|gap|garden|gbiz|gdn|gea|gent|genting|george|ggee|gift|gifts|gives|giving|glade|glass|gle|global|globo|gmail|gmbh|gmo|gmx|godaddy|gold|goldpoint|golf|goo|goodhands|goodyear|goog|google|gop|got|grainger|graphics|gratis|green|gripe|grocery|group|guardian|gucci|guge|guide|guitars|guru|hair|hamburg|hangout|haus|hbo|hdfc|hdfcbank|health|healthcare|help|helsinki|here|hermes|hgtv|hiphop|hisamitsu|hitachi|hiv|hkt|hockey|holdings|holiday|homedepot|homegoods|homes|homesense|honda|honeywell|horse|hospital|host|hosting|hot|hoteles|hotels|hotmail|house|how|hsbc|htc|hughes|hyatt|hyundai|ibm|icbc|ice|icu|ieee|ifm|iinet|ikano|imamat|imdb|immo|immobilien|industries|infiniti|ing|ink|institute|insurance|insure|intel|international|intuit|investments|ipiranga|irish|iselect|ismaili|ist|istanbul|itau|itv|iveco|iwc|jaguar|java|jcb|jcp|jeep|jetzt|jewelry|jio|jlc|jll|jmp|jnj|joburg|jot|joy|jpmorgan|jprs|juegos|juniper|kaufen|kddi|kerryhotels|kerrylogistics|kerryproperties|kfh|kia|kim|kinder|kindle|kitchen|kiwi|koeln|komatsu|kosher|kpmg|kpn|krd|kred|kuokgroup|kyoto|lacaixa|ladbrokes|lamborghini|lamer|lancaster|lancia|lancome|land|landrover|lanxess|lasalle|lat|latino|latrobe|law|lawyer|lds|lease|leclerc|lefrak|legal|lego|lexus|lgbt|liaison|lidl|life|lifeinsurance|lifestyle|lighting|like|lilly|limited|limo|lincoln|linde|link|lipsy|live|living|lixil|loan|loans|locker|locus|loft|lol|london|lotte|lotto|love|lpl|lplfinancial|ltd|ltda|lundbeck|lupin|luxe|luxury|macys|madrid|maif|maison|makeup|man|management|mango|map|market|marketing|markets|marriott|marshalls|maserati|mattel|mba|mcd|mcdonalds|mckinsey|med|media|meet|melbourne|meme|memorial|men|menu|meo|merckmsd|metlife|miami|microsoft|mini|mint|mit|mitsubishi|mlb|mls|mma|mobile|mobily|moda|moe|moi|mom|monash|money|monster|montblanc|mopar|mormon|mortgage|moscow|moto|motorcycles|mov|movie|movistar|msd|mtn|mtpc|mtr|mutual|mutuelle|nab|nadex|nagoya|nationwide|natura|navy|nba|nec|netbank|netflix|network|neustar|new|newholland|news|next|nextdirect|nexus|nfl|ngo|nhk|nico|nike|nikon|ninja|nissan|nissay|nokia|northwesternmutual|norton|now|nowruz|nowtv|nra|nrw|ntt|nyc|obi|observer|off|office|okinawa|olayan|olayangroup|oldnavy|ollo|omega|one|ong|onl|online|onyourside|ooo|open|oracle|orange|organic|orientexpress|origins|osaka|otsuka|ott|ovh|page|pamperedchef|panasonic|panerai|paris|pars|partners|parts|party|passagens|pay|pccw|pet|pfizer|pharmacy|phd|philips|phone|photo|photography|photos|physio|piaget|pics|pictet|pictures|pid|pin|ping|pink|pioneer|pizza|place|play|playstation|plumbing|plus|pnc|pohl|poker|politie|porn|pramerica|praxi|press|prime|prod|productions|prof|progressive|promo|properties|property|protection|pru|prudential|pub|pwc|qpon|quebec|quest|qvc|racing|radio|raid|read|realestate|realtor|realty|recipes|red|redstone|redumbrella|rehab|reise|reisen|reit|reliance|ren|rent|rentals|repair|report|republican|rest|restaurant|review|reviews|rexroth|rich|richardli|ricoh|rightathome|ril|rio|rip|rmit|rocher|rocks|rodeo|rogers|room|rsvp|ruhr|run|rwe|ryukyu|saarland|safe|safety|sakura|sale|salon|samsclub|samsung|sandvik|sandvikcoromant|sanofi|sap|sapo|sarl|sas|save|saxo|sbi|sbs|sca|scb|schaeffler|schmidt|scholarships|school|schule|schwarz|science|scjohnson|scor|scot|search|seat|secure|security|seek|select|sener|services|ses|seven|sew|sex|sexy|sfr|shangrila|sharp|shaw|shell|shia|shiksha|shoes|shop|shopping|shouji|show|showtime|shriram|silk|sina|singles|site|ski|skin|sky|skype|sling|smart|smile|sncf|soccer|social|softbank|software|sohu|solar|solutions|song|sony|soy|space|spiegel|spot|spreadbetting|srl|srt|stada|staples|star|starhub|statebank|statefarm|statoil|stc|stcgroup|stockholm|storage|store|stream|studio|study|style|sucks|supplies|supply|support|surf|surgery|suzuki|swatch|swiftcover|swiss|sydney|symantec|systems|tab|taipei|talk|taobao|target|tatamotors|tatar|tattoo|tax|taxi|tci|tdk|team|tech|technology|telecity|telefonica|temasek|tennis|teva|thd|theater|theatre|theguardian|tiaa|tickets|tienda|tiffany|tips|tires|tirol|tjmaxx|tjx|tkmaxx|tmall|today|tokyo|tools|top|toray|toshiba|total|tours|town|toyota|toys|trade|trading|training|travelchannel|travelers|travelersinsurance|trust|trv|tube|tui|tunes|tushu|tvs|ubank|ubs|uconnect|unicom|university|uno|uol|ups|vacations|vana|vanguard|vegas|ventures|verisign|versicherung|vet|viajes|video|vig|viking|villas|vin|vip|virgin|visa|vision|vista|vistaprint|viva|vivo|vlaanderen|vodka|volkswagen|volvo|vote|voting|voto|voyage|vuelos|wales|walmart|walter|wang|wanggou|warman|watch|watches|weather|weatherchannel|webcam|weber|website|wed|wedding|weibo|weir|whoswho|wien|wiki|williamhill|win|windows|wine|winners|wme|wolterskluwer|woodside|work|works|world|wow|wtc|wtf|xbox|xerox|xfinity|xihuan|xin|कॉम|セール|佛山|慈善|集团|在线|大众汽车|点看|คอม|八卦|موقع|一号店|公益|公司|香格里拉|网站|移动|我爱你|москва|католик|онлайн|сайт|联通|קום|时尚|微博|淡马锡|ファッション|орг|नेट|ストア|삼성|商标|商店|商城|дети|ポイント|新闻|工行|家電|كوم|中文网|中信|娱乐|谷歌|電訊盈科|购物|クラウド|通販|网店|संगठन|餐厅|网络|ком|诺基亚|食品|飞利浦|手表|手机|ارامكو|العليان|اتصالات|بازار|موبايلي|ابوظبي|كاثوليك|همراه|닷컴|政府|شبكة|بيتك|عرب|机构|组织机构|健康|рус|珠宝|大拿|みんな|グーグル|世界|書籍|网址|닷넷|コム|天主教|游戏|vermögensberater|vermögensberatung|企业|信息|嘉里大酒店|嘉里|广东|政务|xperia|xyz|yachts|yahoo|yamaxun|yandex|yodobashi|yoga|yokohama|you|youtube|yun|zappos|zara|zero|zip|zippo|zone|zuerich|$beep\.pl|[^.]+\.compute\.estate|[^.]+\.alces\.network|[^.]+\.alwaysdata\.net|cloudfront\.net|[^.]+\.compute\.amazonaws\.com|[^.]+\.compute-1\.amazonaws\.com|[^.]+\.compute\.amazonaws\.com\.cn|us-east-1\.amazonaws\.com|elasticbeanstalk\.cn-north-1\.amazonaws\.com\.cn|[^.]+\.elasticbeanstalk\.com|[^.]+\.elb\.amazonaws\.com|[^.]+\.elb\.amazonaws\.com\.cn|s3\.amazonaws\.com|s3-ap-northeast-1\.amazonaws\.com|s3-ap-northeast-2\.amazonaws\.com|s3-ap-south-1\.amazonaws\.com|s3-ap-southeast-1\.amazonaws\.com|s3-ap-southeast-2\.amazonaws\.com|s3-ca-central-1\.amazonaws\.com|s3-eu-central-1\.amazonaws\.com|s3-eu-west-1\.amazonaws\.com|s3-eu-west-2\.amazonaws\.com|s3-external-1\.amazonaws\.com|s3-fips-us-gov-west-1\.amazonaws\.com|s3-sa-east-1\.amazonaws\.com|s3-us-gov-west-1\.amazonaws\.com|s3-us-east-2\.amazonaws\.com|s3-us-west-1\.amazonaws\.com|s3-us-west-2\.amazonaws\.com|s3\.ap-northeast-2\.amazonaws\.com|s3\.ap-south-1\.amazonaws\.com|s3\.cn-north-1\.amazonaws\.com\.cn|s3\.ca-central-1\.amazonaws\.com|s3\.eu-central-1\.amazonaws\.com|s3\.eu-west-2\.amazonaws\.com|s3\.us-east-2\.amazonaws\.com|s3\.dualstack\.ap-northeast-1\.amazonaws\.com|s3\.dualstack\.ap-northeast-2\.amazonaws\.com|s3\.dualstack\.ap-south-1\.amazonaws\.com|s3\.dualstack\.ap-southeast-1\.amazonaws\.com|s3\.dualstack\.ap-southeast-2\.amazonaws\.com|s3\.dualstack\.ca-central-1\.amazonaws\.com|s3\.dualstack\.eu-central-1\.amazonaws\.com|s3\.dualstack\.eu-west-1\.amazonaws\.com|s3\.dualstack\.eu-west-2\.amazonaws\.com|s3\.dualstack\.sa-east-1\.amazonaws\.com|s3\.dualstack\.us-east-1\.amazonaws\.com|s3\.dualstack\.us-east-2\.amazonaws\.com|s3-website-us-east-1\.amazonaws\.com|s3-website-us-west-1\.amazonaws\.com|s3-website-us-west-2\.amazonaws\.com|s3-website-ap-northeast-1\.amazonaws\.com|s3-website-ap-southeast-1\.amazonaws\.com|s3-website-ap-southeast-2\.amazonaws\.com|s3-website-eu-west-1\.amazonaws\.com|s3-website-sa-east-1\.amazonaws\.com|s3-website\.ap-northeast-2\.amazonaws\.com|s3-website\.ap-south-1\.amazonaws\.com|s3-website\.ca-central-1\.amazonaws\.com|s3-website\.eu-central-1\.amazonaws\.com|s3-website\.eu-west-2\.amazonaws\.com|s3-website\.us-east-2\.amazonaws\.com|t3l3p0rt\.net|tele\.amune\.org|on-aptible\.com|user\.party\.eus|pimienta\.org|poivron\.org|potager\.org|sweetpepper\.org|myasustor\.com|myfritz\.net|backplaneapp\.io|betainabox\.com|bnr\.la|boxfuse\.io|browsersafetymark\.io|mycd\.eu|ae\.org|ar\.com|br\.com|cn\.com|com\.de|com\.se|de\.com|eu\.com|gb\.com|gb\.net|hu\.com|hu\.net|jp\.net|jpn\.com|kr\.com|mex\.com|no\.com|qc\.com|ru\.com|sa\.com|se\.com|se\.net|uk\.com|uk\.net|us\.com|uy\.com|za\.bz|za\.com|africa\.com|gr\.com|in\.net|us\.org|co\.com|c\.la|certmgr\.org|xenapponazure\.com|virtueeldomein\.nl|cloudcontrolled\.com|cloudcontrolapp\.com|co\.ca|co\.cz|c\.cdn77\.org|cdn77-ssl\.net|r\.cdn77\.net|rsc\.cdn77\.org|ssl\.origin\.cdn77-secure\.org|cloudns\.asia|cloudns\.biz|cloudns\.club|cloudns\.cc|cloudns\.eu|cloudns\.in|cloudns\.info|cloudns\.org|cloudns\.pro|cloudns\.pw|cloudns\.us|co\.nl|co\.no|[^.]+\.platform\.sh|dyn\.cosidns\.de|dynamisches-dns\.de|dnsupdater\.de|internet-dns\.de|l-o-g-i-n\.de|dynamic-dns\.info|feste-ip\.net|knx-server\.net|static-access\.net|realm\.cz|[^.]+\.cryptonomic\.net|cupcake\.is|cyon\.link|cyon\.site|daplie\.me|biz\.dk|co\.dk|firm\.dk|reg\.dk|store\.dk|dedyn\.io|dnshome\.de|dreamhosters\.com|mydrobo\.com|drud\.io|drud\.us|duckdns\.org|dy\.fi|tunk\.org|dyndns-at-home\.com|dyndns-at-work\.com|dyndns-blog\.com|dyndns-free\.com|dyndns-home\.com|dyndns-ip\.com|dyndns-mail\.com|dyndns-office\.com|dyndns-pics\.com|dyndns-remote\.com|dyndns-server\.com|dyndns-web\.com|dyndns-wiki\.com|dyndns-work\.com|dyndns\.biz|dyndns\.info|dyndns\.org|dyndns\.tv|at-band-camp\.net|ath\.cx|barrel-of-knowledge\.info|barrell-of-knowledge\.info|better-than\.tv|blogdns\.com|blogdns\.net|blogdns\.org|blogsite\.org|boldlygoingnowhere\.org|broke-it\.net|buyshouses\.net|cechire\.com|dnsalias\.com|dnsalias\.net|dnsalias\.org|dnsdojo\.com|dnsdojo\.net|dnsdojo\.org|does-it\.net|doesntexist\.com|doesntexist\.org|dontexist\.com|dontexist\.net|dontexist\.org|doomdns\.com|doomdns\.org|dvrdns\.org|dyn-o-saur\.com|dynalias\.com|dynalias\.net|dynalias\.org|dynathome\.net|dyndns\.ws|endofinternet\.net|endofinternet\.org|endoftheinternet\.org|est-a-la-maison\.com|est-a-la-masion\.com|est-le-patron\.com|est-mon-blogueur\.com|for-better\.biz|for-more\.biz|for-our\.info|for-some\.biz|for-the\.biz|forgot\.her\.name|forgot\.his\.name|from-ak\.com|from-al\.com|from-ar\.com|from-az\.net|from-ca\.com|from-co\.net|from-ct\.com|from-dc\.com|from-de\.com|from-fl\.com|from-ga\.com|from-hi\.com|from-ia\.com|from-id\.com|from-il\.com|from-in\.com|from-ks\.com|from-ky\.com|from-la\.net|from-ma\.com|from-md\.com|from-me\.org|from-mi\.com|from-mn\.com|from-mo\.com|from-ms\.com|from-mt\.com|from-nc\.com|from-nd\.com|from-ne\.com|from-nh\.com|from-nj\.com|from-nm\.com|from-nv\.com|from-ny\.net|from-oh\.com|from-ok\.com|from-or\.com|from-pa\.com|from-pr\.com|from-ri\.com|from-sc\.com|from-sd\.com|from-tn\.com|from-tx\.com|from-ut\.com|from-va\.com|from-vt\.com|from-wa\.com|from-wi\.com|from-wv\.com|from-wy\.com|ftpaccess\.cc|fuettertdasnetz\.de|game-host\.org|game-server\.cc|getmyip\.com|gets-it\.net|go\.dyndns\.org|gotdns\.com|gotdns\.org|groks-the\.info|groks-this\.info|ham-radio-op\.net|here-for-more\.info|hobby-site\.com|hobby-site\.org|home\.dyndns\.org|homedns\.org|homeftp\.net|homeftp\.org|homeip\.net|homelinux\.com|homelinux\.net|homelinux\.org|homeunix\.com|homeunix\.net|homeunix\.org|iamallama\.com|in-the-band\.net|is-a-anarchist\.com|is-a-blogger\.com|is-a-bookkeeper\.com|is-a-bruinsfan\.org|is-a-bulls-fan\.com|is-a-candidate\.org|is-a-caterer\.com|is-a-celticsfan\.org|is-a-chef\.com|is-a-chef\.net|is-a-chef\.org|is-a-conservative\.com|is-a-cpa\.com|is-a-cubicle-slave\.com|is-a-democrat\.com|is-a-designer\.com|is-a-doctor\.com|is-a-financialadvisor\.com|is-a-geek\.com|is-a-geek\.net|is-a-geek\.org|is-a-green\.com|is-a-guru\.com|is-a-hard-worker\.com|is-a-hunter\.com|is-a-knight\.org|is-a-landscaper\.com|is-a-lawyer\.com|is-a-liberal\.com|is-a-libertarian\.com|is-a-linux-user\.org|is-a-llama\.com|is-a-musician\.com|is-a-nascarfan\.com|is-a-nurse\.com|is-a-painter\.com|is-a-patsfan\.org|is-a-personaltrainer\.com|is-a-photographer\.com|is-a-player\.com|is-a-republican\.com|is-a-rockstar\.com|is-a-socialist\.com|is-a-soxfan\.org|is-a-student\.com|is-a-teacher\.com|is-a-techie\.com|is-a-therapist\.com|is-an-accountant\.com|is-an-actor\.com|is-an-actress\.com|is-an-anarchist\.com|is-an-artist\.com|is-an-engineer\.com|is-an-entertainer\.com|is-by\.us|is-certified\.com|is-found\.org|is-gone\.com|is-into-anime\.com|is-into-cars\.com|is-into-cartoons\.com|is-into-games\.com|is-leet\.com|is-lost\.org|is-not-certified\.com|is-saved\.org|is-slick\.com|is-uberleet\.com|is-very-bad\.org|is-very-evil\.org|is-very-good\.org|is-very-nice\.org|is-very-sweet\.org|is-with-theband\.com|isa-geek\.com|isa-geek\.net|isa-geek\.org|isa-hockeynut\.com|issmarterthanyou\.com|isteingeek\.de|istmein\.de|kicks-ass\.net|kicks-ass\.org|knowsitall\.info|land-4-sale\.us|lebtimnetz\.de|leitungsen\.de|likes-pie\.com|likescandy\.com|merseine\.nu|mine\.nu|misconfused\.org|mypets\.ws|myphotos\.cc|neat-url\.com|office-on-the\.net|on-the-web\.tv|podzone\.net|podzone\.org|readmyblog\.org|saves-the-whales\.com|scrapper-site\.net|scrapping\.cc|selfip\.biz|selfip\.com|selfip\.info|selfip\.net|selfip\.org|sells-for-less\.com|sells-for-u\.com|sells-it\.net|sellsyourhome\.org|servebbs\.com|servebbs\.net|servebbs\.org|serveftp\.net|serveftp\.org|servegame\.org|shacknet\.nu|simple-url\.com|space-to-rent\.com|stuff-4-sale\.org|stuff-4-sale\.us|teaches-yoga\.com|thruhere\.net|traeumtgerade\.de|webhop\.biz|webhop\.info|webhop\.net|webhop\.org|worse-than\.tv|writesthisblog\.com|ddnss\.de|dyn\.ddnss\.de|dyndns\.ddnss\.de|dyndns1\.de|dyn-ip24\.de|home-webserver\.de|dyn\.home-webserver\.de|myhome-server\.de|ddnss\.org|dynv6\.net|e4\.cz|enonic\.io|customer\.enonic\.io|eu\.org|al\.eu\.org|asso\.eu\.org|at\.eu\.org|au\.eu\.org|be\.eu\.org|bg\.eu\.org|ca\.eu\.org|cd\.eu\.org|ch\.eu\.org|cn\.eu\.org|cy\.eu\.org|cz\.eu\.org|de\.eu\.org|dk\.eu\.org|edu\.eu\.org|ee\.eu\.org|es\.eu\.org|fi\.eu\.org|fr\.eu\.org|gr\.eu\.org|hr\.eu\.org|hu\.eu\.org|ie\.eu\.org|il\.eu\.org|in\.eu\.org|int\.eu\.org|is\.eu\.org|it\.eu\.org|jp\.eu\.org|kr\.eu\.org|lt\.eu\.org|lu\.eu\.org|lv\.eu\.org|mc\.eu\.org|me\.eu\.org|mk\.eu\.org|mt\.eu\.org|my\.eu\.org|net\.eu\.org|ng\.eu\.org|nl\.eu\.org|no\.eu\.org|nz\.eu\.org|paris\.eu\.org|pl\.eu\.org|pt\.eu\.org|q-a\.eu\.org|ro\.eu\.org|ru\.eu\.org|se\.eu\.org|si\.eu\.org|sk\.eu\.org|tr\.eu\.org|uk\.eu\.org|us\.eu\.org|eu-1\.evennode\.com|eu-2\.evennode\.com|us-1\.evennode\.com|us-2\.evennode\.com|apps\.fbsbx\.com|ru\.net|adygeya\.ru|bashkiria\.ru|bir\.ru|cbg\.ru|com\.ru|dagestan\.ru|grozny\.ru|kalmykia\.ru|kustanai\.ru|marine\.ru|mordovia\.ru|msk\.ru|mytis\.ru|nalchik\.ru|nov\.ru|pyatigorsk\.ru|spb\.ru|vladikavkaz\.ru|vladimir\.ru|abkhazia\.su|adygeya\.su|aktyubinsk\.su|arkhangelsk\.su|armenia\.su|ashgabad\.su|azerbaijan\.su|balashov\.su|bashkiria\.su|bryansk\.su|bukhara\.su|chimkent\.su|dagestan\.su|east-kazakhstan\.su|exnet\.su|georgia\.su|grozny\.su|ivanovo\.su|jambyl\.su|kalmykia\.su|kaluga\.su|karacol\.su|karaganda\.su|karelia\.su|khakassia\.su|krasnodar\.su|kurgan\.su|kustanai\.su|lenug\.su|mangyshlak\.su|mordovia\.su|msk\.su|murmansk\.su|nalchik\.su|navoi\.su|north-kazakhstan\.su|nov\.su|obninsk\.su|penza\.su|pokrovsk\.su|sochi\.su|spb\.su|tashkent\.su|termez\.su|togliatti\.su|troitsk\.su|tselinograd\.su|tula\.su|tuva\.su|vladikavkaz\.su|vladimir\.su|vologda\.su|map\.fastly\.net|a\.prod\.fastly\.net|global\.prod\.fastly\.net|a\.ssl\.fastly\.net|b\.ssl\.fastly\.net|global\.ssl\.fastly\.net|fastlylb\.net|map\.fastlylb\.net|fhapp\.xyz|firebaseapp\.com|flynnhub\.com|freebox-os\.com|freeboxos\.com|fbx-os\.fr|fbxos\.fr|freebox-os\.fr|freeboxos\.fr|myfusion\.cloud|futurehosting\.at|futuremailing\.at|[^.]+\.ex\.ortsinfo\.at|[^.]+\.kunden\.ortsinfo\.at|[^.]+\.statics\.cloud|service\.gov\.uk|github\.io|githubusercontent\.com|githubcloud\.com|[^.]+\.api\.githubcloud\.com|[^.]+\.ext\.githubcloud\.com|gist\.githubcloud\.com|[^.]+\.githubcloudusercontent\.com|gitlab\.io|homeoffice\.gov\.uk|ro\.im|shop\.ro|goip\.de|[^.]+\.0emm\.com|appspot\.com|blogspot\.ae|blogspot\.al|blogspot\.am|blogspot\.ba|blogspot\.be|blogspot\.bg|blogspot\.bj|blogspot\.ca|blogspot\.cf|blogspot\.ch|blogspot\.cl|blogspot\.co\.at|blogspot\.co\.id|blogspot\.co\.il|blogspot\.co\.ke|blogspot\.co\.nz|blogspot\.co\.uk|blogspot\.co\.za|blogspot\.com|blogspot\.com\.ar|blogspot\.com\.au|blogspot\.com\.br|blogspot\.com\.by|blogspot\.com\.co|blogspot\.com\.cy|blogspot\.com\.ee|blogspot\.com\.eg|blogspot\.com\.es|blogspot\.com\.mt|blogspot\.com\.ng|blogspot\.com\.tr|blogspot\.com\.uy|blogspot\.cv|blogspot\.cz|blogspot\.de|blogspot\.dk|blogspot\.fi|blogspot\.fr|blogspot\.gr|blogspot\.hk|blogspot\.hr|blogspot\.hu|blogspot\.ie|blogspot\.in|blogspot\.is|blogspot\.it|blogspot\.jp|blogspot\.kr|blogspot\.li|blogspot\.lt|blogspot\.lu|blogspot\.md|blogspot\.mk|blogspot\.mr|blogspot\.mx|blogspot\.my|blogspot\.nl|blogspot\.no|blogspot\.pe|blogspot\.pt|blogspot\.qa|blogspot\.re|blogspot\.ro|blogspot\.rs|blogspot\.ru|blogspot\.se|blogspot\.sg|blogspot\.si|blogspot\.sk|blogspot\.sn|blogspot\.td|blogspot\.tw|blogspot\.ug|blogspot\.vn|cloudfunctions\.net|codespot\.com|googleapis\.com|googlecode\.com|pagespeedmobilizer\.com|publishproxy\.com|withgoogle\.com|withyoutube\.com|hashbang\.sh|hasura-app\.io|hepforge\.org|herokuapp\.com|herokussl\.com|iki\.fi|biz\.at|info\.at|ac\.leg\.br|al\.leg\.br|am\.leg\.br|ap\.leg\.br|ba\.leg\.br|ce\.leg\.br|df\.leg\.br|es\.leg\.br|go\.leg\.br|ma\.leg\.br|mg\.leg\.br|ms\.leg\.br|mt\.leg\.br|pa\.leg\.br|pb\.leg\.br|pe\.leg\.br|pi\.leg\.br|pr\.leg\.br|rj\.leg\.br|rn\.leg\.br|ro\.leg\.br|rr\.leg\.br|rs\.leg\.br|sc\.leg\.br|se\.leg\.br|sp\.leg\.br|to\.leg\.br|[^.]+\.triton\.zone|[^.]+\.cns\.joyent\.com|js\.org|keymachine\.de|knightpoint\.systems|co\.krd|edu\.krd|[^.]+\.magentosite\.cloud|meteorapp\.com|eu\.meteorapp\.com|co\.pl|azurewebsites\.net|azure-mobile\.net|cloudapp\.net|bmoattachments\.org|4u\.com|ngrok\.io|nfshost\.com|nsupdate\.info|nerdpol\.ovh|blogsyte\.com|brasilia\.me|cable-modem\.org|ciscofreak\.com|collegefan\.org|couchpotatofries\.org|damnserver\.com|ddns\.me|ditchyourip\.com|dnsfor\.me|dnsiskinky\.com|dvrcam\.info|dynns\.com|eating-organic\.net|fantasyleague\.cc|geekgalaxy\.com|golffan\.us|health-carereform\.com|homesecuritymac\.com|homesecuritypc\.com|hopto\.me|ilovecollege\.info|loginto\.me|mlbfan\.org|mmafan\.biz|myactivedirectory\.com|mydissent\.net|myeffect\.net|mymediapc\.net|mypsx\.net|mysecuritycamera\.com|mysecuritycamera\.net|mysecuritycamera\.org|net-freaks\.com|nflfan\.org|nhlfan\.net|no-ip\.ca|no-ip\.co\.uk|no-ip\.net|noip\.us|onthewifi\.com|pgafan\.net|point2this\.com|pointto\.us|privatizehealthinsurance\.net|quicksytes\.com|read-books\.org|securitytactics\.com|serveexchange\.com|servehumour\.com|servep2p\.com|servesarcasm\.com|stufftoread\.com|ufcfan\.org|unusualperson\.com|workisboring\.com|3utilities\.com|bounceme\.net|ddns\.net|ddnsking\.com|gotdns\.ch|hopto\.org|myftp\.biz|myftp\.org|myvnc\.com|no-ip\.biz|no-ip\.info|no-ip\.org|noip\.me|redirectme\.net|servebeer\.com|serveblog\.net|servecounterstrike\.com|serveftp\.com|servegame\.com|servehalflife\.com|servehttp\.com|serveirc\.com|serveminecraft\.net|servemp3\.com|servepics\.com|servequake\.com|sytes\.net|webhop\.me|zapto\.org|nyc\.mn|nid\.io|opencraft\.hosting|operaunite\.com|outsystemscloud\.com|ownprovider\.com|oy\.lc|pgfog\.com|pagefrontapp\.com|art\.pl|gliwice\.pl|krakow\.pl|poznan\.pl|wroc\.pl|zakopane\.pl|pantheonsite\.io|gotpantheon\.com|mypep\.link|on-web\.fr|xen\.prgmr\.com|priv\.at|protonet\.io|chirurgiens-dentistes-en-france\.fr|qa2\.com|dev-myqnapcloud\.com|alpha-myqnapcloud\.com|myqnapcloud\.com|rackmaze\.com|rackmaze\.net|rhcloud\.com|hzc\.io|wellbeingzone\.eu|ptplus\.fit|wellbeingzone\.co\.uk|sandcats\.io|logoip\.de|logoip\.com|firewall-gateway\.com|firewall-gateway\.de|my-gateway\.de|my-router\.de|spdns\.de|spdns\.eu|firewall-gateway\.net|my-firewall\.org|myfirewall\.org|spdns\.org|biz\.ua|co\.ua|pp\.ua|shiftedit\.io|myshopblocks\.com|1kapp\.com|appchizi\.com|applinzi\.com|sinaapp\.com|vipsinaapp\.com|bounty-full\.com|alpha\.bounty-full\.com|beta\.bounty-full\.com|static\.land|dev\.static\.land|sites\.static\.land|apps\.lair\.io|[^.]+\.stolos\.io|spacekit\.io|stackspace\.space|diskstation\.me|dscloud\.biz|dscloud\.me|dscloud\.mobi|dsmynas\.com|dsmynas\.net|dsmynas\.org|familyds\.com|familyds\.net|familyds\.org|i234\.me|myds\.me|synology\.me|taifun-dns\.de|gda\.pl|gdansk\.pl|gdynia\.pl|med\.pl|sopot\.pl|bloxcms\.com|townnews-staging\.com|[^.]+\.transurl\.be|[^.]+\.transurl\.eu|[^.]+\.transurl\.nl|tuxfamily\.org|dd-dns\.de|diskstation\.eu|diskstation\.org|dray-dns\.de|draydns\.de|dyn-vpn\.de|dynvpn\.de|mein-vigor\.de|my-vigor\.de|my-wan\.de|syno-ds\.de|synology-diskstation\.de|synology-ds\.de|hk\.com|hk\.org|ltd\.hk|inc\.hk|lib\.de\.us|router\.management|remotewd\.com|wmflabs\.org|yolasite\.com|ybo\.faith|yombo\.me|homelink\.one|ybo\.party|ybo\.review|ybo\.science|ybo\.trade|za\.net|za\.org|now\.sh|cc\.ua|inf\.ua|ltd\.ua)$/;
exports.icann = /\.(ac|com\.ac|edu\.ac|gov\.ac|net\.ac|mil\.ac|org\.ac|ad|nom\.ad|ae|co\.ae|net\.ae|org\.ae|sch\.ae|ac\.ae|gov\.ae|mil\.ae|aero|accident-investigation\.aero|accident-prevention\.aero|aerobatic\.aero|aeroclub\.aero|aerodrome\.aero|agents\.aero|aircraft\.aero|airline\.aero|airport\.aero|air-surveillance\.aero|airtraffic\.aero|air-traffic-control\.aero|ambulance\.aero|amusement\.aero|association\.aero|author\.aero|ballooning\.aero|broker\.aero|caa\.aero|cargo\.aero|catering\.aero|certification\.aero|championship\.aero|charter\.aero|civilaviation\.aero|club\.aero|conference\.aero|consultant\.aero|consulting\.aero|control\.aero|council\.aero|crew\.aero|design\.aero|dgca\.aero|educator\.aero|emergency\.aero|engine\.aero|engineer\.aero|entertainment\.aero|equipment\.aero|exchange\.aero|express\.aero|federation\.aero|flight\.aero|freight\.aero|fuel\.aero|gliding\.aero|government\.aero|groundhandling\.aero|group\.aero|hanggliding\.aero|homebuilt\.aero|insurance\.aero|journal\.aero|journalist\.aero|leasing\.aero|logistics\.aero|magazine\.aero|maintenance\.aero|media\.aero|microlight\.aero|modelling\.aero|navigation\.aero|parachuting\.aero|paragliding\.aero|passenger-association\.aero|pilot\.aero|press\.aero|production\.aero|recreation\.aero|repbody\.aero|res\.aero|research\.aero|rotorcraft\.aero|safety\.aero|scientist\.aero|services\.aero|show\.aero|skydiving\.aero|software\.aero|student\.aero|trader\.aero|trading\.aero|trainer\.aero|union\.aero|workinggroup\.aero|works\.aero|af|gov\.af|com\.af|org\.af|net\.af|edu\.af|ag|com\.ag|org\.ag|net\.ag|co\.ag|nom\.ag|ai|off\.ai|com\.ai|net\.ai|org\.ai|al|com\.al|edu\.al|gov\.al|mil\.al|net\.al|org\.al|am|ao|ed\.ao|gv\.ao|og\.ao|co\.ao|pb\.ao|it\.ao|aq|ar|com\.ar|edu\.ar|gob\.ar|gov\.ar|int\.ar|mil\.ar|net\.ar|org\.ar|tur\.ar|arpa|e164\.arpa|in-addr\.arpa|ip6\.arpa|iris\.arpa|uri\.arpa|urn\.arpa|as|gov\.as|asia|at|ac\.at|co\.at|gv\.at|or\.at|au|com\.au|net\.au|org\.au|edu\.au|gov\.au|asn\.au|id\.au|info\.au|conf\.au|oz\.au|act\.au|nsw\.au|nt\.au|qld\.au|sa\.au|tas\.au|vic\.au|wa\.au|act\.edu\.au|nsw\.edu\.au|nt\.edu\.au|qld\.edu\.au|sa\.edu\.au|tas\.edu\.au|vic\.edu\.au|wa\.edu\.au|qld\.gov\.au|sa\.gov\.au|tas\.gov\.au|vic\.gov\.au|wa\.gov\.au|aw|com\.aw|ax|az|com\.az|net\.az|int\.az|gov\.az|org\.az|edu\.az|info\.az|pp\.az|mil\.az|name\.az|pro\.az|biz\.az|ba|com\.ba|edu\.ba|gov\.ba|mil\.ba|net\.ba|org\.ba|bb|biz\.bb|co\.bb|com\.bb|edu\.bb|gov\.bb|info\.bb|net\.bb|org\.bb|store\.bb|tv\.bb|[^.]+\.bd|be|ac\.be|bf|gov\.bf|bg|a\.bg|b\.bg|c\.bg|d\.bg|e\.bg|f\.bg|g\.bg|h\.bg|i\.bg|j\.bg|k\.bg|l\.bg|m\.bg|n\.bg|o\.bg|p\.bg|q\.bg|r\.bg|s\.bg|t\.bg|u\.bg|v\.bg|w\.bg|x\.bg|y\.bg|z\.bg|0\.bg|1\.bg|2\.bg|3\.bg|4\.bg|5\.bg|6\.bg|7\.bg|8\.bg|9\.bg|bh|com\.bh|edu\.bh|net\.bh|org\.bh|gov\.bh|bi|co\.bi|com\.bi|edu\.bi|or\.bi|org\.bi|biz|bj|asso\.bj|barreau\.bj|gouv\.bj|bm|com\.bm|edu\.bm|gov\.bm|net\.bm|org\.bm|[^.]+\.bn|bo|com\.bo|edu\.bo|gov\.bo|gob\.bo|int\.bo|org\.bo|net\.bo|mil\.bo|tv\.bo|br|adm\.br|adv\.br|agr\.br|am\.br|arq\.br|art\.br|ato\.br|b\.br|bio\.br|blog\.br|bmd\.br|cim\.br|cng\.br|cnt\.br|com\.br|coop\.br|ecn\.br|eco\.br|edu\.br|emp\.br|eng\.br|esp\.br|etc\.br|eti\.br|far\.br|flog\.br|fm\.br|fnd\.br|fot\.br|fst\.br|g12\.br|ggf\.br|gov\.br|imb\.br|ind\.br|inf\.br|jor\.br|jus\.br|leg\.br|lel\.br|mat\.br|med\.br|mil\.br|mp\.br|mus\.br|net\.br|[^.]+\.nom\.br|not\.br|ntr\.br|odo\.br|org\.br|ppg\.br|pro\.br|psc\.br|psi\.br|qsl\.br|radio\.br|rec\.br|slg\.br|srv\.br|taxi\.br|teo\.br|tmp\.br|trd\.br|tur\.br|tv\.br|vet\.br|vlog\.br|wiki\.br|zlg\.br|bs|com\.bs|net\.bs|org\.bs|edu\.bs|gov\.bs|bt|com\.bt|edu\.bt|gov\.bt|net\.bt|org\.bt|bv|bw|co\.bw|org\.bw|by|gov\.by|mil\.by|com\.by|of\.by|bz|com\.bz|net\.bz|org\.bz|edu\.bz|gov\.bz|ca|ab\.ca|bc\.ca|mb\.ca|nb\.ca|nf\.ca|nl\.ca|ns\.ca|nt\.ca|nu\.ca|on\.ca|pe\.ca|qc\.ca|sk\.ca|yk\.ca|gc\.ca|cat|cc|cd|gov\.cd|cf|cg|ch|ci|org\.ci|or\.ci|com\.ci|co\.ci|edu\.ci|ed\.ci|ac\.ci|net\.ci|go\.ci|asso\.ci|aéroport\.ci|int\.ci|presse\.ci|md\.ci|gouv\.ci|[^.]+\.ck|!www\.ck|cl|gov\.cl|gob\.cl|co\.cl|mil\.cl|cm|co\.cm|com\.cm|gov\.cm|net\.cm|cn|ac\.cn|com\.cn|edu\.cn|gov\.cn|net\.cn|org\.cn|mil\.cn|公司\.cn|网络\.cn|網絡\.cn|ah\.cn|bj\.cn|cq\.cn|fj\.cn|gd\.cn|gs\.cn|gz\.cn|gx\.cn|ha\.cn|hb\.cn|he\.cn|hi\.cn|hl\.cn|hn\.cn|jl\.cn|js\.cn|jx\.cn|ln\.cn|nm\.cn|nx\.cn|qh\.cn|sc\.cn|sd\.cn|sh\.cn|sn\.cn|sx\.cn|tj\.cn|xj\.cn|xz\.cn|yn\.cn|zj\.cn|hk\.cn|mo\.cn|tw\.cn|co|arts\.co|com\.co|edu\.co|firm\.co|gov\.co|info\.co|int\.co|mil\.co|net\.co|nom\.co|org\.co|rec\.co|web\.co|com|coop|cr|ac\.cr|co\.cr|ed\.cr|fi\.cr|go\.cr|or\.cr|sa\.cr|cu|com\.cu|edu\.cu|org\.cu|net\.cu|gov\.cu|inf\.cu|cv|cw|com\.cw|edu\.cw|net\.cw|org\.cw|cx|gov\.cx|cy|ac\.cy|biz\.cy|com\.cy|ekloges\.cy|gov\.cy|ltd\.cy|name\.cy|net\.cy|org\.cy|parliament\.cy|press\.cy|pro\.cy|tm\.cy|cz|de|dj|dk|dm|com\.dm|net\.dm|org\.dm|edu\.dm|gov\.dm|do|art\.do|com\.do|edu\.do|gob\.do|gov\.do|mil\.do|net\.do|org\.do|sld\.do|web\.do|dz|com\.dz|org\.dz|net\.dz|gov\.dz|edu\.dz|asso\.dz|pol\.dz|art\.dz|ec|com\.ec|info\.ec|net\.ec|fin\.ec|k12\.ec|med\.ec|pro\.ec|org\.ec|edu\.ec|gov\.ec|gob\.ec|mil\.ec|edu|ee|edu\.ee|gov\.ee|riik\.ee|lib\.ee|med\.ee|com\.ee|pri\.ee|aip\.ee|org\.ee|fie\.ee|eg|com\.eg|edu\.eg|eun\.eg|gov\.eg|mil\.eg|name\.eg|net\.eg|org\.eg|sci\.eg|[^.]+\.er|es|com\.es|nom\.es|org\.es|gob\.es|edu\.es|et|com\.et|gov\.et|org\.et|edu\.et|biz\.et|name\.et|info\.et|net\.et|eu|fi|aland\.fi|[^.]+\.fj|[^.]+\.fk|fm|fo|fr|com\.fr|asso\.fr|nom\.fr|prd\.fr|presse\.fr|tm\.fr|aeroport\.fr|assedic\.fr|avocat\.fr|avoues\.fr|cci\.fr|chambagri\.fr|chirurgiens-dentistes\.fr|experts-comptables\.fr|geometre-expert\.fr|gouv\.fr|greta\.fr|huissier-justice\.fr|medecin\.fr|notaires\.fr|pharmacien\.fr|port\.fr|veterinaire\.fr|ga|gb|gd|ge|com\.ge|edu\.ge|gov\.ge|org\.ge|mil\.ge|net\.ge|pvt\.ge|gf|gg|co\.gg|net\.gg|org\.gg|gh|com\.gh|edu\.gh|gov\.gh|org\.gh|mil\.gh|gi|com\.gi|ltd\.gi|gov\.gi|mod\.gi|edu\.gi|org\.gi|gl|co\.gl|com\.gl|edu\.gl|net\.gl|org\.gl|gm|gn|ac\.gn|com\.gn|edu\.gn|gov\.gn|org\.gn|net\.gn|gov|gp|com\.gp|net\.gp|mobi\.gp|edu\.gp|org\.gp|asso\.gp|gq|gr|com\.gr|edu\.gr|net\.gr|org\.gr|gov\.gr|gs|gt|com\.gt|edu\.gt|gob\.gt|ind\.gt|mil\.gt|net\.gt|org\.gt|[^.]+\.gu|gw|gy|co\.gy|com\.gy|edu\.gy|gov\.gy|net\.gy|org\.gy|hk|com\.hk|edu\.hk|gov\.hk|idv\.hk|net\.hk|org\.hk|公司\.hk|教育\.hk|敎育\.hk|政府\.hk|個人\.hk|个人\.hk|箇人\.hk|網络\.hk|网络\.hk|组織\.hk|網絡\.hk|网絡\.hk|组织\.hk|組織\.hk|組织\.hk|hm|hn|com\.hn|edu\.hn|org\.hn|net\.hn|mil\.hn|gob\.hn|hr|iz\.hr|from\.hr|name\.hr|com\.hr|ht|com\.ht|shop\.ht|firm\.ht|info\.ht|adult\.ht|net\.ht|pro\.ht|org\.ht|med\.ht|art\.ht|coop\.ht|pol\.ht|asso\.ht|edu\.ht|rel\.ht|gouv\.ht|perso\.ht|hu|co\.hu|info\.hu|org\.hu|priv\.hu|sport\.hu|tm\.hu|2000\.hu|agrar\.hu|bolt\.hu|casino\.hu|city\.hu|erotica\.hu|erotika\.hu|film\.hu|forum\.hu|games\.hu|hotel\.hu|ingatlan\.hu|jogasz\.hu|konyvelo\.hu|lakas\.hu|media\.hu|news\.hu|reklam\.hu|sex\.hu|shop\.hu|suli\.hu|szex\.hu|tozsde\.hu|utazas\.hu|video\.hu|id|ac\.id|biz\.id|co\.id|desa\.id|go\.id|mil\.id|my\.id|net\.id|or\.id|sch\.id|web\.id|ie|gov\.ie|il|ac\.il|co\.il|gov\.il|idf\.il|k12\.il|muni\.il|net\.il|org\.il|im|ac\.im|co\.im|com\.im|ltd\.co\.im|net\.im|org\.im|plc\.co\.im|tt\.im|tv\.im|in|co\.in|firm\.in|net\.in|org\.in|gen\.in|ind\.in|nic\.in|ac\.in|edu\.in|res\.in|gov\.in|mil\.in|info|int|eu\.int|io|com\.io|iq|gov\.iq|edu\.iq|mil\.iq|com\.iq|org\.iq|net\.iq|ir|ac\.ir|co\.ir|gov\.ir|id\.ir|net\.ir|org\.ir|sch\.ir|ایران\.ir|ايران\.ir|is|net\.is|com\.is|edu\.is|gov\.is|org\.is|int\.is|it|gov\.it|edu\.it|abr\.it|abruzzo\.it|aosta-valley\.it|aostavalley\.it|bas\.it|basilicata\.it|cal\.it|calabria\.it|cam\.it|campania\.it|emilia-romagna\.it|emiliaromagna\.it|emr\.it|friuli-v-giulia\.it|friuli-ve-giulia\.it|friuli-vegiulia\.it|friuli-venezia-giulia\.it|friuli-veneziagiulia\.it|friuli-vgiulia\.it|friuliv-giulia\.it|friulive-giulia\.it|friulivegiulia\.it|friulivenezia-giulia\.it|friuliveneziagiulia\.it|friulivgiulia\.it|fvg\.it|laz\.it|lazio\.it|lig\.it|liguria\.it|lom\.it|lombardia\.it|lombardy\.it|lucania\.it|mar\.it|marche\.it|mol\.it|molise\.it|piedmont\.it|piemonte\.it|pmn\.it|pug\.it|puglia\.it|sar\.it|sardegna\.it|sardinia\.it|sic\.it|sicilia\.it|sicily\.it|taa\.it|tos\.it|toscana\.it|trentino-a-adige\.it|trentino-aadige\.it|trentino-alto-adige\.it|trentino-altoadige\.it|trentino-s-tirol\.it|trentino-stirol\.it|trentino-sud-tirol\.it|trentino-sudtirol\.it|trentino-sued-tirol\.it|trentino-suedtirol\.it|trentinoa-adige\.it|trentinoaadige\.it|trentinoalto-adige\.it|trentinoaltoadige\.it|trentinos-tirol\.it|trentinostirol\.it|trentinosud-tirol\.it|trentinosudtirol\.it|trentinosued-tirol\.it|trentinosuedtirol\.it|tuscany\.it|umb\.it|umbria\.it|val-d-aosta\.it|val-daosta\.it|vald-aosta\.it|valdaosta\.it|valle-aosta\.it|valle-d-aosta\.it|valle-daosta\.it|valleaosta\.it|valled-aosta\.it|valledaosta\.it|vallee-aoste\.it|valleeaoste\.it|vao\.it|vda\.it|ven\.it|veneto\.it|ag\.it|agrigento\.it|al\.it|alessandria\.it|alto-adige\.it|altoadige\.it|an\.it|ancona\.it|andria-barletta-trani\.it|andria-trani-barletta\.it|andriabarlettatrani\.it|andriatranibarletta\.it|ao\.it|aosta\.it|aoste\.it|ap\.it|aq\.it|aquila\.it|ar\.it|arezzo\.it|ascoli-piceno\.it|ascolipiceno\.it|asti\.it|at\.it|av\.it|avellino\.it|ba\.it|balsan\.it|bari\.it|barletta-trani-andria\.it|barlettatraniandria\.it|belluno\.it|benevento\.it|bergamo\.it|bg\.it|bi\.it|biella\.it|bl\.it|bn\.it|bo\.it|bologna\.it|bolzano\.it|bozen\.it|br\.it|brescia\.it|brindisi\.it|bs\.it|bt\.it|bz\.it|ca\.it|cagliari\.it|caltanissetta\.it|campidano-medio\.it|campidanomedio\.it|campobasso\.it|carbonia-iglesias\.it|carboniaiglesias\.it|carrara-massa\.it|carraramassa\.it|caserta\.it|catania\.it|catanzaro\.it|cb\.it|ce\.it|cesena-forli\.it|cesenaforli\.it|ch\.it|chieti\.it|ci\.it|cl\.it|cn\.it|co\.it|como\.it|cosenza\.it|cr\.it|cremona\.it|crotone\.it|cs\.it|ct\.it|cuneo\.it|cz\.it|dell-ogliastra\.it|dellogliastra\.it|en\.it|enna\.it|fc\.it|fe\.it|fermo\.it|ferrara\.it|fg\.it|fi\.it|firenze\.it|florence\.it|fm\.it|foggia\.it|forli-cesena\.it|forlicesena\.it|fr\.it|frosinone\.it|ge\.it|genoa\.it|genova\.it|go\.it|gorizia\.it|gr\.it|grosseto\.it|iglesias-carbonia\.it|iglesiascarbonia\.it|im\.it|imperia\.it|is\.it|isernia\.it|kr\.it|la-spezia\.it|laquila\.it|laspezia\.it|latina\.it|lc\.it|le\.it|lecce\.it|lecco\.it|li\.it|livorno\.it|lo\.it|lodi\.it|lt\.it|lu\.it|lucca\.it|macerata\.it|mantova\.it|massa-carrara\.it|massacarrara\.it|matera\.it|mb\.it|mc\.it|me\.it|medio-campidano\.it|mediocampidano\.it|messina\.it|mi\.it|milan\.it|milano\.it|mn\.it|mo\.it|modena\.it|monza-brianza\.it|monza-e-della-brianza\.it|monza\.it|monzabrianza\.it|monzaebrianza\.it|monzaedellabrianza\.it|ms\.it|mt\.it|na\.it|naples\.it|napoli\.it|no\.it|novara\.it|nu\.it|nuoro\.it|og\.it|ogliastra\.it|olbia-tempio\.it|olbiatempio\.it|or\.it|oristano\.it|ot\.it|pa\.it|padova\.it|padua\.it|palermo\.it|parma\.it|pavia\.it|pc\.it|pd\.it|pe\.it|perugia\.it|pesaro-urbino\.it|pesarourbino\.it|pescara\.it|pg\.it|pi\.it|piacenza\.it|pisa\.it|pistoia\.it|pn\.it|po\.it|pordenone\.it|potenza\.it|pr\.it|prato\.it|pt\.it|pu\.it|pv\.it|pz\.it|ra\.it|ragusa\.it|ravenna\.it|rc\.it|re\.it|reggio-calabria\.it|reggio-emilia\.it|reggiocalabria\.it|reggioemilia\.it|rg\.it|ri\.it|rieti\.it|rimini\.it|rm\.it|rn\.it|ro\.it|roma\.it|rome\.it|rovigo\.it|sa\.it|salerno\.it|sassari\.it|savona\.it|si\.it|siena\.it|siracusa\.it|so\.it|sondrio\.it|sp\.it|sr\.it|ss\.it|suedtirol\.it|sv\.it|ta\.it|taranto\.it|te\.it|tempio-olbia\.it|tempioolbia\.it|teramo\.it|terni\.it|tn\.it|to\.it|torino\.it|tp\.it|tr\.it|trani-andria-barletta\.it|trani-barletta-andria\.it|traniandriabarletta\.it|tranibarlettaandria\.it|trapani\.it|trentino\.it|trento\.it|treviso\.it|trieste\.it|ts\.it|turin\.it|tv\.it|ud\.it|udine\.it|urbino-pesaro\.it|urbinopesaro\.it|va\.it|varese\.it|vb\.it|vc\.it|ve\.it|venezia\.it|venice\.it|verbania\.it|vercelli\.it|verona\.it|vi\.it|vibo-valentia\.it|vibovalentia\.it|vicenza\.it|viterbo\.it|vr\.it|vs\.it|vt\.it|vv\.it|je|co\.je|net\.je|org\.je|[^.]+\.jm|jo|com\.jo|org\.jo|net\.jo|edu\.jo|sch\.jo|gov\.jo|mil\.jo|name\.jo|jobs|jp|ac\.jp|ad\.jp|co\.jp|ed\.jp|go\.jp|gr\.jp|lg\.jp|ne\.jp|or\.jp|aichi\.jp|akita\.jp|aomori\.jp|chiba\.jp|ehime\.jp|fukui\.jp|fukuoka\.jp|fukushima\.jp|gifu\.jp|gunma\.jp|hiroshima\.jp|hokkaido\.jp|hyogo\.jp|ibaraki\.jp|ishikawa\.jp|iwate\.jp|kagawa\.jp|kagoshima\.jp|kanagawa\.jp|kochi\.jp|kumamoto\.jp|kyoto\.jp|mie\.jp|miyagi\.jp|miyazaki\.jp|nagano\.jp|nagasaki\.jp|nara\.jp|niigata\.jp|oita\.jp|okayama\.jp|okinawa\.jp|osaka\.jp|saga\.jp|saitama\.jp|shiga\.jp|shimane\.jp|shizuoka\.jp|tochigi\.jp|tokushima\.jp|tokyo\.jp|tottori\.jp|toyama\.jp|wakayama\.jp|yamagata\.jp|yamaguchi\.jp|yamanashi\.jp|栃木\.jp|愛知\.jp|愛媛\.jp|兵庫\.jp|熊本\.jp|茨城\.jp|北海道\.jp|千葉\.jp|和歌山\.jp|長崎\.jp|長野\.jp|新潟\.jp|青森\.jp|静岡\.jp|東京\.jp|石川\.jp|埼玉\.jp|三重\.jp|京都\.jp|佐賀\.jp|大分\.jp|大阪\.jp|奈良\.jp|宮城\.jp|宮崎\.jp|富山\.jp|山口\.jp|山形\.jp|山梨\.jp|岩手\.jp|岐阜\.jp|岡山\.jp|島根\.jp|広島\.jp|徳島\.jp|沖縄\.jp|滋賀\.jp|神奈川\.jp|福井\.jp|福岡\.jp|福島\.jp|秋田\.jp|群馬\.jp|香川\.jp|高知\.jp|鳥取\.jp|鹿児島\.jp|[^.]+\.kawasaki\.jp|[^.]+\.kitakyushu\.jp|[^.]+\.kobe\.jp|[^.]+\.nagoya\.jp|[^.]+\.sapporo\.jp|[^.]+\.sendai\.jp|[^.]+\.yokohama\.jp|!city\.kawasaki\.jp|!city\.kitakyushu\.jp|!city\.kobe\.jp|!city\.nagoya\.jp|!city\.sapporo\.jp|!city\.sendai\.jp|!city\.yokohama\.jp|aisai\.aichi\.jp|ama\.aichi\.jp|anjo\.aichi\.jp|asuke\.aichi\.jp|chiryu\.aichi\.jp|chita\.aichi\.jp|fuso\.aichi\.jp|gamagori\.aichi\.jp|handa\.aichi\.jp|hazu\.aichi\.jp|hekinan\.aichi\.jp|higashiura\.aichi\.jp|ichinomiya\.aichi\.jp|inazawa\.aichi\.jp|inuyama\.aichi\.jp|isshiki\.aichi\.jp|iwakura\.aichi\.jp|kanie\.aichi\.jp|kariya\.aichi\.jp|kasugai\.aichi\.jp|kira\.aichi\.jp|kiyosu\.aichi\.jp|komaki\.aichi\.jp|konan\.aichi\.jp|kota\.aichi\.jp|mihama\.aichi\.jp|miyoshi\.aichi\.jp|nishio\.aichi\.jp|nisshin\.aichi\.jp|obu\.aichi\.jp|oguchi\.aichi\.jp|oharu\.aichi\.jp|okazaki\.aichi\.jp|owariasahi\.aichi\.jp|seto\.aichi\.jp|shikatsu\.aichi\.jp|shinshiro\.aichi\.jp|shitara\.aichi\.jp|tahara\.aichi\.jp|takahama\.aichi\.jp|tobishima\.aichi\.jp|toei\.aichi\.jp|togo\.aichi\.jp|tokai\.aichi\.jp|tokoname\.aichi\.jp|toyoake\.aichi\.jp|toyohashi\.aichi\.jp|toyokawa\.aichi\.jp|toyone\.aichi\.jp|toyota\.aichi\.jp|tsushima\.aichi\.jp|yatomi\.aichi\.jp|akita\.akita\.jp|daisen\.akita\.jp|fujisato\.akita\.jp|gojome\.akita\.jp|hachirogata\.akita\.jp|happou\.akita\.jp|higashinaruse\.akita\.jp|honjo\.akita\.jp|honjyo\.akita\.jp|ikawa\.akita\.jp|kamikoani\.akita\.jp|kamioka\.akita\.jp|katagami\.akita\.jp|kazuno\.akita\.jp|kitaakita\.akita\.jp|kosaka\.akita\.jp|kyowa\.akita\.jp|misato\.akita\.jp|mitane\.akita\.jp|moriyoshi\.akita\.jp|nikaho\.akita\.jp|noshiro\.akita\.jp|odate\.akita\.jp|oga\.akita\.jp|ogata\.akita\.jp|semboku\.akita\.jp|yokote\.akita\.jp|yurihonjo\.akita\.jp|aomori\.aomori\.jp|gonohe\.aomori\.jp|hachinohe\.aomori\.jp|hashikami\.aomori\.jp|hiranai\.aomori\.jp|hirosaki\.aomori\.jp|itayanagi\.aomori\.jp|kuroishi\.aomori\.jp|misawa\.aomori\.jp|mutsu\.aomori\.jp|nakadomari\.aomori\.jp|noheji\.aomori\.jp|oirase\.aomori\.jp|owani\.aomori\.jp|rokunohe\.aomori\.jp|sannohe\.aomori\.jp|shichinohe\.aomori\.jp|shingo\.aomori\.jp|takko\.aomori\.jp|towada\.aomori\.jp|tsugaru\.aomori\.jp|tsuruta\.aomori\.jp|abiko\.chiba\.jp|asahi\.chiba\.jp|chonan\.chiba\.jp|chosei\.chiba\.jp|choshi\.chiba\.jp|chuo\.chiba\.jp|funabashi\.chiba\.jp|futtsu\.chiba\.jp|hanamigawa\.chiba\.jp|ichihara\.chiba\.jp|ichikawa\.chiba\.jp|ichinomiya\.chiba\.jp|inzai\.chiba\.jp|isumi\.chiba\.jp|kamagaya\.chiba\.jp|kamogawa\.chiba\.jp|kashiwa\.chiba\.jp|katori\.chiba\.jp|katsuura\.chiba\.jp|kimitsu\.chiba\.jp|kisarazu\.chiba\.jp|kozaki\.chiba\.jp|kujukuri\.chiba\.jp|kyonan\.chiba\.jp|matsudo\.chiba\.jp|midori\.chiba\.jp|mihama\.chiba\.jp|minamiboso\.chiba\.jp|mobara\.chiba\.jp|mutsuzawa\.chiba\.jp|nagara\.chiba\.jp|nagareyama\.chiba\.jp|narashino\.chiba\.jp|narita\.chiba\.jp|noda\.chiba\.jp|oamishirasato\.chiba\.jp|omigawa\.chiba\.jp|onjuku\.chiba\.jp|otaki\.chiba\.jp|sakae\.chiba\.jp|sakura\.chiba\.jp|shimofusa\.chiba\.jp|shirako\.chiba\.jp|shiroi\.chiba\.jp|shisui\.chiba\.jp|sodegaura\.chiba\.jp|sosa\.chiba\.jp|tako\.chiba\.jp|tateyama\.chiba\.jp|togane\.chiba\.jp|tohnosho\.chiba\.jp|tomisato\.chiba\.jp|urayasu\.chiba\.jp|yachimata\.chiba\.jp|yachiyo\.chiba\.jp|yokaichiba\.chiba\.jp|yokoshibahikari\.chiba\.jp|yotsukaido\.chiba\.jp|ainan\.ehime\.jp|honai\.ehime\.jp|ikata\.ehime\.jp|imabari\.ehime\.jp|iyo\.ehime\.jp|kamijima\.ehime\.jp|kihoku\.ehime\.jp|kumakogen\.ehime\.jp|masaki\.ehime\.jp|matsuno\.ehime\.jp|matsuyama\.ehime\.jp|namikata\.ehime\.jp|niihama\.ehime\.jp|ozu\.ehime\.jp|saijo\.ehime\.jp|seiyo\.ehime\.jp|shikokuchuo\.ehime\.jp|tobe\.ehime\.jp|toon\.ehime\.jp|uchiko\.ehime\.jp|uwajima\.ehime\.jp|yawatahama\.ehime\.jp|echizen\.fukui\.jp|eiheiji\.fukui\.jp|fukui\.fukui\.jp|ikeda\.fukui\.jp|katsuyama\.fukui\.jp|mihama\.fukui\.jp|minamiechizen\.fukui\.jp|obama\.fukui\.jp|ohi\.fukui\.jp|ono\.fukui\.jp|sabae\.fukui\.jp|sakai\.fukui\.jp|takahama\.fukui\.jp|tsuruga\.fukui\.jp|wakasa\.fukui\.jp|ashiya\.fukuoka\.jp|buzen\.fukuoka\.jp|chikugo\.fukuoka\.jp|chikuho\.fukuoka\.jp|chikujo\.fukuoka\.jp|chikushino\.fukuoka\.jp|chikuzen\.fukuoka\.jp|chuo\.fukuoka\.jp|dazaifu\.fukuoka\.jp|fukuchi\.fukuoka\.jp|hakata\.fukuoka\.jp|higashi\.fukuoka\.jp|hirokawa\.fukuoka\.jp|hisayama\.fukuoka\.jp|iizuka\.fukuoka\.jp|inatsuki\.fukuoka\.jp|kaho\.fukuoka\.jp|kasuga\.fukuoka\.jp|kasuya\.fukuoka\.jp|kawara\.fukuoka\.jp|keisen\.fukuoka\.jp|koga\.fukuoka\.jp|kurate\.fukuoka\.jp|kurogi\.fukuoka\.jp|kurume\.fukuoka\.jp|minami\.fukuoka\.jp|miyako\.fukuoka\.jp|miyama\.fukuoka\.jp|miyawaka\.fukuoka\.jp|mizumaki\.fukuoka\.jp|munakata\.fukuoka\.jp|nakagawa\.fukuoka\.jp|nakama\.fukuoka\.jp|nishi\.fukuoka\.jp|nogata\.fukuoka\.jp|ogori\.fukuoka\.jp|okagaki\.fukuoka\.jp|okawa\.fukuoka\.jp|oki\.fukuoka\.jp|omuta\.fukuoka\.jp|onga\.fukuoka\.jp|onojo\.fukuoka\.jp|oto\.fukuoka\.jp|saigawa\.fukuoka\.jp|sasaguri\.fukuoka\.jp|shingu\.fukuoka\.jp|shinyoshitomi\.fukuoka\.jp|shonai\.fukuoka\.jp|soeda\.fukuoka\.jp|sue\.fukuoka\.jp|tachiarai\.fukuoka\.jp|tagawa\.fukuoka\.jp|takata\.fukuoka\.jp|toho\.fukuoka\.jp|toyotsu\.fukuoka\.jp|tsuiki\.fukuoka\.jp|ukiha\.fukuoka\.jp|umi\.fukuoka\.jp|usui\.fukuoka\.jp|yamada\.fukuoka\.jp|yame\.fukuoka\.jp|yanagawa\.fukuoka\.jp|yukuhashi\.fukuoka\.jp|aizubange\.fukushima\.jp|aizumisato\.fukushima\.jp|aizuwakamatsu\.fukushima\.jp|asakawa\.fukushima\.jp|bandai\.fukushima\.jp|date\.fukushima\.jp|fukushima\.fukushima\.jp|furudono\.fukushima\.jp|futaba\.fukushima\.jp|hanawa\.fukushima\.jp|higashi\.fukushima\.jp|hirata\.fukushima\.jp|hirono\.fukushima\.jp|iitate\.fukushima\.jp|inawashiro\.fukushima\.jp|ishikawa\.fukushima\.jp|iwaki\.fukushima\.jp|izumizaki\.fukushima\.jp|kagamiishi\.fukushima\.jp|kaneyama\.fukushima\.jp|kawamata\.fukushima\.jp|kitakata\.fukushima\.jp|kitashiobara\.fukushima\.jp|koori\.fukushima\.jp|koriyama\.fukushima\.jp|kunimi\.fukushima\.jp|miharu\.fukushima\.jp|mishima\.fukushima\.jp|namie\.fukushima\.jp|nango\.fukushima\.jp|nishiaizu\.fukushima\.jp|nishigo\.fukushima\.jp|okuma\.fukushima\.jp|omotego\.fukushima\.jp|ono\.fukushima\.jp|otama\.fukushima\.jp|samegawa\.fukushima\.jp|shimogo\.fukushima\.jp|shirakawa\.fukushima\.jp|showa\.fukushima\.jp|soma\.fukushima\.jp|sukagawa\.fukushima\.jp|taishin\.fukushima\.jp|tamakawa\.fukushima\.jp|tanagura\.fukushima\.jp|tenei\.fukushima\.jp|yabuki\.fukushima\.jp|yamato\.fukushima\.jp|yamatsuri\.fukushima\.jp|yanaizu\.fukushima\.jp|yugawa\.fukushima\.jp|anpachi\.gifu\.jp|ena\.gifu\.jp|gifu\.gifu\.jp|ginan\.gifu\.jp|godo\.gifu\.jp|gujo\.gifu\.jp|hashima\.gifu\.jp|hichiso\.gifu\.jp|hida\.gifu\.jp|higashishirakawa\.gifu\.jp|ibigawa\.gifu\.jp|ikeda\.gifu\.jp|kakamigahara\.gifu\.jp|kani\.gifu\.jp|kasahara\.gifu\.jp|kasamatsu\.gifu\.jp|kawaue\.gifu\.jp|kitagata\.gifu\.jp|mino\.gifu\.jp|minokamo\.gifu\.jp|mitake\.gifu\.jp|mizunami\.gifu\.jp|motosu\.gifu\.jp|nakatsugawa\.gifu\.jp|ogaki\.gifu\.jp|sakahogi\.gifu\.jp|seki\.gifu\.jp|sekigahara\.gifu\.jp|shirakawa\.gifu\.jp|tajimi\.gifu\.jp|takayama\.gifu\.jp|tarui\.gifu\.jp|toki\.gifu\.jp|tomika\.gifu\.jp|wanouchi\.gifu\.jp|yamagata\.gifu\.jp|yaotsu\.gifu\.jp|yoro\.gifu\.jp|annaka\.gunma\.jp|chiyoda\.gunma\.jp|fujioka\.gunma\.jp|higashiagatsuma\.gunma\.jp|isesaki\.gunma\.jp|itakura\.gunma\.jp|kanna\.gunma\.jp|kanra\.gunma\.jp|katashina\.gunma\.jp|kawaba\.gunma\.jp|kiryu\.gunma\.jp|kusatsu\.gunma\.jp|maebashi\.gunma\.jp|meiwa\.gunma\.jp|midori\.gunma\.jp|minakami\.gunma\.jp|naganohara\.gunma\.jp|nakanojo\.gunma\.jp|nanmoku\.gunma\.jp|numata\.gunma\.jp|oizumi\.gunma\.jp|ora\.gunma\.jp|ota\.gunma\.jp|shibukawa\.gunma\.jp|shimonita\.gunma\.jp|shinto\.gunma\.jp|showa\.gunma\.jp|takasaki\.gunma\.jp|takayama\.gunma\.jp|tamamura\.gunma\.jp|tatebayashi\.gunma\.jp|tomioka\.gunma\.jp|tsukiyono\.gunma\.jp|tsumagoi\.gunma\.jp|ueno\.gunma\.jp|yoshioka\.gunma\.jp|asaminami\.hiroshima\.jp|daiwa\.hiroshima\.jp|etajima\.hiroshima\.jp|fuchu\.hiroshima\.jp|fukuyama\.hiroshima\.jp|hatsukaichi\.hiroshima\.jp|higashihiroshima\.hiroshima\.jp|hongo\.hiroshima\.jp|jinsekikogen\.hiroshima\.jp|kaita\.hiroshima\.jp|kui\.hiroshima\.jp|kumano\.hiroshima\.jp|kure\.hiroshima\.jp|mihara\.hiroshima\.jp|miyoshi\.hiroshima\.jp|naka\.hiroshima\.jp|onomichi\.hiroshima\.jp|osakikamijima\.hiroshima\.jp|otake\.hiroshima\.jp|saka\.hiroshima\.jp|sera\.hiroshima\.jp|seranishi\.hiroshima\.jp|shinichi\.hiroshima\.jp|shobara\.hiroshima\.jp|takehara\.hiroshima\.jp|abashiri\.hokkaido\.jp|abira\.hokkaido\.jp|aibetsu\.hokkaido\.jp|akabira\.hokkaido\.jp|akkeshi\.hokkaido\.jp|asahikawa\.hokkaido\.jp|ashibetsu\.hokkaido\.jp|ashoro\.hokkaido\.jp|assabu\.hokkaido\.jp|atsuma\.hokkaido\.jp|bibai\.hokkaido\.jp|biei\.hokkaido\.jp|bifuka\.hokkaido\.jp|bihoro\.hokkaido\.jp|biratori\.hokkaido\.jp|chippubetsu\.hokkaido\.jp|chitose\.hokkaido\.jp|date\.hokkaido\.jp|ebetsu\.hokkaido\.jp|embetsu\.hokkaido\.jp|eniwa\.hokkaido\.jp|erimo\.hokkaido\.jp|esan\.hokkaido\.jp|esashi\.hokkaido\.jp|fukagawa\.hokkaido\.jp|fukushima\.hokkaido\.jp|furano\.hokkaido\.jp|furubira\.hokkaido\.jp|haboro\.hokkaido\.jp|hakodate\.hokkaido\.jp|hamatonbetsu\.hokkaido\.jp|hidaka\.hokkaido\.jp|higashikagura\.hokkaido\.jp|higashikawa\.hokkaido\.jp|hiroo\.hokkaido\.jp|hokuryu\.hokkaido\.jp|hokuto\.hokkaido\.jp|honbetsu\.hokkaido\.jp|horokanai\.hokkaido\.jp|horonobe\.hokkaido\.jp|ikeda\.hokkaido\.jp|imakane\.hokkaido\.jp|ishikari\.hokkaido\.jp|iwamizawa\.hokkaido\.jp|iwanai\.hokkaido\.jp|kamifurano\.hokkaido\.jp|kamikawa\.hokkaido\.jp|kamishihoro\.hokkaido\.jp|kamisunagawa\.hokkaido\.jp|kamoenai\.hokkaido\.jp|kayabe\.hokkaido\.jp|kembuchi\.hokkaido\.jp|kikonai\.hokkaido\.jp|kimobetsu\.hokkaido\.jp|kitahiroshima\.hokkaido\.jp|kitami\.hokkaido\.jp|kiyosato\.hokkaido\.jp|koshimizu\.hokkaido\.jp|kunneppu\.hokkaido\.jp|kuriyama\.hokkaido\.jp|kuromatsunai\.hokkaido\.jp|kushiro\.hokkaido\.jp|kutchan\.hokkaido\.jp|kyowa\.hokkaido\.jp|mashike\.hokkaido\.jp|matsumae\.hokkaido\.jp|mikasa\.hokkaido\.jp|minamifurano\.hokkaido\.jp|mombetsu\.hokkaido\.jp|moseushi\.hokkaido\.jp|mukawa\.hokkaido\.jp|muroran\.hokkaido\.jp|naie\.hokkaido\.jp|nakagawa\.hokkaido\.jp|nakasatsunai\.hokkaido\.jp|nakatombetsu\.hokkaido\.jp|nanae\.hokkaido\.jp|nanporo\.hokkaido\.jp|nayoro\.hokkaido\.jp|nemuro\.hokkaido\.jp|niikappu\.hokkaido\.jp|niki\.hokkaido\.jp|nishiokoppe\.hokkaido\.jp|noboribetsu\.hokkaido\.jp|numata\.hokkaido\.jp|obihiro\.hokkaido\.jp|obira\.hokkaido\.jp|oketo\.hokkaido\.jp|okoppe\.hokkaido\.jp|otaru\.hokkaido\.jp|otobe\.hokkaido\.jp|otofuke\.hokkaido\.jp|otoineppu\.hokkaido\.jp|oumu\.hokkaido\.jp|ozora\.hokkaido\.jp|pippu\.hokkaido\.jp|rankoshi\.hokkaido\.jp|rebun\.hokkaido\.jp|rikubetsu\.hokkaido\.jp|rishiri\.hokkaido\.jp|rishirifuji\.hokkaido\.jp|saroma\.hokkaido\.jp|sarufutsu\.hokkaido\.jp|shakotan\.hokkaido\.jp|shari\.hokkaido\.jp|shibecha\.hokkaido\.jp|shibetsu\.hokkaido\.jp|shikabe\.hokkaido\.jp|shikaoi\.hokkaido\.jp|shimamaki\.hokkaido\.jp|shimizu\.hokkaido\.jp|shimokawa\.hokkaido\.jp|shinshinotsu\.hokkaido\.jp|shintoku\.hokkaido\.jp|shiranuka\.hokkaido\.jp|shiraoi\.hokkaido\.jp|shiriuchi\.hokkaido\.jp|sobetsu\.hokkaido\.jp|sunagawa\.hokkaido\.jp|taiki\.hokkaido\.jp|takasu\.hokkaido\.jp|takikawa\.hokkaido\.jp|takinoue\.hokkaido\.jp|teshikaga\.hokkaido\.jp|tobetsu\.hokkaido\.jp|tohma\.hokkaido\.jp|tomakomai\.hokkaido\.jp|tomari\.hokkaido\.jp|toya\.hokkaido\.jp|toyako\.hokkaido\.jp|toyotomi\.hokkaido\.jp|toyoura\.hokkaido\.jp|tsubetsu\.hokkaido\.jp|tsukigata\.hokkaido\.jp|urakawa\.hokkaido\.jp|urausu\.hokkaido\.jp|uryu\.hokkaido\.jp|utashinai\.hokkaido\.jp|wakkanai\.hokkaido\.jp|wassamu\.hokkaido\.jp|yakumo\.hokkaido\.jp|yoichi\.hokkaido\.jp|aioi\.hyogo\.jp|akashi\.hyogo\.jp|ako\.hyogo\.jp|amagasaki\.hyogo\.jp|aogaki\.hyogo\.jp|asago\.hyogo\.jp|ashiya\.hyogo\.jp|awaji\.hyogo\.jp|fukusaki\.hyogo\.jp|goshiki\.hyogo\.jp|harima\.hyogo\.jp|himeji\.hyogo\.jp|ichikawa\.hyogo\.jp|inagawa\.hyogo\.jp|itami\.hyogo\.jp|kakogawa\.hyogo\.jp|kamigori\.hyogo\.jp|kamikawa\.hyogo\.jp|kasai\.hyogo\.jp|kasuga\.hyogo\.jp|kawanishi\.hyogo\.jp|miki\.hyogo\.jp|minamiawaji\.hyogo\.jp|nishinomiya\.hyogo\.jp|nishiwaki\.hyogo\.jp|ono\.hyogo\.jp|sanda\.hyogo\.jp|sannan\.hyogo\.jp|sasayama\.hyogo\.jp|sayo\.hyogo\.jp|shingu\.hyogo\.jp|shinonsen\.hyogo\.jp|shiso\.hyogo\.jp|sumoto\.hyogo\.jp|taishi\.hyogo\.jp|taka\.hyogo\.jp|takarazuka\.hyogo\.jp|takasago\.hyogo\.jp|takino\.hyogo\.jp|tamba\.hyogo\.jp|tatsuno\.hyogo\.jp|toyooka\.hyogo\.jp|yabu\.hyogo\.jp|yashiro\.hyogo\.jp|yoka\.hyogo\.jp|yokawa\.hyogo\.jp|ami\.ibaraki\.jp|asahi\.ibaraki\.jp|bando\.ibaraki\.jp|chikusei\.ibaraki\.jp|daigo\.ibaraki\.jp|fujishiro\.ibaraki\.jp|hitachi\.ibaraki\.jp|hitachinaka\.ibaraki\.jp|hitachiomiya\.ibaraki\.jp|hitachiota\.ibaraki\.jp|ibaraki\.ibaraki\.jp|ina\.ibaraki\.jp|inashiki\.ibaraki\.jp|itako\.ibaraki\.jp|iwama\.ibaraki\.jp|joso\.ibaraki\.jp|kamisu\.ibaraki\.jp|kasama\.ibaraki\.jp|kashima\.ibaraki\.jp|kasumigaura\.ibaraki\.jp|koga\.ibaraki\.jp|miho\.ibaraki\.jp|mito\.ibaraki\.jp|moriya\.ibaraki\.jp|naka\.ibaraki\.jp|namegata\.ibaraki\.jp|oarai\.ibaraki\.jp|ogawa\.ibaraki\.jp|omitama\.ibaraki\.jp|ryugasaki\.ibaraki\.jp|sakai\.ibaraki\.jp|sakuragawa\.ibaraki\.jp|shimodate\.ibaraki\.jp|shimotsuma\.ibaraki\.jp|shirosato\.ibaraki\.jp|sowa\.ibaraki\.jp|suifu\.ibaraki\.jp|takahagi\.ibaraki\.jp|tamatsukuri\.ibaraki\.jp|tokai\.ibaraki\.jp|tomobe\.ibaraki\.jp|tone\.ibaraki\.jp|toride\.ibaraki\.jp|tsuchiura\.ibaraki\.jp|tsukuba\.ibaraki\.jp|uchihara\.ibaraki\.jp|ushiku\.ibaraki\.jp|yachiyo\.ibaraki\.jp|yamagata\.ibaraki\.jp|yawara\.ibaraki\.jp|yuki\.ibaraki\.jp|anamizu\.ishikawa\.jp|hakui\.ishikawa\.jp|hakusan\.ishikawa\.jp|kaga\.ishikawa\.jp|kahoku\.ishikawa\.jp|kanazawa\.ishikawa\.jp|kawakita\.ishikawa\.jp|komatsu\.ishikawa\.jp|nakanoto\.ishikawa\.jp|nanao\.ishikawa\.jp|nomi\.ishikawa\.jp|nonoichi\.ishikawa\.jp|noto\.ishikawa\.jp|shika\.ishikawa\.jp|suzu\.ishikawa\.jp|tsubata\.ishikawa\.jp|tsurugi\.ishikawa\.jp|uchinada\.ishikawa\.jp|wajima\.ishikawa\.jp|fudai\.iwate\.jp|fujisawa\.iwate\.jp|hanamaki\.iwate\.jp|hiraizumi\.iwate\.jp|hirono\.iwate\.jp|ichinohe\.iwate\.jp|ichinoseki\.iwate\.jp|iwaizumi\.iwate\.jp|iwate\.iwate\.jp|joboji\.iwate\.jp|kamaishi\.iwate\.jp|kanegasaki\.iwate\.jp|karumai\.iwate\.jp|kawai\.iwate\.jp|kitakami\.iwate\.jp|kuji\.iwate\.jp|kunohe\.iwate\.jp|kuzumaki\.iwate\.jp|miyako\.iwate\.jp|mizusawa\.iwate\.jp|morioka\.iwate\.jp|ninohe\.iwate\.jp|noda\.iwate\.jp|ofunato\.iwate\.jp|oshu\.iwate\.jp|otsuchi\.iwate\.jp|rikuzentakata\.iwate\.jp|shiwa\.iwate\.jp|shizukuishi\.iwate\.jp|sumita\.iwate\.jp|tanohata\.iwate\.jp|tono\.iwate\.jp|yahaba\.iwate\.jp|yamada\.iwate\.jp|ayagawa\.kagawa\.jp|higashikagawa\.kagawa\.jp|kanonji\.kagawa\.jp|kotohira\.kagawa\.jp|manno\.kagawa\.jp|marugame\.kagawa\.jp|mitoyo\.kagawa\.jp|naoshima\.kagawa\.jp|sanuki\.kagawa\.jp|tadotsu\.kagawa\.jp|takamatsu\.kagawa\.jp|tonosho\.kagawa\.jp|uchinomi\.kagawa\.jp|utazu\.kagawa\.jp|zentsuji\.kagawa\.jp|akune\.kagoshima\.jp|amami\.kagoshima\.jp|hioki\.kagoshima\.jp|isa\.kagoshima\.jp|isen\.kagoshima\.jp|izumi\.kagoshima\.jp|kagoshima\.kagoshima\.jp|kanoya\.kagoshima\.jp|kawanabe\.kagoshima\.jp|kinko\.kagoshima\.jp|kouyama\.kagoshima\.jp|makurazaki\.kagoshima\.jp|matsumoto\.kagoshima\.jp|minamitane\.kagoshima\.jp|nakatane\.kagoshima\.jp|nishinoomote\.kagoshima\.jp|satsumasendai\.kagoshima\.jp|soo\.kagoshima\.jp|tarumizu\.kagoshima\.jp|yusui\.kagoshima\.jp|aikawa\.kanagawa\.jp|atsugi\.kanagawa\.jp|ayase\.kanagawa\.jp|chigasaki\.kanagawa\.jp|ebina\.kanagawa\.jp|fujisawa\.kanagawa\.jp|hadano\.kanagawa\.jp|hakone\.kanagawa\.jp|hiratsuka\.kanagawa\.jp|isehara\.kanagawa\.jp|kaisei\.kanagawa\.jp|kamakura\.kanagawa\.jp|kiyokawa\.kanagawa\.jp|matsuda\.kanagawa\.jp|minamiashigara\.kanagawa\.jp|miura\.kanagawa\.jp|nakai\.kanagawa\.jp|ninomiya\.kanagawa\.jp|odawara\.kanagawa\.jp|oi\.kanagawa\.jp|oiso\.kanagawa\.jp|sagamihara\.kanagawa\.jp|samukawa\.kanagawa\.jp|tsukui\.kanagawa\.jp|yamakita\.kanagawa\.jp|yamato\.kanagawa\.jp|yokosuka\.kanagawa\.jp|yugawara\.kanagawa\.jp|zama\.kanagawa\.jp|zushi\.kanagawa\.jp|aki\.kochi\.jp|geisei\.kochi\.jp|hidaka\.kochi\.jp|higashitsuno\.kochi\.jp|ino\.kochi\.jp|kagami\.kochi\.jp|kami\.kochi\.jp|kitagawa\.kochi\.jp|kochi\.kochi\.jp|mihara\.kochi\.jp|motoyama\.kochi\.jp|muroto\.kochi\.jp|nahari\.kochi\.jp|nakamura\.kochi\.jp|nankoku\.kochi\.jp|nishitosa\.kochi\.jp|niyodogawa\.kochi\.jp|ochi\.kochi\.jp|okawa\.kochi\.jp|otoyo\.kochi\.jp|otsuki\.kochi\.jp|sakawa\.kochi\.jp|sukumo\.kochi\.jp|susaki\.kochi\.jp|tosa\.kochi\.jp|tosashimizu\.kochi\.jp|toyo\.kochi\.jp|tsuno\.kochi\.jp|umaji\.kochi\.jp|yasuda\.kochi\.jp|yusuhara\.kochi\.jp|amakusa\.kumamoto\.jp|arao\.kumamoto\.jp|aso\.kumamoto\.jp|choyo\.kumamoto\.jp|gyokuto\.kumamoto\.jp|kamiamakusa\.kumamoto\.jp|kikuchi\.kumamoto\.jp|kumamoto\.kumamoto\.jp|mashiki\.kumamoto\.jp|mifune\.kumamoto\.jp|minamata\.kumamoto\.jp|minamioguni\.kumamoto\.jp|nagasu\.kumamoto\.jp|nishihara\.kumamoto\.jp|oguni\.kumamoto\.jp|ozu\.kumamoto\.jp|sumoto\.kumamoto\.jp|takamori\.kumamoto\.jp|uki\.kumamoto\.jp|uto\.kumamoto\.jp|yamaga\.kumamoto\.jp|yamato\.kumamoto\.jp|yatsushiro\.kumamoto\.jp|ayabe\.kyoto\.jp|fukuchiyama\.kyoto\.jp|higashiyama\.kyoto\.jp|ide\.kyoto\.jp|ine\.kyoto\.jp|joyo\.kyoto\.jp|kameoka\.kyoto\.jp|kamo\.kyoto\.jp|kita\.kyoto\.jp|kizu\.kyoto\.jp|kumiyama\.kyoto\.jp|kyotamba\.kyoto\.jp|kyotanabe\.kyoto\.jp|kyotango\.kyoto\.jp|maizuru\.kyoto\.jp|minami\.kyoto\.jp|minamiyamashiro\.kyoto\.jp|miyazu\.kyoto\.jp|muko\.kyoto\.jp|nagaokakyo\.kyoto\.jp|nakagyo\.kyoto\.jp|nantan\.kyoto\.jp|oyamazaki\.kyoto\.jp|sakyo\.kyoto\.jp|seika\.kyoto\.jp|tanabe\.kyoto\.jp|uji\.kyoto\.jp|ujitawara\.kyoto\.jp|wazuka\.kyoto\.jp|yamashina\.kyoto\.jp|yawata\.kyoto\.jp|asahi\.mie\.jp|inabe\.mie\.jp|ise\.mie\.jp|kameyama\.mie\.jp|kawagoe\.mie\.jp|kiho\.mie\.jp|kisosaki\.mie\.jp|kiwa\.mie\.jp|komono\.mie\.jp|kumano\.mie\.jp|kuwana\.mie\.jp|matsusaka\.mie\.jp|meiwa\.mie\.jp|mihama\.mie\.jp|minamiise\.mie\.jp|misugi\.mie\.jp|miyama\.mie\.jp|nabari\.mie\.jp|shima\.mie\.jp|suzuka\.mie\.jp|tado\.mie\.jp|taiki\.mie\.jp|taki\.mie\.jp|tamaki\.mie\.jp|toba\.mie\.jp|tsu\.mie\.jp|udono\.mie\.jp|ureshino\.mie\.jp|watarai\.mie\.jp|yokkaichi\.mie\.jp|furukawa\.miyagi\.jp|higashimatsushima\.miyagi\.jp|ishinomaki\.miyagi\.jp|iwanuma\.miyagi\.jp|kakuda\.miyagi\.jp|kami\.miyagi\.jp|kawasaki\.miyagi\.jp|marumori\.miyagi\.jp|matsushima\.miyagi\.jp|minamisanriku\.miyagi\.jp|misato\.miyagi\.jp|murata\.miyagi\.jp|natori\.miyagi\.jp|ogawara\.miyagi\.jp|ohira\.miyagi\.jp|onagawa\.miyagi\.jp|osaki\.miyagi\.jp|rifu\.miyagi\.jp|semine\.miyagi\.jp|shibata\.miyagi\.jp|shichikashuku\.miyagi\.jp|shikama\.miyagi\.jp|shiogama\.miyagi\.jp|shiroishi\.miyagi\.jp|tagajo\.miyagi\.jp|taiwa\.miyagi\.jp|tome\.miyagi\.jp|tomiya\.miyagi\.jp|wakuya\.miyagi\.jp|watari\.miyagi\.jp|yamamoto\.miyagi\.jp|zao\.miyagi\.jp|aya\.miyazaki\.jp|ebino\.miyazaki\.jp|gokase\.miyazaki\.jp|hyuga\.miyazaki\.jp|kadogawa\.miyazaki\.jp|kawaminami\.miyazaki\.jp|kijo\.miyazaki\.jp|kitagawa\.miyazaki\.jp|kitakata\.miyazaki\.jp|kitaura\.miyazaki\.jp|kobayashi\.miyazaki\.jp|kunitomi\.miyazaki\.jp|kushima\.miyazaki\.jp|mimata\.miyazaki\.jp|miyakonojo\.miyazaki\.jp|miyazaki\.miyazaki\.jp|morotsuka\.miyazaki\.jp|nichinan\.miyazaki\.jp|nishimera\.miyazaki\.jp|nobeoka\.miyazaki\.jp|saito\.miyazaki\.jp|shiiba\.miyazaki\.jp|shintomi\.miyazaki\.jp|takaharu\.miyazaki\.jp|takanabe\.miyazaki\.jp|takazaki\.miyazaki\.jp|tsuno\.miyazaki\.jp|achi\.nagano\.jp|agematsu\.nagano\.jp|anan\.nagano\.jp|aoki\.nagano\.jp|asahi\.nagano\.jp|azumino\.nagano\.jp|chikuhoku\.nagano\.jp|chikuma\.nagano\.jp|chino\.nagano\.jp|fujimi\.nagano\.jp|hakuba\.nagano\.jp|hara\.nagano\.jp|hiraya\.nagano\.jp|iida\.nagano\.jp|iijima\.nagano\.jp|iiyama\.nagano\.jp|iizuna\.nagano\.jp|ikeda\.nagano\.jp|ikusaka\.nagano\.jp|ina\.nagano\.jp|karuizawa\.nagano\.jp|kawakami\.nagano\.jp|kiso\.nagano\.jp|kisofukushima\.nagano\.jp|kitaaiki\.nagano\.jp|komagane\.nagano\.jp|komoro\.nagano\.jp|matsukawa\.nagano\.jp|matsumoto\.nagano\.jp|miasa\.nagano\.jp|minamiaiki\.nagano\.jp|minamimaki\.nagano\.jp|minamiminowa\.nagano\.jp|minowa\.nagano\.jp|miyada\.nagano\.jp|miyota\.nagano\.jp|mochizuki\.nagano\.jp|nagano\.nagano\.jp|nagawa\.nagano\.jp|nagiso\.nagano\.jp|nakagawa\.nagano\.jp|nakano\.nagano\.jp|nozawaonsen\.nagano\.jp|obuse\.nagano\.jp|ogawa\.nagano\.jp|okaya\.nagano\.jp|omachi\.nagano\.jp|omi\.nagano\.jp|ookuwa\.nagano\.jp|ooshika\.nagano\.jp|otaki\.nagano\.jp|otari\.nagano\.jp|sakae\.nagano\.jp|sakaki\.nagano\.jp|saku\.nagano\.jp|sakuho\.nagano\.jp|shimosuwa\.nagano\.jp|shinanomachi\.nagano\.jp|shiojiri\.nagano\.jp|suwa\.nagano\.jp|suzaka\.nagano\.jp|takagi\.nagano\.jp|takamori\.nagano\.jp|takayama\.nagano\.jp|tateshina\.nagano\.jp|tatsuno\.nagano\.jp|togakushi\.nagano\.jp|togura\.nagano\.jp|tomi\.nagano\.jp|ueda\.nagano\.jp|wada\.nagano\.jp|yamagata\.nagano\.jp|yamanouchi\.nagano\.jp|yasaka\.nagano\.jp|yasuoka\.nagano\.jp|chijiwa\.nagasaki\.jp|futsu\.nagasaki\.jp|goto\.nagasaki\.jp|hasami\.nagasaki\.jp|hirado\.nagasaki\.jp|iki\.nagasaki\.jp|isahaya\.nagasaki\.jp|kawatana\.nagasaki\.jp|kuchinotsu\.nagasaki\.jp|matsuura\.nagasaki\.jp|nagasaki\.nagasaki\.jp|obama\.nagasaki\.jp|omura\.nagasaki\.jp|oseto\.nagasaki\.jp|saikai\.nagasaki\.jp|sasebo\.nagasaki\.jp|seihi\.nagasaki\.jp|shimabara\.nagasaki\.jp|shinkamigoto\.nagasaki\.jp|togitsu\.nagasaki\.jp|tsushima\.nagasaki\.jp|unzen\.nagasaki\.jp|ando\.nara\.jp|gose\.nara\.jp|heguri\.nara\.jp|higashiyoshino\.nara\.jp|ikaruga\.nara\.jp|ikoma\.nara\.jp|kamikitayama\.nara\.jp|kanmaki\.nara\.jp|kashiba\.nara\.jp|kashihara\.nara\.jp|katsuragi\.nara\.jp|kawai\.nara\.jp|kawakami\.nara\.jp|kawanishi\.nara\.jp|koryo\.nara\.jp|kurotaki\.nara\.jp|mitsue\.nara\.jp|miyake\.nara\.jp|nara\.nara\.jp|nosegawa\.nara\.jp|oji\.nara\.jp|ouda\.nara\.jp|oyodo\.nara\.jp|sakurai\.nara\.jp|sango\.nara\.jp|shimoichi\.nara\.jp|shimokitayama\.nara\.jp|shinjo\.nara\.jp|soni\.nara\.jp|takatori\.nara\.jp|tawaramoto\.nara\.jp|tenkawa\.nara\.jp|tenri\.nara\.jp|uda\.nara\.jp|yamatokoriyama\.nara\.jp|yamatotakada\.nara\.jp|yamazoe\.nara\.jp|yoshino\.nara\.jp|aga\.niigata\.jp|agano\.niigata\.jp|gosen\.niigata\.jp|itoigawa\.niigata\.jp|izumozaki\.niigata\.jp|joetsu\.niigata\.jp|kamo\.niigata\.jp|kariwa\.niigata\.jp|kashiwazaki\.niigata\.jp|minamiuonuma\.niigata\.jp|mitsuke\.niigata\.jp|muika\.niigata\.jp|murakami\.niigata\.jp|myoko\.niigata\.jp|nagaoka\.niigata\.jp|niigata\.niigata\.jp|ojiya\.niigata\.jp|omi\.niigata\.jp|sado\.niigata\.jp|sanjo\.niigata\.jp|seiro\.niigata\.jp|seirou\.niigata\.jp|sekikawa\.niigata\.jp|shibata\.niigata\.jp|tagami\.niigata\.jp|tainai\.niigata\.jp|tochio\.niigata\.jp|tokamachi\.niigata\.jp|tsubame\.niigata\.jp|tsunan\.niigata\.jp|uonuma\.niigata\.jp|yahiko\.niigata\.jp|yoita\.niigata\.jp|yuzawa\.niigata\.jp|beppu\.oita\.jp|bungoono\.oita\.jp|bungotakada\.oita\.jp|hasama\.oita\.jp|hiji\.oita\.jp|himeshima\.oita\.jp|hita\.oita\.jp|kamitsue\.oita\.jp|kokonoe\.oita\.jp|kuju\.oita\.jp|kunisaki\.oita\.jp|kusu\.oita\.jp|oita\.oita\.jp|saiki\.oita\.jp|taketa\.oita\.jp|tsukumi\.oita\.jp|usa\.oita\.jp|usuki\.oita\.jp|yufu\.oita\.jp|akaiwa\.okayama\.jp|asakuchi\.okayama\.jp|bizen\.okayama\.jp|hayashima\.okayama\.jp|ibara\.okayama\.jp|kagamino\.okayama\.jp|kasaoka\.okayama\.jp|kibichuo\.okayama\.jp|kumenan\.okayama\.jp|kurashiki\.okayama\.jp|maniwa\.okayama\.jp|misaki\.okayama\.jp|nagi\.okayama\.jp|niimi\.okayama\.jp|nishiawakura\.okayama\.jp|okayama\.okayama\.jp|satosho\.okayama\.jp|setouchi\.okayama\.jp|shinjo\.okayama\.jp|shoo\.okayama\.jp|soja\.okayama\.jp|takahashi\.okayama\.jp|tamano\.okayama\.jp|tsuyama\.okayama\.jp|wake\.okayama\.jp|yakage\.okayama\.jp|aguni\.okinawa\.jp|ginowan\.okinawa\.jp|ginoza\.okinawa\.jp|gushikami\.okinawa\.jp|haebaru\.okinawa\.jp|higashi\.okinawa\.jp|hirara\.okinawa\.jp|iheya\.okinawa\.jp|ishigaki\.okinawa\.jp|ishikawa\.okinawa\.jp|itoman\.okinawa\.jp|izena\.okinawa\.jp|kadena\.okinawa\.jp|kin\.okinawa\.jp|kitadaito\.okinawa\.jp|kitanakagusuku\.okinawa\.jp|kumejima\.okinawa\.jp|kunigami\.okinawa\.jp|minamidaito\.okinawa\.jp|motobu\.okinawa\.jp|nago\.okinawa\.jp|naha\.okinawa\.jp|nakagusuku\.okinawa\.jp|nakijin\.okinawa\.jp|nanjo\.okinawa\.jp|nishihara\.okinawa\.jp|ogimi\.okinawa\.jp|okinawa\.okinawa\.jp|onna\.okinawa\.jp|shimoji\.okinawa\.jp|taketomi\.okinawa\.jp|tarama\.okinawa\.jp|tokashiki\.okinawa\.jp|tomigusuku\.okinawa\.jp|tonaki\.okinawa\.jp|urasoe\.okinawa\.jp|uruma\.okinawa\.jp|yaese\.okinawa\.jp|yomitan\.okinawa\.jp|yonabaru\.okinawa\.jp|yonaguni\.okinawa\.jp|zamami\.okinawa\.jp|abeno\.osaka\.jp|chihayaakasaka\.osaka\.jp|chuo\.osaka\.jp|daito\.osaka\.jp|fujiidera\.osaka\.jp|habikino\.osaka\.jp|hannan\.osaka\.jp|higashiosaka\.osaka\.jp|higashisumiyoshi\.osaka\.jp|higashiyodogawa\.osaka\.jp|hirakata\.osaka\.jp|ibaraki\.osaka\.jp|ikeda\.osaka\.jp|izumi\.osaka\.jp|izumiotsu\.osaka\.jp|izumisano\.osaka\.jp|kadoma\.osaka\.jp|kaizuka\.osaka\.jp|kanan\.osaka\.jp|kashiwara\.osaka\.jp|katano\.osaka\.jp|kawachinagano\.osaka\.jp|kishiwada\.osaka\.jp|kita\.osaka\.jp|kumatori\.osaka\.jp|matsubara\.osaka\.jp|minato\.osaka\.jp|minoh\.osaka\.jp|misaki\.osaka\.jp|moriguchi\.osaka\.jp|neyagawa\.osaka\.jp|nishi\.osaka\.jp|nose\.osaka\.jp|osakasayama\.osaka\.jp|sakai\.osaka\.jp|sayama\.osaka\.jp|sennan\.osaka\.jp|settsu\.osaka\.jp|shijonawate\.osaka\.jp|shimamoto\.osaka\.jp|suita\.osaka\.jp|tadaoka\.osaka\.jp|taishi\.osaka\.jp|tajiri\.osaka\.jp|takaishi\.osaka\.jp|takatsuki\.osaka\.jp|tondabayashi\.osaka\.jp|toyonaka\.osaka\.jp|toyono\.osaka\.jp|yao\.osaka\.jp|ariake\.saga\.jp|arita\.saga\.jp|fukudomi\.saga\.jp|genkai\.saga\.jp|hamatama\.saga\.jp|hizen\.saga\.jp|imari\.saga\.jp|kamimine\.saga\.jp|kanzaki\.saga\.jp|karatsu\.saga\.jp|kashima\.saga\.jp|kitagata\.saga\.jp|kitahata\.saga\.jp|kiyama\.saga\.jp|kouhoku\.saga\.jp|kyuragi\.saga\.jp|nishiarita\.saga\.jp|ogi\.saga\.jp|omachi\.saga\.jp|ouchi\.saga\.jp|saga\.saga\.jp|shiroishi\.saga\.jp|taku\.saga\.jp|tara\.saga\.jp|tosu\.saga\.jp|yoshinogari\.saga\.jp|arakawa\.saitama\.jp|asaka\.saitama\.jp|chichibu\.saitama\.jp|fujimi\.saitama\.jp|fujimino\.saitama\.jp|fukaya\.saitama\.jp|hanno\.saitama\.jp|hanyu\.saitama\.jp|hasuda\.saitama\.jp|hatogaya\.saitama\.jp|hatoyama\.saitama\.jp|hidaka\.saitama\.jp|higashichichibu\.saitama\.jp|higashimatsuyama\.saitama\.jp|honjo\.saitama\.jp|ina\.saitama\.jp|iruma\.saitama\.jp|iwatsuki\.saitama\.jp|kamiizumi\.saitama\.jp|kamikawa\.saitama\.jp|kamisato\.saitama\.jp|kasukabe\.saitama\.jp|kawagoe\.saitama\.jp|kawaguchi\.saitama\.jp|kawajima\.saitama\.jp|kazo\.saitama\.jp|kitamoto\.saitama\.jp|koshigaya\.saitama\.jp|kounosu\.saitama\.jp|kuki\.saitama\.jp|kumagaya\.saitama\.jp|matsubushi\.saitama\.jp|minano\.saitama\.jp|misato\.saitama\.jp|miyashiro\.saitama\.jp|miyoshi\.saitama\.jp|moroyama\.saitama\.jp|nagatoro\.saitama\.jp|namegawa\.saitama\.jp|niiza\.saitama\.jp|ogano\.saitama\.jp|ogawa\.saitama\.jp|ogose\.saitama\.jp|okegawa\.saitama\.jp|omiya\.saitama\.jp|otaki\.saitama\.jp|ranzan\.saitama\.jp|ryokami\.saitama\.jp|saitama\.saitama\.jp|sakado\.saitama\.jp|satte\.saitama\.jp|sayama\.saitama\.jp|shiki\.saitama\.jp|shiraoka\.saitama\.jp|soka\.saitama\.jp|sugito\.saitama\.jp|toda\.saitama\.jp|tokigawa\.saitama\.jp|tokorozawa\.saitama\.jp|tsurugashima\.saitama\.jp|urawa\.saitama\.jp|warabi\.saitama\.jp|yashio\.saitama\.jp|yokoze\.saitama\.jp|yono\.saitama\.jp|yorii\.saitama\.jp|yoshida\.saitama\.jp|yoshikawa\.saitama\.jp|yoshimi\.saitama\.jp|aisho\.shiga\.jp|gamo\.shiga\.jp|higashiomi\.shiga\.jp|hikone\.shiga\.jp|koka\.shiga\.jp|konan\.shiga\.jp|kosei\.shiga\.jp|koto\.shiga\.jp|kusatsu\.shiga\.jp|maibara\.shiga\.jp|moriyama\.shiga\.jp|nagahama\.shiga\.jp|nishiazai\.shiga\.jp|notogawa\.shiga\.jp|omihachiman\.shiga\.jp|otsu\.shiga\.jp|ritto\.shiga\.jp|ryuoh\.shiga\.jp|takashima\.shiga\.jp|takatsuki\.shiga\.jp|torahime\.shiga\.jp|toyosato\.shiga\.jp|yasu\.shiga\.jp|akagi\.shimane\.jp|ama\.shimane\.jp|gotsu\.shimane\.jp|hamada\.shimane\.jp|higashiizumo\.shimane\.jp|hikawa\.shimane\.jp|hikimi\.shimane\.jp|izumo\.shimane\.jp|kakinoki\.shimane\.jp|masuda\.shimane\.jp|matsue\.shimane\.jp|misato\.shimane\.jp|nishinoshima\.shimane\.jp|ohda\.shimane\.jp|okinoshima\.shimane\.jp|okuizumo\.shimane\.jp|shimane\.shimane\.jp|tamayu\.shimane\.jp|tsuwano\.shimane\.jp|unnan\.shimane\.jp|yakumo\.shimane\.jp|yasugi\.shimane\.jp|yatsuka\.shimane\.jp|arai\.shizuoka\.jp|atami\.shizuoka\.jp|fuji\.shizuoka\.jp|fujieda\.shizuoka\.jp|fujikawa\.shizuoka\.jp|fujinomiya\.shizuoka\.jp|fukuroi\.shizuoka\.jp|gotemba\.shizuoka\.jp|haibara\.shizuoka\.jp|hamamatsu\.shizuoka\.jp|higashiizu\.shizuoka\.jp|ito\.shizuoka\.jp|iwata\.shizuoka\.jp|izu\.shizuoka\.jp|izunokuni\.shizuoka\.jp|kakegawa\.shizuoka\.jp|kannami\.shizuoka\.jp|kawanehon\.shizuoka\.jp|kawazu\.shizuoka\.jp|kikugawa\.shizuoka\.jp|kosai\.shizuoka\.jp|makinohara\.shizuoka\.jp|matsuzaki\.shizuoka\.jp|minamiizu\.shizuoka\.jp|mishima\.shizuoka\.jp|morimachi\.shizuoka\.jp|nishiizu\.shizuoka\.jp|numazu\.shizuoka\.jp|omaezaki\.shizuoka\.jp|shimada\.shizuoka\.jp|shimizu\.shizuoka\.jp|shimoda\.shizuoka\.jp|shizuoka\.shizuoka\.jp|susono\.shizuoka\.jp|yaizu\.shizuoka\.jp|yoshida\.shizuoka\.jp|ashikaga\.tochigi\.jp|bato\.tochigi\.jp|haga\.tochigi\.jp|ichikai\.tochigi\.jp|iwafune\.tochigi\.jp|kaminokawa\.tochigi\.jp|kanuma\.tochigi\.jp|karasuyama\.tochigi\.jp|kuroiso\.tochigi\.jp|mashiko\.tochigi\.jp|mibu\.tochigi\.jp|moka\.tochigi\.jp|motegi\.tochigi\.jp|nasu\.tochigi\.jp|nasushiobara\.tochigi\.jp|nikko\.tochigi\.jp|nishikata\.tochigi\.jp|nogi\.tochigi\.jp|ohira\.tochigi\.jp|ohtawara\.tochigi\.jp|oyama\.tochigi\.jp|sakura\.tochigi\.jp|sano\.tochigi\.jp|shimotsuke\.tochigi\.jp|shioya\.tochigi\.jp|takanezawa\.tochigi\.jp|tochigi\.tochigi\.jp|tsuga\.tochigi\.jp|ujiie\.tochigi\.jp|utsunomiya\.tochigi\.jp|yaita\.tochigi\.jp|aizumi\.tokushima\.jp|anan\.tokushima\.jp|ichiba\.tokushima\.jp|itano\.tokushima\.jp|kainan\.tokushima\.jp|komatsushima\.tokushima\.jp|matsushige\.tokushima\.jp|mima\.tokushima\.jp|minami\.tokushima\.jp|miyoshi\.tokushima\.jp|mugi\.tokushima\.jp|nakagawa\.tokushima\.jp|naruto\.tokushima\.jp|sanagochi\.tokushima\.jp|shishikui\.tokushima\.jp|tokushima\.tokushima\.jp|wajiki\.tokushima\.jp|adachi\.tokyo\.jp|akiruno\.tokyo\.jp|akishima\.tokyo\.jp|aogashima\.tokyo\.jp|arakawa\.tokyo\.jp|bunkyo\.tokyo\.jp|chiyoda\.tokyo\.jp|chofu\.tokyo\.jp|chuo\.tokyo\.jp|edogawa\.tokyo\.jp|fuchu\.tokyo\.jp|fussa\.tokyo\.jp|hachijo\.tokyo\.jp|hachioji\.tokyo\.jp|hamura\.tokyo\.jp|higashikurume\.tokyo\.jp|higashimurayama\.tokyo\.jp|higashiyamato\.tokyo\.jp|hino\.tokyo\.jp|hinode\.tokyo\.jp|hinohara\.tokyo\.jp|inagi\.tokyo\.jp|itabashi\.tokyo\.jp|katsushika\.tokyo\.jp|kita\.tokyo\.jp|kiyose\.tokyo\.jp|kodaira\.tokyo\.jp|koganei\.tokyo\.jp|kokubunji\.tokyo\.jp|komae\.tokyo\.jp|koto\.tokyo\.jp|kouzushima\.tokyo\.jp|kunitachi\.tokyo\.jp|machida\.tokyo\.jp|meguro\.tokyo\.jp|minato\.tokyo\.jp|mitaka\.tokyo\.jp|mizuho\.tokyo\.jp|musashimurayama\.tokyo\.jp|musashino\.tokyo\.jp|nakano\.tokyo\.jp|nerima\.tokyo\.jp|ogasawara\.tokyo\.jp|okutama\.tokyo\.jp|ome\.tokyo\.jp|oshima\.tokyo\.jp|ota\.tokyo\.jp|setagaya\.tokyo\.jp|shibuya\.tokyo\.jp|shinagawa\.tokyo\.jp|shinjuku\.tokyo\.jp|suginami\.tokyo\.jp|sumida\.tokyo\.jp|tachikawa\.tokyo\.jp|taito\.tokyo\.jp|tama\.tokyo\.jp|toshima\.tokyo\.jp|chizu\.tottori\.jp|hino\.tottori\.jp|kawahara\.tottori\.jp|koge\.tottori\.jp|kotoura\.tottori\.jp|misasa\.tottori\.jp|nanbu\.tottori\.jp|nichinan\.tottori\.jp|sakaiminato\.tottori\.jp|tottori\.tottori\.jp|wakasa\.tottori\.jp|yazu\.tottori\.jp|yonago\.tottori\.jp|asahi\.toyama\.jp|fuchu\.toyama\.jp|fukumitsu\.toyama\.jp|funahashi\.toyama\.jp|himi\.toyama\.jp|imizu\.toyama\.jp|inami\.toyama\.jp|johana\.toyama\.jp|kamiichi\.toyama\.jp|kurobe\.toyama\.jp|nakaniikawa\.toyama\.jp|namerikawa\.toyama\.jp|nanto\.toyama\.jp|nyuzen\.toyama\.jp|oyabe\.toyama\.jp|taira\.toyama\.jp|takaoka\.toyama\.jp|tateyama\.toyama\.jp|toga\.toyama\.jp|tonami\.toyama\.jp|toyama\.toyama\.jp|unazuki\.toyama\.jp|uozu\.toyama\.jp|yamada\.toyama\.jp|arida\.wakayama\.jp|aridagawa\.wakayama\.jp|gobo\.wakayama\.jp|hashimoto\.wakayama\.jp|hidaka\.wakayama\.jp|hirogawa\.wakayama\.jp|inami\.wakayama\.jp|iwade\.wakayama\.jp|kainan\.wakayama\.jp|kamitonda\.wakayama\.jp|katsuragi\.wakayama\.jp|kimino\.wakayama\.jp|kinokawa\.wakayama\.jp|kitayama\.wakayama\.jp|koya\.wakayama\.jp|koza\.wakayama\.jp|kozagawa\.wakayama\.jp|kudoyama\.wakayama\.jp|kushimoto\.wakayama\.jp|mihama\.wakayama\.jp|misato\.wakayama\.jp|nachikatsuura\.wakayama\.jp|shingu\.wakayama\.jp|shirahama\.wakayama\.jp|taiji\.wakayama\.jp|tanabe\.wakayama\.jp|wakayama\.wakayama\.jp|yuasa\.wakayama\.jp|yura\.wakayama\.jp|asahi\.yamagata\.jp|funagata\.yamagata\.jp|higashine\.yamagata\.jp|iide\.yamagata\.jp|kahoku\.yamagata\.jp|kaminoyama\.yamagata\.jp|kaneyama\.yamagata\.jp|kawanishi\.yamagata\.jp|mamurogawa\.yamagata\.jp|mikawa\.yamagata\.jp|murayama\.yamagata\.jp|nagai\.yamagata\.jp|nakayama\.yamagata\.jp|nanyo\.yamagata\.jp|nishikawa\.yamagata\.jp|obanazawa\.yamagata\.jp|oe\.yamagata\.jp|oguni\.yamagata\.jp|ohkura\.yamagata\.jp|oishida\.yamagata\.jp|sagae\.yamagata\.jp|sakata\.yamagata\.jp|sakegawa\.yamagata\.jp|shinjo\.yamagata\.jp|shirataka\.yamagata\.jp|shonai\.yamagata\.jp|takahata\.yamagata\.jp|tendo\.yamagata\.jp|tozawa\.yamagata\.jp|tsuruoka\.yamagata\.jp|yamagata\.yamagata\.jp|yamanobe\.yamagata\.jp|yonezawa\.yamagata\.jp|yuza\.yamagata\.jp|abu\.yamaguchi\.jp|hagi\.yamaguchi\.jp|hikari\.yamaguchi\.jp|hofu\.yamaguchi\.jp|iwakuni\.yamaguchi\.jp|kudamatsu\.yamaguchi\.jp|mitou\.yamaguchi\.jp|nagato\.yamaguchi\.jp|oshima\.yamaguchi\.jp|shimonoseki\.yamaguchi\.jp|shunan\.yamaguchi\.jp|tabuse\.yamaguchi\.jp|tokuyama\.yamaguchi\.jp|toyota\.yamaguchi\.jp|ube\.yamaguchi\.jp|yuu\.yamaguchi\.jp|chuo\.yamanashi\.jp|doshi\.yamanashi\.jp|fuefuki\.yamanashi\.jp|fujikawa\.yamanashi\.jp|fujikawaguchiko\.yamanashi\.jp|fujiyoshida\.yamanashi\.jp|hayakawa\.yamanashi\.jp|hokuto\.yamanashi\.jp|ichikawamisato\.yamanashi\.jp|kai\.yamanashi\.jp|kofu\.yamanashi\.jp|koshu\.yamanashi\.jp|kosuge\.yamanashi\.jp|minami-alps\.yamanashi\.jp|minobu\.yamanashi\.jp|nakamichi\.yamanashi\.jp|nanbu\.yamanashi\.jp|narusawa\.yamanashi\.jp|nirasaki\.yamanashi\.jp|nishikatsura\.yamanashi\.jp|oshino\.yamanashi\.jp|otsuki\.yamanashi\.jp|showa\.yamanashi\.jp|tabayama\.yamanashi\.jp|tsuru\.yamanashi\.jp|uenohara\.yamanashi\.jp|yamanakako\.yamanashi\.jp|yamanashi\.yamanashi\.jp|[^.]+\.ke|kg|org\.kg|net\.kg|com\.kg|edu\.kg|gov\.kg|mil\.kg|[^.]+\.kh|ki|edu\.ki|biz\.ki|net\.ki|org\.ki|gov\.ki|info\.ki|com\.ki|km|org\.km|nom\.km|gov\.km|prd\.km|tm\.km|edu\.km|mil\.km|ass\.km|com\.km|coop\.km|asso\.km|presse\.km|medecin\.km|notaires\.km|pharmaciens\.km|veterinaire\.km|gouv\.km|kn|net\.kn|org\.kn|edu\.kn|gov\.kn|kp|com\.kp|edu\.kp|gov\.kp|org\.kp|rep\.kp|tra\.kp|kr|ac\.kr|co\.kr|es\.kr|go\.kr|hs\.kr|kg\.kr|mil\.kr|ms\.kr|ne\.kr|or\.kr|pe\.kr|re\.kr|sc\.kr|busan\.kr|chungbuk\.kr|chungnam\.kr|daegu\.kr|daejeon\.kr|gangwon\.kr|gwangju\.kr|gyeongbuk\.kr|gyeonggi\.kr|gyeongnam\.kr|incheon\.kr|jeju\.kr|jeonbuk\.kr|jeonnam\.kr|seoul\.kr|ulsan\.kr|[^.]+\.kw|ky|edu\.ky|gov\.ky|com\.ky|org\.ky|net\.ky|kz|org\.kz|edu\.kz|net\.kz|gov\.kz|mil\.kz|com\.kz|la|int\.la|net\.la|info\.la|edu\.la|gov\.la|per\.la|com\.la|org\.la|lb|com\.lb|edu\.lb|gov\.lb|net\.lb|org\.lb|lc|com\.lc|net\.lc|co\.lc|org\.lc|edu\.lc|gov\.lc|li|lk|gov\.lk|sch\.lk|net\.lk|int\.lk|com\.lk|org\.lk|edu\.lk|ngo\.lk|soc\.lk|web\.lk|ltd\.lk|assn\.lk|grp\.lk|hotel\.lk|ac\.lk|lr|com\.lr|edu\.lr|gov\.lr|org\.lr|net\.lr|ls|co\.ls|org\.ls|lt|gov\.lt|lu|lv|com\.lv|edu\.lv|gov\.lv|org\.lv|mil\.lv|id\.lv|net\.lv|asn\.lv|conf\.lv|ly|com\.ly|net\.ly|gov\.ly|plc\.ly|edu\.ly|sch\.ly|med\.ly|org\.ly|id\.ly|ma|co\.ma|net\.ma|gov\.ma|org\.ma|ac\.ma|press\.ma|mc|tm\.mc|asso\.mc|md|me|co\.me|net\.me|org\.me|edu\.me|ac\.me|gov\.me|its\.me|priv\.me|mg|org\.mg|nom\.mg|gov\.mg|prd\.mg|tm\.mg|edu\.mg|mil\.mg|com\.mg|co\.mg|mh|mil|mk|com\.mk|org\.mk|net\.mk|edu\.mk|gov\.mk|inf\.mk|name\.mk|ml|com\.ml|edu\.ml|gouv\.ml|gov\.ml|net\.ml|org\.ml|presse\.ml|[^.]+\.mm|mn|gov\.mn|edu\.mn|org\.mn|mo|com\.mo|net\.mo|org\.mo|edu\.mo|gov\.mo|mobi|mp|mq|mr|gov\.mr|ms|com\.ms|edu\.ms|gov\.ms|net\.ms|org\.ms|mt|com\.mt|edu\.mt|net\.mt|org\.mt|mu|com\.mu|net\.mu|org\.mu|gov\.mu|ac\.mu|co\.mu|or\.mu|museum|academy\.museum|agriculture\.museum|air\.museum|airguard\.museum|alabama\.museum|alaska\.museum|amber\.museum|ambulance\.museum|american\.museum|americana\.museum|americanantiques\.museum|americanart\.museum|amsterdam\.museum|and\.museum|annefrank\.museum|anthro\.museum|anthropology\.museum|antiques\.museum|aquarium\.museum|arboretum\.museum|archaeological\.museum|archaeology\.museum|architecture\.museum|art\.museum|artanddesign\.museum|artcenter\.museum|artdeco\.museum|arteducation\.museum|artgallery\.museum|arts\.museum|artsandcrafts\.museum|asmatart\.museum|assassination\.museum|assisi\.museum|association\.museum|astronomy\.museum|atlanta\.museum|austin\.museum|australia\.museum|automotive\.museum|aviation\.museum|axis\.museum|badajoz\.museum|baghdad\.museum|bahn\.museum|bale\.museum|baltimore\.museum|barcelona\.museum|baseball\.museum|basel\.museum|baths\.museum|bauern\.museum|beauxarts\.museum|beeldengeluid\.museum|bellevue\.museum|bergbau\.museum|berkeley\.museum|berlin\.museum|bern\.museum|bible\.museum|bilbao\.museum|bill\.museum|birdart\.museum|birthplace\.museum|bonn\.museum|boston\.museum|botanical\.museum|botanicalgarden\.museum|botanicgarden\.museum|botany\.museum|brandywinevalley\.museum|brasil\.museum|bristol\.museum|british\.museum|britishcolumbia\.museum|broadcast\.museum|brunel\.museum|brussel\.museum|brussels\.museum|bruxelles\.museum|building\.museum|burghof\.museum|bus\.museum|bushey\.museum|cadaques\.museum|california\.museum|cambridge\.museum|can\.museum|canada\.museum|capebreton\.museum|carrier\.museum|cartoonart\.museum|casadelamoneda\.museum|castle\.museum|castres\.museum|celtic\.museum|center\.museum|chattanooga\.museum|cheltenham\.museum|chesapeakebay\.museum|chicago\.museum|children\.museum|childrens\.museum|childrensgarden\.museum|chiropractic\.museum|chocolate\.museum|christiansburg\.museum|cincinnati\.museum|cinema\.museum|circus\.museum|civilisation\.museum|civilization\.museum|civilwar\.museum|clinton\.museum|clock\.museum|coal\.museum|coastaldefence\.museum|cody\.museum|coldwar\.museum|collection\.museum|colonialwilliamsburg\.museum|coloradoplateau\.museum|columbia\.museum|columbus\.museum|communication\.museum|communications\.museum|community\.museum|computer\.museum|computerhistory\.museum|comunicações\.museum|contemporary\.museum|contemporaryart\.museum|convent\.museum|copenhagen\.museum|corporation\.museum|correios-e-telecomunicações\.museum|corvette\.museum|costume\.museum|countryestate\.museum|county\.museum|crafts\.museum|cranbrook\.museum|creation\.museum|cultural\.museum|culturalcenter\.museum|culture\.museum|cyber\.museum|cymru\.museum|dali\.museum|dallas\.museum|database\.museum|ddr\.museum|decorativearts\.museum|delaware\.museum|delmenhorst\.museum|denmark\.museum|depot\.museum|design\.museum|detroit\.museum|dinosaur\.museum|discovery\.museum|dolls\.museum|donostia\.museum|durham\.museum|eastafrica\.museum|eastcoast\.museum|education\.museum|educational\.museum|egyptian\.museum|eisenbahn\.museum|elburg\.museum|elvendrell\.museum|embroidery\.museum|encyclopedic\.museum|england\.museum|entomology\.museum|environment\.museum|environmentalconservation\.museum|epilepsy\.museum|essex\.museum|estate\.museum|ethnology\.museum|exeter\.museum|exhibition\.museum|family\.museum|farm\.museum|farmequipment\.museum|farmers\.museum|farmstead\.museum|field\.museum|figueres\.museum|filatelia\.museum|film\.museum|fineart\.museum|finearts\.museum|finland\.museum|flanders\.museum|florida\.museum|force\.museum|fortmissoula\.museum|fortworth\.museum|foundation\.museum|francaise\.museum|frankfurt\.museum|franziskaner\.museum|freemasonry\.museum|freiburg\.museum|fribourg\.museum|frog\.museum|fundacio\.museum|furniture\.museum|gallery\.museum|garden\.museum|gateway\.museum|geelvinck\.museum|gemological\.museum|geology\.museum|georgia\.museum|giessen\.museum|glas\.museum|glass\.museum|gorge\.museum|grandrapids\.museum|graz\.museum|guernsey\.museum|halloffame\.museum|hamburg\.museum|handson\.museum|harvestcelebration\.museum|hawaii\.museum|health\.museum|heimatunduhren\.museum|hellas\.museum|helsinki\.museum|hembygdsforbund\.museum|heritage\.museum|histoire\.museum|historical\.museum|historicalsociety\.museum|historichouses\.museum|historisch\.museum|historisches\.museum|history\.museum|historyofscience\.museum|horology\.museum|house\.museum|humanities\.museum|illustration\.museum|imageandsound\.museum|indian\.museum|indiana\.museum|indianapolis\.museum|indianmarket\.museum|intelligence\.museum|interactive\.museum|iraq\.museum|iron\.museum|isleofman\.museum|jamison\.museum|jefferson\.museum|jerusalem\.museum|jewelry\.museum|jewish\.museum|jewishart\.museum|jfk\.museum|journalism\.museum|judaica\.museum|judygarland\.museum|juedisches\.museum|juif\.museum|karate\.museum|karikatur\.museum|kids\.museum|koebenhavn\.museum|koeln\.museum|kunst\.museum|kunstsammlung\.museum|kunstunddesign\.museum|labor\.museum|labour\.museum|lajolla\.museum|lancashire\.museum|landes\.museum|lans\.museum|läns\.museum|larsson\.museum|lewismiller\.museum|lincoln\.museum|linz\.museum|living\.museum|livinghistory\.museum|localhistory\.museum|london\.museum|losangeles\.museum|louvre\.museum|loyalist\.museum|lucerne\.museum|luxembourg\.museum|luzern\.museum|mad\.museum|madrid\.museum|mallorca\.museum|manchester\.museum|mansion\.museum|mansions\.museum|manx\.museum|marburg\.museum|maritime\.museum|maritimo\.museum|maryland\.museum|marylhurst\.museum|media\.museum|medical\.museum|medizinhistorisches\.museum|meeres\.museum|memorial\.museum|mesaverde\.museum|michigan\.museum|midatlantic\.museum|military\.museum|mill\.museum|miners\.museum|mining\.museum|minnesota\.museum|missile\.museum|missoula\.museum|modern\.museum|moma\.museum|money\.museum|monmouth\.museum|monticello\.museum|montreal\.museum|moscow\.museum|motorcycle\.museum|muenchen\.museum|muenster\.museum|mulhouse\.museum|muncie\.museum|museet\.museum|museumcenter\.museum|museumvereniging\.museum|music\.museum|national\.museum|nationalfirearms\.museum|nationalheritage\.museum|nativeamerican\.museum|naturalhistory\.museum|naturalhistorymuseum\.museum|naturalsciences\.museum|nature\.museum|naturhistorisches\.museum|natuurwetenschappen\.museum|naumburg\.museum|naval\.museum|nebraska\.museum|neues\.museum|newhampshire\.museum|newjersey\.museum|newmexico\.museum|newport\.museum|newspaper\.museum|newyork\.museum|niepce\.museum|norfolk\.museum|north\.museum|nrw\.museum|nuernberg\.museum|nuremberg\.museum|nyc\.museum|nyny\.museum|oceanographic\.museum|oceanographique\.museum|omaha\.museum|online\.museum|ontario\.museum|openair\.museum|oregon\.museum|oregontrail\.museum|otago\.museum|oxford\.museum|pacific\.museum|paderborn\.museum|palace\.museum|paleo\.museum|palmsprings\.museum|panama\.museum|paris\.museum|pasadena\.museum|pharmacy\.museum|philadelphia\.museum|philadelphiaarea\.museum|philately\.museum|phoenix\.museum|photography\.museum|pilots\.museum|pittsburgh\.museum|planetarium\.museum|plantation\.museum|plants\.museum|plaza\.museum|portal\.museum|portland\.museum|portlligat\.museum|posts-and-telecommunications\.museum|preservation\.museum|presidio\.museum|press\.museum|project\.museum|public\.museum|pubol\.museum|quebec\.museum|railroad\.museum|railway\.museum|research\.museum|resistance\.museum|riodejaneiro\.museum|rochester\.museum|rockart\.museum|roma\.museum|russia\.museum|saintlouis\.museum|salem\.museum|salvadordali\.museum|salzburg\.museum|sandiego\.museum|sanfrancisco\.museum|santabarbara\.museum|santacruz\.museum|santafe\.museum|saskatchewan\.museum|satx\.museum|savannahga\.museum|schlesisches\.museum|schoenbrunn\.museum|schokoladen\.museum|school\.museum|schweiz\.museum|science\.museum|scienceandhistory\.museum|scienceandindustry\.museum|sciencecenter\.museum|sciencecenters\.museum|science-fiction\.museum|sciencehistory\.museum|sciences\.museum|sciencesnaturelles\.museum|scotland\.museum|seaport\.museum|settlement\.museum|settlers\.museum|shell\.museum|sherbrooke\.museum|sibenik\.museum|silk\.museum|ski\.museum|skole\.museum|society\.museum|sologne\.museum|soundandvision\.museum|southcarolina\.museum|southwest\.museum|space\.museum|spy\.museum|square\.museum|stadt\.museum|stalbans\.museum|starnberg\.museum|state\.museum|stateofdelaware\.museum|station\.museum|steam\.museum|steiermark\.museum|stjohn\.museum|stockholm\.museum|stpetersburg\.museum|stuttgart\.museum|suisse\.museum|surgeonshall\.museum|surrey\.museum|svizzera\.museum|sweden\.museum|sydney\.museum|tank\.museum|tcm\.museum|technology\.museum|telekommunikation\.museum|television\.museum|texas\.museum|textile\.museum|theater\.museum|time\.museum|timekeeping\.museum|topology\.museum|torino\.museum|touch\.museum|town\.museum|transport\.museum|tree\.museum|trolley\.museum|trust\.museum|trustee\.museum|uhren\.museum|ulm\.museum|undersea\.museum|university\.museum|usa\.museum|usantiques\.museum|usarts\.museum|uscountryestate\.museum|usculture\.museum|usdecorativearts\.museum|usgarden\.museum|ushistory\.museum|ushuaia\.museum|uslivinghistory\.museum|utah\.museum|uvic\.museum|valley\.museum|vantaa\.museum|versailles\.museum|viking\.museum|village\.museum|virginia\.museum|virtual\.museum|virtuel\.museum|vlaanderen\.museum|volkenkunde\.museum|wales\.museum|wallonie\.museum|war\.museum|washingtondc\.museum|watchandclock\.museum|watch-and-clock\.museum|western\.museum|westfalen\.museum|whaling\.museum|wildlife\.museum|williamsburg\.museum|windmill\.museum|workshop\.museum|york\.museum|yorkshire\.museum|yosemite\.museum|youth\.museum|zoological\.museum|zoology\.museum|ירושלים\.museum|иком\.museum|mv|aero\.mv|biz\.mv|com\.mv|coop\.mv|edu\.mv|gov\.mv|info\.mv|int\.mv|mil\.mv|museum\.mv|name\.mv|net\.mv|org\.mv|pro\.mv|mw|ac\.mw|biz\.mw|co\.mw|com\.mw|coop\.mw|edu\.mw|gov\.mw|int\.mw|museum\.mw|net\.mw|org\.mw|mx|com\.mx|org\.mx|gob\.mx|edu\.mx|net\.mx|my|com\.my|net\.my|org\.my|gov\.my|edu\.my|mil\.my|name\.my|mz|ac\.mz|adv\.mz|co\.mz|edu\.mz|gov\.mz|mil\.mz|net\.mz|org\.mz|na|info\.na|pro\.na|name\.na|school\.na|or\.na|dr\.na|us\.na|mx\.na|ca\.na|in\.na|cc\.na|tv\.na|ws\.na|mobi\.na|co\.na|com\.na|org\.na|name|nc|asso\.nc|ne|net|nf|com\.nf|net\.nf|per\.nf|rec\.nf|web\.nf|arts\.nf|firm\.nf|info\.nf|other\.nf|store\.nf|ng|com\.ng|edu\.ng|gov\.ng|i\.ng|mil\.ng|mobi\.ng|name\.ng|net\.ng|org\.ng|sch\.ng|ni|ac\.ni|biz\.ni|co\.ni|com\.ni|edu\.ni|gob\.ni|in\.ni|info\.ni|int\.ni|mil\.ni|net\.ni|nom\.ni|org\.ni|web\.ni|nl|bv\.nl|no|fhs\.no|vgs\.no|fylkesbibl\.no|folkebibl\.no|museum\.no|idrett\.no|priv\.no|mil\.no|stat\.no|dep\.no|kommune\.no|herad\.no|aa\.no|ah\.no|bu\.no|fm\.no|hl\.no|hm\.no|jan-mayen\.no|mr\.no|nl\.no|nt\.no|of\.no|ol\.no|oslo\.no|rl\.no|sf\.no|st\.no|svalbard\.no|tm\.no|tr\.no|va\.no|vf\.no|gs\.aa\.no|gs\.ah\.no|gs\.bu\.no|gs\.fm\.no|gs\.hl\.no|gs\.hm\.no|gs\.jan-mayen\.no|gs\.mr\.no|gs\.nl\.no|gs\.nt\.no|gs\.of\.no|gs\.ol\.no|gs\.oslo\.no|gs\.rl\.no|gs\.sf\.no|gs\.st\.no|gs\.svalbard\.no|gs\.tm\.no|gs\.tr\.no|gs\.va\.no|gs\.vf\.no|akrehamn\.no|åkrehamn\.no|algard\.no|ålgård\.no|arna\.no|brumunddal\.no|bryne\.no|bronnoysund\.no|brønnøysund\.no|drobak\.no|drøbak\.no|egersund\.no|fetsund\.no|floro\.no|florø\.no|fredrikstad\.no|hokksund\.no|honefoss\.no|hønefoss\.no|jessheim\.no|jorpeland\.no|jørpeland\.no|kirkenes\.no|kopervik\.no|krokstadelva\.no|langevag\.no|langevåg\.no|leirvik\.no|mjondalen\.no|mjøndalen\.no|mo-i-rana\.no|mosjoen\.no|mosjøen\.no|nesoddtangen\.no|orkanger\.no|osoyro\.no|osøyro\.no|raholt\.no|råholt\.no|sandnessjoen\.no|sandnessjøen\.no|skedsmokorset\.no|slattum\.no|spjelkavik\.no|stathelle\.no|stavern\.no|stjordalshalsen\.no|stjørdalshalsen\.no|tananger\.no|tranby\.no|vossevangen\.no|afjord\.no|åfjord\.no|agdenes\.no|al\.no|ål\.no|alesund\.no|ålesund\.no|alstahaug\.no|alta\.no|áltá\.no|alaheadju\.no|álaheadju\.no|alvdal\.no|amli\.no|åmli\.no|amot\.no|åmot\.no|andebu\.no|andoy\.no|andøy\.no|andasuolo\.no|ardal\.no|årdal\.no|aremark\.no|arendal\.no|ås\.no|aseral\.no|åseral\.no|asker\.no|askim\.no|askvoll\.no|askoy\.no|askøy\.no|asnes\.no|åsnes\.no|audnedaln\.no|aukra\.no|aure\.no|aurland\.no|aurskog-holand\.no|aurskog-høland\.no|austevoll\.no|austrheim\.no|averoy\.no|averøy\.no|balestrand\.no|ballangen\.no|balat\.no|bálát\.no|balsfjord\.no|bahccavuotna\.no|báhccavuotna\.no|bamble\.no|bardu\.no|beardu\.no|beiarn\.no|bajddar\.no|bájddar\.no|baidar\.no|báidár\.no|berg\.no|bergen\.no|berlevag\.no|berlevåg\.no|bearalvahki\.no|bearalváhki\.no|bindal\.no|birkenes\.no|bjarkoy\.no|bjarkøy\.no|bjerkreim\.no|bjugn\.no|bodo\.no|bodø\.no|badaddja\.no|bådåddjå\.no|budejju\.no|bokn\.no|bremanger\.no|bronnoy\.no|brønnøy\.no|bygland\.no|bykle\.no|barum\.no|bærum\.no|bo\.telemark\.no|bø\.telemark\.no|bo\.nordland\.no|bø\.nordland\.no|bievat\.no|bievát\.no|bomlo\.no|bømlo\.no|batsfjord\.no|båtsfjord\.no|bahcavuotna\.no|báhcavuotna\.no|dovre\.no|drammen\.no|drangedal\.no|dyroy\.no|dyrøy\.no|donna\.no|dønna\.no|eid\.no|eidfjord\.no|eidsberg\.no|eidskog\.no|eidsvoll\.no|eigersund\.no|elverum\.no|enebakk\.no|engerdal\.no|etne\.no|etnedal\.no|evenes\.no|evenassi\.no|evenášši\.no|evje-og-hornnes\.no|farsund\.no|fauske\.no|fuossko\.no|fuoisku\.no|fedje\.no|fet\.no|finnoy\.no|finnøy\.no|fitjar\.no|fjaler\.no|fjell\.no|flakstad\.no|flatanger\.no|flekkefjord\.no|flesberg\.no|flora\.no|fla\.no|flå\.no|folldal\.no|forsand\.no|fosnes\.no|frei\.no|frogn\.no|froland\.no|frosta\.no|frana\.no|fræna\.no|froya\.no|frøya\.no|fusa\.no|fyresdal\.no|forde\.no|førde\.no|gamvik\.no|gangaviika\.no|gáŋgaviika\.no|gaular\.no|gausdal\.no|gildeskal\.no|gildeskål\.no|giske\.no|gjemnes\.no|gjerdrum\.no|gjerstad\.no|gjesdal\.no|gjovik\.no|gjøvik\.no|gloppen\.no|gol\.no|gran\.no|grane\.no|granvin\.no|gratangen\.no|grimstad\.no|grong\.no|kraanghke\.no|kråanghke\.no|grue\.no|gulen\.no|hadsel\.no|halden\.no|halsa\.no|hamar\.no|hamaroy\.no|habmer\.no|hábmer\.no|hapmir\.no|hápmir\.no|hammerfest\.no|hammarfeasta\.no|hámmárfeasta\.no|haram\.no|hareid\.no|harstad\.no|hasvik\.no|aknoluokta\.no|ákŋoluokta\.no|hattfjelldal\.no|aarborte\.no|haugesund\.no|hemne\.no|hemnes\.no|hemsedal\.no|heroy\.more-og-romsdal\.no|herøy\.møre-og-romsdal\.no|heroy\.nordland\.no|herøy\.nordland\.no|hitra\.no|hjartdal\.no|hjelmeland\.no|hobol\.no|hobøl\.no|hof\.no|hol\.no|hole\.no|holmestrand\.no|holtalen\.no|holtålen\.no|hornindal\.no|horten\.no|hurdal\.no|hurum\.no|hvaler\.no|hyllestad\.no|hagebostad\.no|hægebostad\.no|hoyanger\.no|høyanger\.no|hoylandet\.no|høylandet\.no|ha\.no|hå\.no|ibestad\.no|inderoy\.no|inderøy\.no|iveland\.no|jevnaker\.no|jondal\.no|jolster\.no|jølster\.no|karasjok\.no|karasjohka\.no|kárášjohka\.no|karlsoy\.no|galsa\.no|gálsá\.no|karmoy\.no|karmøy\.no|kautokeino\.no|guovdageaidnu\.no|klepp\.no|klabu\.no|klæbu\.no|kongsberg\.no|kongsvinger\.no|kragero\.no|kragerø\.no|kristiansand\.no|kristiansund\.no|krodsherad\.no|krødsherad\.no|kvalsund\.no|rahkkeravju\.no|ráhkkerávju\.no|kvam\.no|kvinesdal\.no|kvinnherad\.no|kviteseid\.no|kvitsoy\.no|kvitsøy\.no|kvafjord\.no|kvæfjord\.no|giehtavuoatna\.no|kvanangen\.no|kvænangen\.no|navuotna\.no|návuotna\.no|kafjord\.no|kåfjord\.no|gaivuotna\.no|gáivuotna\.no|larvik\.no|lavangen\.no|lavagis\.no|loabat\.no|loabát\.no|lebesby\.no|davvesiida\.no|leikanger\.no|leirfjord\.no|leka\.no|leksvik\.no|lenvik\.no|leangaviika\.no|leaŋgaviika\.no|lesja\.no|levanger\.no|lier\.no|lierne\.no|lillehammer\.no|lillesand\.no|lindesnes\.no|lindas\.no|lindås\.no|lom\.no|loppa\.no|lahppi\.no|láhppi\.no|lund\.no|lunner\.no|luroy\.no|lurøy\.no|luster\.no|lyngdal\.no|lyngen\.no|ivgu\.no|lardal\.no|lerdal\.no|lærdal\.no|lodingen\.no|lødingen\.no|lorenskog\.no|lørenskog\.no|loten\.no|løten\.no|malvik\.no|masoy\.no|måsøy\.no|muosat\.no|muosát\.no|mandal\.no|marker\.no|marnardal\.no|masfjorden\.no|meland\.no|meldal\.no|melhus\.no|meloy\.no|meløy\.no|meraker\.no|meråker\.no|moareke\.no|moåreke\.no|midsund\.no|midtre-gauldal\.no|modalen\.no|modum\.no|molde\.no|moskenes\.no|moss\.no|mosvik\.no|malselv\.no|målselv\.no|malatvuopmi\.no|málatvuopmi\.no|namdalseid\.no|aejrie\.no|namsos\.no|namsskogan\.no|naamesjevuemie\.no|nååmesjevuemie\.no|laakesvuemie\.no|nannestad\.no|narvik\.no|narviika\.no|naustdal\.no|nedre-eiker\.no|nes\.akershus\.no|nes\.buskerud\.no|nesna\.no|nesodden\.no|nesseby\.no|unjarga\.no|unjárga\.no|nesset\.no|nissedal\.no|nittedal\.no|nord-aurdal\.no|nord-fron\.no|nord-odal\.no|norddal\.no|nordkapp\.no|davvenjarga\.no|davvenjárga\.no|nordre-land\.no|nordreisa\.no|raisa\.no|ráisa\.no|nore-og-uvdal\.no|notodden\.no|naroy\.no|nærøy\.no|notteroy\.no|nøtterøy\.no|odda\.no|oksnes\.no|øksnes\.no|oppdal\.no|oppegard\.no|oppegård\.no|orkdal\.no|orland\.no|ørland\.no|orskog\.no|ørskog\.no|orsta\.no|ørsta\.no|os\.hedmark\.no|os\.hordaland\.no|osen\.no|osteroy\.no|osterøy\.no|ostre-toten\.no|østre-toten\.no|overhalla\.no|ovre-eiker\.no|øvre-eiker\.no|oyer\.no|øyer\.no|oygarden\.no|øygarden\.no|oystre-slidre\.no|øystre-slidre\.no|porsanger\.no|porsangu\.no|porsáŋgu\.no|porsgrunn\.no|radoy\.no|radøy\.no|rakkestad\.no|rana\.no|ruovat\.no|randaberg\.no|rauma\.no|rendalen\.no|rennebu\.no|rennesoy\.no|rennesøy\.no|rindal\.no|ringebu\.no|ringerike\.no|ringsaker\.no|rissa\.no|risor\.no|risør\.no|roan\.no|rollag\.no|rygge\.no|ralingen\.no|rælingen\.no|rodoy\.no|rødøy\.no|romskog\.no|rømskog\.no|roros\.no|røros\.no|rost\.no|røst\.no|royken\.no|røyken\.no|royrvik\.no|røyrvik\.no|rade\.no|råde\.no|salangen\.no|siellak\.no|saltdal\.no|salat\.no|sálát\.no|sálat\.no|samnanger\.no|sande\.more-og-romsdal\.no|sande\.møre-og-romsdal\.no|sande\.vestfold\.no|sandefjord\.no|sandnes\.no|sandoy\.no|sandøy\.no|sarpsborg\.no|sauda\.no|sauherad\.no|sel\.no|selbu\.no|selje\.no|seljord\.no|sigdal\.no|siljan\.no|sirdal\.no|skaun\.no|skedsmo\.no|ski\.no|skien\.no|skiptvet\.no|skjervoy\.no|skjervøy\.no|skierva\.no|skiervá\.no|skjak\.no|skjåk\.no|skodje\.no|skanland\.no|skånland\.no|skanit\.no|skánit\.no|smola\.no|smøla\.no|snillfjord\.no|snasa\.no|snåsa\.no|snoasa\.no|snaase\.no|snåase\.no|sogndal\.no|sokndal\.no|sola\.no|solund\.no|songdalen\.no|sortland\.no|spydeberg\.no|stange\.no|stavanger\.no|steigen\.no|steinkjer\.no|stjordal\.no|stjørdal\.no|stokke\.no|stor-elvdal\.no|stord\.no|stordal\.no|storfjord\.no|omasvuotna\.no|strand\.no|stranda\.no|stryn\.no|sula\.no|suldal\.no|sund\.no|sunndal\.no|surnadal\.no|sveio\.no|svelvik\.no|sykkylven\.no|sogne\.no|søgne\.no|somna\.no|sømna\.no|sondre-land\.no|søndre-land\.no|sor-aurdal\.no|sør-aurdal\.no|sor-fron\.no|sør-fron\.no|sor-odal\.no|sør-odal\.no|sor-varanger\.no|sør-varanger\.no|matta-varjjat\.no|mátta-várjjat\.no|sorfold\.no|sørfold\.no|sorreisa\.no|sørreisa\.no|sorum\.no|sørum\.no|tana\.no|deatnu\.no|time\.no|tingvoll\.no|tinn\.no|tjeldsund\.no|dielddanuorri\.no|tjome\.no|tjøme\.no|tokke\.no|tolga\.no|torsken\.no|tranoy\.no|tranøy\.no|tromso\.no|tromsø\.no|tromsa\.no|romsa\.no|trondheim\.no|troandin\.no|trysil\.no|trana\.no|træna\.no|trogstad\.no|trøgstad\.no|tvedestrand\.no|tydal\.no|tynset\.no|tysfjord\.no|divtasvuodna\.no|divttasvuotna\.no|tysnes\.no|tysvar\.no|tysvær\.no|tonsberg\.no|tønsberg\.no|ullensaker\.no|ullensvang\.no|ulvik\.no|utsira\.no|vadso\.no|vadsø\.no|cahcesuolo\.no|čáhcesuolo\.no|vaksdal\.no|valle\.no|vang\.no|vanylven\.no|vardo\.no|vardø\.no|varggat\.no|várggát\.no|vefsn\.no|vaapste\.no|vega\.no|vegarshei\.no|vegårshei\.no|vennesla\.no|verdal\.no|verran\.no|vestby\.no|vestnes\.no|vestre-slidre\.no|vestre-toten\.no|vestvagoy\.no|vestvågøy\.no|vevelstad\.no|vik\.no|vikna\.no|vindafjord\.no|volda\.no|voss\.no|varoy\.no|værøy\.no|vagan\.no|vågan\.no|voagat\.no|vagsoy\.no|vågsøy\.no|vaga\.no|vågå\.no|valer\.ostfold\.no|våler\.østfold\.no|valer\.hedmark\.no|våler\.hedmark\.no|[^.]+\.np|nr|biz\.nr|info\.nr|gov\.nr|edu\.nr|org\.nr|net\.nr|com\.nr|nu|nz|ac\.nz|co\.nz|cri\.nz|geek\.nz|gen\.nz|govt\.nz|health\.nz|iwi\.nz|kiwi\.nz|maori\.nz|mil\.nz|māori\.nz|net\.nz|org\.nz|parliament\.nz|school\.nz|om|co\.om|com\.om|edu\.om|gov\.om|med\.om|museum\.om|net\.om|org\.om|pro\.om|onion|org|pa|ac\.pa|gob\.pa|com\.pa|org\.pa|sld\.pa|edu\.pa|net\.pa|ing\.pa|abo\.pa|med\.pa|nom\.pa|pe|edu\.pe|gob\.pe|nom\.pe|mil\.pe|org\.pe|com\.pe|net\.pe|pf|com\.pf|org\.pf|edu\.pf|[^.]+\.pg|ph|com\.ph|net\.ph|org\.ph|gov\.ph|edu\.ph|ngo\.ph|mil\.ph|i\.ph|pk|com\.pk|net\.pk|edu\.pk|org\.pk|fam\.pk|biz\.pk|web\.pk|gov\.pk|gob\.pk|gok\.pk|gon\.pk|gop\.pk|gos\.pk|info\.pk|pl|com\.pl|net\.pl|org\.pl|aid\.pl|agro\.pl|atm\.pl|auto\.pl|biz\.pl|edu\.pl|gmina\.pl|gsm\.pl|info\.pl|mail\.pl|miasta\.pl|media\.pl|mil\.pl|nieruchomosci\.pl|nom\.pl|pc\.pl|powiat\.pl|priv\.pl|realestate\.pl|rel\.pl|sex\.pl|shop\.pl|sklep\.pl|sos\.pl|szkola\.pl|targi\.pl|tm\.pl|tourism\.pl|travel\.pl|turystyka\.pl|gov\.pl|ap\.gov\.pl|ic\.gov\.pl|is\.gov\.pl|us\.gov\.pl|kmpsp\.gov\.pl|kppsp\.gov\.pl|kwpsp\.gov\.pl|psp\.gov\.pl|wskr\.gov\.pl|kwp\.gov\.pl|mw\.gov\.pl|ug\.gov\.pl|um\.gov\.pl|umig\.gov\.pl|ugim\.gov\.pl|upow\.gov\.pl|uw\.gov\.pl|starostwo\.gov\.pl|pa\.gov\.pl|po\.gov\.pl|psse\.gov\.pl|pup\.gov\.pl|rzgw\.gov\.pl|sa\.gov\.pl|so\.gov\.pl|sr\.gov\.pl|wsa\.gov\.pl|sko\.gov\.pl|uzs\.gov\.pl|wiih\.gov\.pl|winb\.gov\.pl|pinb\.gov\.pl|wios\.gov\.pl|witd\.gov\.pl|wzmiuw\.gov\.pl|piw\.gov\.pl|wiw\.gov\.pl|griw\.gov\.pl|wif\.gov\.pl|oum\.gov\.pl|sdn\.gov\.pl|zp\.gov\.pl|uppo\.gov\.pl|mup\.gov\.pl|wuoz\.gov\.pl|konsulat\.gov\.pl|oirm\.gov\.pl|augustow\.pl|babia-gora\.pl|bedzin\.pl|beskidy\.pl|bialowieza\.pl|bialystok\.pl|bielawa\.pl|bieszczady\.pl|boleslawiec\.pl|bydgoszcz\.pl|bytom\.pl|cieszyn\.pl|czeladz\.pl|czest\.pl|dlugoleka\.pl|elblag\.pl|elk\.pl|glogow\.pl|gniezno\.pl|gorlice\.pl|grajewo\.pl|ilawa\.pl|jaworzno\.pl|jelenia-gora\.pl|jgora\.pl|kalisz\.pl|kazimierz-dolny\.pl|karpacz\.pl|kartuzy\.pl|kaszuby\.pl|katowice\.pl|kepno\.pl|ketrzyn\.pl|klodzko\.pl|kobierzyce\.pl|kolobrzeg\.pl|konin\.pl|konskowola\.pl|kutno\.pl|lapy\.pl|lebork\.pl|legnica\.pl|lezajsk\.pl|limanowa\.pl|lomza\.pl|lowicz\.pl|lubin\.pl|lukow\.pl|malbork\.pl|malopolska\.pl|mazowsze\.pl|mazury\.pl|mielec\.pl|mielno\.pl|mragowo\.pl|naklo\.pl|nowaruda\.pl|nysa\.pl|olawa\.pl|olecko\.pl|olkusz\.pl|olsztyn\.pl|opoczno\.pl|opole\.pl|ostroda\.pl|ostroleka\.pl|ostrowiec\.pl|ostrowwlkp\.pl|pila\.pl|pisz\.pl|podhale\.pl|podlasie\.pl|polkowice\.pl|pomorze\.pl|pomorskie\.pl|prochowice\.pl|pruszkow\.pl|przeworsk\.pl|pulawy\.pl|radom\.pl|rawa-maz\.pl|rybnik\.pl|rzeszow\.pl|sanok\.pl|sejny\.pl|slask\.pl|slupsk\.pl|sosnowiec\.pl|stalowa-wola\.pl|skoczow\.pl|starachowice\.pl|stargard\.pl|suwalki\.pl|swidnica\.pl|swiebodzin\.pl|swinoujscie\.pl|szczecin\.pl|szczytno\.pl|tarnobrzeg\.pl|tgory\.pl|turek\.pl|tychy\.pl|ustka\.pl|walbrzych\.pl|warmia\.pl|warszawa\.pl|waw\.pl|wegrow\.pl|wielun\.pl|wlocl\.pl|wloclawek\.pl|wodzislaw\.pl|wolomin\.pl|wroclaw\.pl|zachpomor\.pl|zagan\.pl|zarow\.pl|zgora\.pl|zgorzelec\.pl|pm|pn|gov\.pn|co\.pn|org\.pn|edu\.pn|net\.pn|post|pr|com\.pr|net\.pr|org\.pr|gov\.pr|edu\.pr|isla\.pr|pro\.pr|biz\.pr|info\.pr|name\.pr|est\.pr|prof\.pr|ac\.pr|pro|aaa\.pro|aca\.pro|acct\.pro|avocat\.pro|bar\.pro|cpa\.pro|eng\.pro|jur\.pro|law\.pro|med\.pro|recht\.pro|ps|edu\.ps|gov\.ps|sec\.ps|plo\.ps|com\.ps|org\.ps|net\.ps|pt|net\.pt|gov\.pt|org\.pt|edu\.pt|int\.pt|publ\.pt|com\.pt|nome\.pt|pw|co\.pw|ne\.pw|or\.pw|ed\.pw|go\.pw|belau\.pw|py|com\.py|coop\.py|edu\.py|gov\.py|mil\.py|net\.py|org\.py|qa|com\.qa|edu\.qa|gov\.qa|mil\.qa|name\.qa|net\.qa|org\.qa|sch\.qa|re|asso\.re|com\.re|nom\.re|ro|arts\.ro|com\.ro|firm\.ro|info\.ro|nom\.ro|nt\.ro|org\.ro|rec\.ro|store\.ro|tm\.ro|www\.ro|rs|ac\.rs|co\.rs|edu\.rs|gov\.rs|in\.rs|org\.rs|ru|ac\.ru|edu\.ru|gov\.ru|int\.ru|mil\.ru|test\.ru|rw|gov\.rw|net\.rw|edu\.rw|ac\.rw|com\.rw|co\.rw|int\.rw|mil\.rw|gouv\.rw|sa|com\.sa|net\.sa|org\.sa|gov\.sa|med\.sa|pub\.sa|edu\.sa|sch\.sa|sb|com\.sb|edu\.sb|gov\.sb|net\.sb|org\.sb|sc|com\.sc|gov\.sc|net\.sc|org\.sc|edu\.sc|sd|com\.sd|net\.sd|org\.sd|edu\.sd|med\.sd|tv\.sd|gov\.sd|info\.sd|se|a\.se|ac\.se|b\.se|bd\.se|brand\.se|c\.se|d\.se|e\.se|f\.se|fh\.se|fhsk\.se|fhv\.se|g\.se|h\.se|i\.se|k\.se|komforb\.se|kommunalforbund\.se|komvux\.se|l\.se|lanbib\.se|m\.se|n\.se|naturbruksgymn\.se|o\.se|org\.se|p\.se|parti\.se|pp\.se|press\.se|r\.se|s\.se|t\.se|tm\.se|u\.se|w\.se|x\.se|y\.se|z\.se|sg|com\.sg|net\.sg|org\.sg|gov\.sg|edu\.sg|per\.sg|sh|com\.sh|net\.sh|gov\.sh|org\.sh|mil\.sh|si|sj|sk|sl|com\.sl|net\.sl|edu\.sl|gov\.sl|org\.sl|sm|sn|art\.sn|com\.sn|edu\.sn|gouv\.sn|org\.sn|perso\.sn|univ\.sn|so|com\.so|net\.so|org\.so|sr|st|co\.st|com\.st|consulado\.st|edu\.st|embaixada\.st|gov\.st|mil\.st|net\.st|org\.st|principe\.st|saotome\.st|store\.st|su|sv|com\.sv|edu\.sv|gob\.sv|org\.sv|red\.sv|sx|gov\.sx|sy|edu\.sy|gov\.sy|net\.sy|mil\.sy|com\.sy|org\.sy|sz|co\.sz|ac\.sz|org\.sz|tc|td|tel|tf|tg|th|ac\.th|co\.th|go\.th|in\.th|mi\.th|net\.th|or\.th|tj|ac\.tj|biz\.tj|co\.tj|com\.tj|edu\.tj|go\.tj|gov\.tj|int\.tj|mil\.tj|name\.tj|net\.tj|nic\.tj|org\.tj|test\.tj|web\.tj|tk|tl|gov\.tl|tm|com\.tm|co\.tm|org\.tm|net\.tm|nom\.tm|gov\.tm|mil\.tm|edu\.tm|tn|com\.tn|ens\.tn|fin\.tn|gov\.tn|ind\.tn|intl\.tn|nat\.tn|net\.tn|org\.tn|info\.tn|perso\.tn|tourism\.tn|edunet\.tn|rnrt\.tn|rns\.tn|rnu\.tn|mincom\.tn|agrinet\.tn|defense\.tn|turen\.tn|to|com\.to|gov\.to|net\.to|org\.to|edu\.to|mil\.to|tr|com\.tr|info\.tr|biz\.tr|net\.tr|org\.tr|web\.tr|gen\.tr|tv\.tr|av\.tr|dr\.tr|bbs\.tr|name\.tr|tel\.tr|gov\.tr|bel\.tr|pol\.tr|mil\.tr|k12\.tr|edu\.tr|kep\.tr|nc\.tr|gov\.nc\.tr|travel|tt|co\.tt|com\.tt|org\.tt|net\.tt|biz\.tt|info\.tt|pro\.tt|int\.tt|coop\.tt|jobs\.tt|mobi\.tt|travel\.tt|museum\.tt|aero\.tt|name\.tt|gov\.tt|edu\.tt|tv|tw|edu\.tw|gov\.tw|mil\.tw|com\.tw|net\.tw|org\.tw|idv\.tw|game\.tw|ebiz\.tw|club\.tw|網路\.tw|組織\.tw|商業\.tw|tz|ac\.tz|co\.tz|go\.tz|hotel\.tz|info\.tz|me\.tz|mil\.tz|mobi\.tz|ne\.tz|or\.tz|sc\.tz|tv\.tz|ua|com\.ua|edu\.ua|gov\.ua|in\.ua|net\.ua|org\.ua|cherkassy\.ua|cherkasy\.ua|chernigov\.ua|chernihiv\.ua|chernivtsi\.ua|chernovtsy\.ua|ck\.ua|cn\.ua|cr\.ua|crimea\.ua|cv\.ua|dn\.ua|dnepropetrovsk\.ua|dnipropetrovsk\.ua|dominic\.ua|donetsk\.ua|dp\.ua|if\.ua|ivano-frankivsk\.ua|kh\.ua|kharkiv\.ua|kharkov\.ua|kherson\.ua|khmelnitskiy\.ua|khmelnytskyi\.ua|kiev\.ua|kirovograd\.ua|km\.ua|kr\.ua|krym\.ua|ks\.ua|kv\.ua|kyiv\.ua|lg\.ua|lt\.ua|lugansk\.ua|lutsk\.ua|lv\.ua|lviv\.ua|mk\.ua|mykolaiv\.ua|nikolaev\.ua|od\.ua|odesa\.ua|odessa\.ua|pl\.ua|poltava\.ua|rivne\.ua|rovno\.ua|rv\.ua|sb\.ua|sebastopol\.ua|sevastopol\.ua|sm\.ua|sumy\.ua|te\.ua|ternopil\.ua|uz\.ua|uzhgorod\.ua|vinnica\.ua|vinnytsia\.ua|vn\.ua|volyn\.ua|yalta\.ua|zaporizhzhe\.ua|zaporizhzhia\.ua|zhitomir\.ua|zhytomyr\.ua|zp\.ua|zt\.ua|ug|co\.ug|or\.ug|ac\.ug|sc\.ug|go\.ug|ne\.ug|com\.ug|org\.ug|uk|ac\.uk|co\.uk|gov\.uk|ltd\.uk|me\.uk|net\.uk|nhs\.uk|org\.uk|plc\.uk|police\.uk|[^.]+\.sch\.uk|us|dni\.us|fed\.us|isa\.us|kids\.us|nsn\.us|ak\.us|al\.us|ar\.us|as\.us|az\.us|ca\.us|co\.us|ct\.us|dc\.us|de\.us|fl\.us|ga\.us|gu\.us|hi\.us|ia\.us|id\.us|il\.us|in\.us|ks\.us|ky\.us|la\.us|ma\.us|md\.us|me\.us|mi\.us|mn\.us|mo\.us|ms\.us|mt\.us|nc\.us|nd\.us|ne\.us|nh\.us|nj\.us|nm\.us|nv\.us|ny\.us|oh\.us|ok\.us|or\.us|pa\.us|pr\.us|ri\.us|sc\.us|sd\.us|tn\.us|tx\.us|ut\.us|vi\.us|vt\.us|va\.us|wa\.us|wi\.us|wv\.us|wy\.us|k12\.ak\.us|k12\.al\.us|k12\.ar\.us|k12\.as\.us|k12\.az\.us|k12\.ca\.us|k12\.co\.us|k12\.ct\.us|k12\.dc\.us|k12\.de\.us|k12\.fl\.us|k12\.ga\.us|k12\.gu\.us|k12\.ia\.us|k12\.id\.us|k12\.il\.us|k12\.in\.us|k12\.ks\.us|k12\.ky\.us|k12\.la\.us|k12\.ma\.us|k12\.md\.us|k12\.me\.us|k12\.mi\.us|k12\.mn\.us|k12\.mo\.us|k12\.ms\.us|k12\.mt\.us|k12\.nc\.us|k12\.ne\.us|k12\.nh\.us|k12\.nj\.us|k12\.nm\.us|k12\.nv\.us|k12\.ny\.us|k12\.oh\.us|k12\.ok\.us|k12\.or\.us|k12\.pa\.us|k12\.pr\.us|k12\.ri\.us|k12\.sc\.us|k12\.tn\.us|k12\.tx\.us|k12\.ut\.us|k12\.vi\.us|k12\.vt\.us|k12\.va\.us|k12\.wa\.us|k12\.wi\.us|k12\.wy\.us|cc\.ak\.us|cc\.al\.us|cc\.ar\.us|cc\.as\.us|cc\.az\.us|cc\.ca\.us|cc\.co\.us|cc\.ct\.us|cc\.dc\.us|cc\.de\.us|cc\.fl\.us|cc\.ga\.us|cc\.gu\.us|cc\.hi\.us|cc\.ia\.us|cc\.id\.us|cc\.il\.us|cc\.in\.us|cc\.ks\.us|cc\.ky\.us|cc\.la\.us|cc\.ma\.us|cc\.md\.us|cc\.me\.us|cc\.mi\.us|cc\.mn\.us|cc\.mo\.us|cc\.ms\.us|cc\.mt\.us|cc\.nc\.us|cc\.nd\.us|cc\.ne\.us|cc\.nh\.us|cc\.nj\.us|cc\.nm\.us|cc\.nv\.us|cc\.ny\.us|cc\.oh\.us|cc\.ok\.us|cc\.or\.us|cc\.pa\.us|cc\.pr\.us|cc\.ri\.us|cc\.sc\.us|cc\.sd\.us|cc\.tn\.us|cc\.tx\.us|cc\.ut\.us|cc\.vi\.us|cc\.vt\.us|cc\.va\.us|cc\.wa\.us|cc\.wi\.us|cc\.wv\.us|cc\.wy\.us|lib\.ak\.us|lib\.al\.us|lib\.ar\.us|lib\.as\.us|lib\.az\.us|lib\.ca\.us|lib\.co\.us|lib\.ct\.us|lib\.dc\.us|lib\.fl\.us|lib\.ga\.us|lib\.gu\.us|lib\.hi\.us|lib\.ia\.us|lib\.id\.us|lib\.il\.us|lib\.in\.us|lib\.ks\.us|lib\.ky\.us|lib\.la\.us|lib\.ma\.us|lib\.md\.us|lib\.me\.us|lib\.mi\.us|lib\.mn\.us|lib\.mo\.us|lib\.ms\.us|lib\.mt\.us|lib\.nc\.us|lib\.nd\.us|lib\.ne\.us|lib\.nh\.us|lib\.nj\.us|lib\.nm\.us|lib\.nv\.us|lib\.ny\.us|lib\.oh\.us|lib\.ok\.us|lib\.or\.us|lib\.pa\.us|lib\.pr\.us|lib\.ri\.us|lib\.sc\.us|lib\.sd\.us|lib\.tn\.us|lib\.tx\.us|lib\.ut\.us|lib\.vi\.us|lib\.vt\.us|lib\.va\.us|lib\.wa\.us|lib\.wi\.us|lib\.wy\.us|pvt\.k12\.ma\.us|chtr\.k12\.ma\.us|paroch\.k12\.ma\.us|uy|com\.uy|edu\.uy|gub\.uy|mil\.uy|net\.uy|org\.uy|uz|co\.uz|com\.uz|net\.uz|org\.uz|va|vc|com\.vc|net\.vc|org\.vc|gov\.vc|mil\.vc|edu\.vc|ve|arts\.ve|co\.ve|com\.ve|e12\.ve|edu\.ve|firm\.ve|gob\.ve|gov\.ve|info\.ve|int\.ve|mil\.ve|net\.ve|org\.ve|rec\.ve|store\.ve|tec\.ve|web\.ve|vg|vi|co\.vi|com\.vi|k12\.vi|net\.vi|org\.vi|vn|com\.vn|net\.vn|org\.vn|edu\.vn|gov\.vn|int\.vn|ac\.vn|biz\.vn|info\.vn|name\.vn|pro\.vn|health\.vn|vu|com\.vu|edu\.vu|net\.vu|org\.vu|wf|ws|com\.ws|net\.ws|org\.ws|gov\.ws|edu\.ws|yt|امارات|հայ|বাংলা|бел|中国|中國|الجزائر|مصر|ею|გე|ελ|香港|भारत|بھارت|భారత్|ભારત|ਭਾਰਤ|ভারত|இந்தியா|ایران|ايران|عراق|الاردن|한국|қаз|ලංකා|இலங்கை|المغرب|мкд|мон|澳門|澳门|مليسيا|عمان|پاکستان|پاكستان|فلسطين|срб|пр\.срб|орг\.срб|обр\.срб|од\.срб|упр\.срб|ак\.срб|рф|قطر|السعودية|السعودیة|السعودیۃ|السعوديه|سودان|新加坡|சிங்கப்பூர்|سورية|سوريا|ไทย|تونس|台灣|台湾|臺灣|укр|اليمن|xxx|[^.]+\.ye|ac\.za|agric\.za|alt\.za|co\.za|edu\.za|gov\.za|grondar\.za|law\.za|mil\.za|net\.za|ngo\.za|nis\.za|nom\.za|org\.za|school\.za|tm\.za|web\.za|zm|ac\.zm|biz\.zm|co\.zm|com\.zm|edu\.zm|gov\.zm|info\.zm|mil\.zm|net\.zm|org\.zm|sch\.zm|[^.]+\.zw|aaa|aarp|abarth|abb|abbott|abbvie|abc|able|abogado|abudhabi|academy|accenture|accountant|accountants|aco|active|actor|adac|ads|adult|aeg|aetna|afamilycompany|afl|africa|agakhan|agency|aig|aigo|airbus|airforce|airtel|akdn|alfaromeo|alibaba|alipay|allfinanz|allstate|ally|alsace|alstom|americanexpress|americanfamily|amex|amfam|amica|amsterdam|analytics|android|anquan|anz|aol|apartments|app|apple|aquarelle|arab|aramco|archi|army|art|arte|asda|associates|athleta|attorney|auction|audi|audible|audio|auspost|author|auto|autos|avianca|aws|axa|azure|baby|baidu|banamex|bananarepublic|band|bank|bar|barcelona|barclaycard|barclays|barefoot|bargains|baseball|basketball|bauhaus|bayern|bbc|bbt|bbva|bcg|bcn|beats|beauty|beer|bentley|berlin|best|bestbuy|bet|bharti|bible|bid|bike|bing|bingo|bio|black|blackfriday|blanco|blockbuster|blog|bloomberg|blue|bms|bmw|bnl|bnpparibas|boats|boehringer|bofa|bom|bond|boo|book|booking|boots|bosch|bostik|boston|bot|boutique|box|bradesco|bridgestone|broadway|broker|brother|brussels|budapest|bugatti|build|builders|business|buy|buzz|bzh|cab|cafe|cal|call|calvinklein|cam|camera|camp|cancerresearch|canon|capetown|capital|capitalone|car|caravan|cards|care|career|careers|cars|cartier|casa|case|caseih|cash|casino|catering|catholic|cba|cbn|cbre|cbs|ceb|center|ceo|cern|cfa|cfd|chanel|channel|chase|chat|cheap|chintai|chloe|christmas|chrome|chrysler|church|cipriani|circle|cisco|citadel|citi|citic|city|cityeats|claims|cleaning|click|clinic|clinique|clothing|cloud|club|clubmed|coach|codes|coffee|college|cologne|comcast|commbank|community|company|compare|computer|comsec|condos|construction|consulting|contact|contractors|cooking|cookingchannel|cool|corsica|country|coupon|coupons|courses|credit|creditcard|creditunion|cricket|crown|crs|cruise|cruises|csc|cuisinella|cymru|cyou|dabur|dad|dance|data|date|dating|datsun|day|dclk|dds|deal|dealer|deals|degree|delivery|dell|deloitte|delta|democrat|dental|dentist|desi|design|dev|dhl|diamonds|diet|digital|direct|directory|discount|discover|dish|diy|dnp|docs|doctor|dodge|dog|doha|domains|dot|download|drive|dtv|dubai|duck|dunlop|duns|dupont|durban|dvag|dvr|dwg|earth|eat|eco|edeka|education|email|emerck|energy|engineer|engineering|enterprises|epost|epson|equipment|ericsson|erni|esq|estate|esurance|etisalat|eurovision|eus|events|everbank|exchange|expert|exposed|express|extraspace|fage|fail|fairwinds|faith|family|fan|fans|farm|farmers|fashion|fast|fedex|feedback|ferrari|ferrero|fiat|fidelity|fido|film|final|finance|financial|fire|firestone|firmdale|fish|fishing|fit|fitness|flickr|flights|flir|florist|flowers|fly|foo|food|foodnetwork|football|ford|forex|forsale|forum|foundation|fox|free|fresenius|frl|frogans|frontdoor|frontier|ftr|fujitsu|fujixerox|fun|fund|furniture|futbol|fyi|gal|gallery|gallo|gallup|game|games|gap|garden|gbiz|gdn|gea|gent|genting|george|ggee|gift|gifts|gives|giving|glade|glass|gle|global|globo|gmail|gmbh|gmo|gmx|godaddy|gold|goldpoint|golf|goo|goodhands|goodyear|goog|google|gop|got|grainger|graphics|gratis|green|gripe|grocery|group|guardian|gucci|guge|guide|guitars|guru|hair|hamburg|hangout|haus|hbo|hdfc|hdfcbank|health|healthcare|help|helsinki|here|hermes|hgtv|hiphop|hisamitsu|hitachi|hiv|hkt|hockey|holdings|holiday|homedepot|homegoods|homes|homesense|honda|honeywell|horse|hospital|host|hosting|hot|hoteles|hotels|hotmail|house|how|hsbc|htc|hughes|hyatt|hyundai|ibm|icbc|ice|icu|ieee|ifm|iinet|ikano|imamat|imdb|immo|immobilien|industries|infiniti|ing|ink|institute|insurance|insure|intel|international|intuit|investments|ipiranga|irish|iselect|ismaili|ist|istanbul|itau|itv|iveco|iwc|jaguar|java|jcb|jcp|jeep|jetzt|jewelry|jio|jlc|jll|jmp|jnj|joburg|jot|joy|jpmorgan|jprs|juegos|juniper|kaufen|kddi|kerryhotels|kerrylogistics|kerryproperties|kfh|kia|kim|kinder|kindle|kitchen|kiwi|koeln|komatsu|kosher|kpmg|kpn|krd|kred|kuokgroup|kyoto|lacaixa|ladbrokes|lamborghini|lamer|lancaster|lancia|lancome|land|landrover|lanxess|lasalle|lat|latino|latrobe|law|lawyer|lds|lease|leclerc|lefrak|legal|lego|lexus|lgbt|liaison|lidl|life|lifeinsurance|lifestyle|lighting|like|lilly|limited|limo|lincoln|linde|link|lipsy|live|living|lixil|loan|loans|locker|locus|loft|lol|london|lotte|lotto|love|lpl|lplfinancial|ltd|ltda|lundbeck|lupin|luxe|luxury|macys|madrid|maif|maison|makeup|man|management|mango|map|market|marketing|markets|marriott|marshalls|maserati|mattel|mba|mcd|mcdonalds|mckinsey|med|media|meet|melbourne|meme|memorial|men|menu|meo|merckmsd|metlife|miami|microsoft|mini|mint|mit|mitsubishi|mlb|mls|mma|mobile|mobily|moda|moe|moi|mom|monash|money|monster|montblanc|mopar|mormon|mortgage|moscow|moto|motorcycles|mov|movie|movistar|msd|mtn|mtpc|mtr|mutual|mutuelle|nab|nadex|nagoya|nationwide|natura|navy|nba|nec|netbank|netflix|network|neustar|new|newholland|news|next|nextdirect|nexus|nfl|ngo|nhk|nico|nike|nikon|ninja|nissan|nissay|nokia|northwesternmutual|norton|now|nowruz|nowtv|nra|nrw|ntt|nyc|obi|observer|off|office|okinawa|olayan|olayangroup|oldnavy|ollo|omega|one|ong|onl|online|onyourside|ooo|open|oracle|orange|organic|orientexpress|origins|osaka|otsuka|ott|ovh|page|pamperedchef|panasonic|panerai|paris|pars|partners|parts|party|passagens|pay|pccw|pet|pfizer|pharmacy|phd|philips|phone|photo|photography|photos|physio|piaget|pics|pictet|pictures|pid|pin|ping|pink|pioneer|pizza|place|play|playstation|plumbing|plus|pnc|pohl|poker|politie|porn|pramerica|praxi|press|prime|prod|productions|prof|progressive|promo|properties|property|protection|pru|prudential|pub|pwc|qpon|quebec|quest|qvc|racing|radio|raid|read|realestate|realtor|realty|recipes|red|redstone|redumbrella|rehab|reise|reisen|reit|reliance|ren|rent|rentals|repair|report|republican|rest|restaurant|review|reviews|rexroth|rich|richardli|ricoh|rightathome|ril|rio|rip|rmit|rocher|rocks|rodeo|rogers|room|rsvp|ruhr|run|rwe|ryukyu|saarland|safe|safety|sakura|sale|salon|samsclub|samsung|sandvik|sandvikcoromant|sanofi|sap|sapo|sarl|sas|save|saxo|sbi|sbs|sca|scb|schaeffler|schmidt|scholarships|school|schule|schwarz|science|scjohnson|scor|scot|search|seat|secure|security|seek|select|sener|services|ses|seven|sew|sex|sexy|sfr|shangrila|sharp|shaw|shell|shia|shiksha|shoes|shop|shopping|shouji|show|showtime|shriram|silk|sina|singles|site|ski|skin|sky|skype|sling|smart|smile|sncf|soccer|social|softbank|software|sohu|solar|solutions|song|sony|soy|space|spiegel|spot|spreadbetting|srl|srt|stada|staples|star|starhub|statebank|statefarm|statoil|stc|stcgroup|stockholm|storage|store|stream|studio|study|style|sucks|supplies|supply|support|surf|surgery|suzuki|swatch|swiftcover|swiss|sydney|symantec|systems|tab|taipei|talk|taobao|target|tatamotors|tatar|tattoo|tax|taxi|tci|tdk|team|tech|technology|telecity|telefonica|temasek|tennis|teva|thd|theater|theatre|theguardian|tiaa|tickets|tienda|tiffany|tips|tires|tirol|tjmaxx|tjx|tkmaxx|tmall|today|tokyo|tools|top|toray|toshiba|total|tours|town|toyota|toys|trade|trading|training|travelchannel|travelers|travelersinsurance|trust|trv|tube|tui|tunes|tushu|tvs|ubank|ubs|uconnect|unicom|university|uno|uol|ups|vacations|vana|vanguard|vegas|ventures|verisign|versicherung|vet|viajes|video|vig|viking|villas|vin|vip|virgin|visa|vision|vista|vistaprint|viva|vivo|vlaanderen|vodka|volkswagen|volvo|vote|voting|voto|voyage|vuelos|wales|walmart|walter|wang|wanggou|warman|watch|watches|weather|weatherchannel|webcam|weber|website|wed|wedding|weibo|weir|whoswho|wien|wiki|williamhill|win|windows|wine|winners|wme|wolterskluwer|woodside|work|works|world|wow|wtc|wtf|xbox|xerox|xfinity|xihuan|xin|कॉम|セール|佛山|慈善|集团|在线|大众汽车|点看|คอม|八卦|موقع|一号店|公益|公司|香格里拉|网站|移动|我爱你|москва|католик|онлайн|сайт|联通|קום|时尚|微博|淡马锡|ファッション|орг|नेट|ストア|삼성|商标|商店|商城|дети|ポイント|新闻|工行|家電|كوم|中文网|中信|娱乐|谷歌|電訊盈科|购物|クラウド|通販|网店|संगठन|餐厅|网络|ком|诺基亚|食品|飞利浦|手表|手机|ارامكو|العليان|اتصالات|بازار|موبايلي|ابوظبي|كاثوليك|همراه|닷컴|政府|شبكة|بيتك|عرب|机构|组织机构|健康|рус|珠宝|大拿|みんな|グーグル|世界|書籍|网址|닷넷|コム|天主教|游戏|vermögensberater|vermögensberatung|企业|信息|嘉里大酒店|嘉里|广东|政务|xperia|xyz|yachts|yahoo|yamaxun|yandex|yodobashi|yoga|yokohama|you|youtube|yun|zappos|zara|zero|zip|zippo|zone|zuerich)$/;
exports.private = /\.(beep\.pl|[^.]+\.compute\.estate|[^.]+\.alces\.network|[^.]+\.alwaysdata\.net|cloudfront\.net|[^.]+\.compute\.amazonaws\.com|[^.]+\.compute-1\.amazonaws\.com|[^.]+\.compute\.amazonaws\.com\.cn|us-east-1\.amazonaws\.com|elasticbeanstalk\.cn-north-1\.amazonaws\.com\.cn|[^.]+\.elasticbeanstalk\.com|[^.]+\.elb\.amazonaws\.com|[^.]+\.elb\.amazonaws\.com\.cn|s3\.amazonaws\.com|s3-ap-northeast-1\.amazonaws\.com|s3-ap-northeast-2\.amazonaws\.com|s3-ap-south-1\.amazonaws\.com|s3-ap-southeast-1\.amazonaws\.com|s3-ap-southeast-2\.amazonaws\.com|s3-ca-central-1\.amazonaws\.com|s3-eu-central-1\.amazonaws\.com|s3-eu-west-1\.amazonaws\.com|s3-eu-west-2\.amazonaws\.com|s3-external-1\.amazonaws\.com|s3-fips-us-gov-west-1\.amazonaws\.com|s3-sa-east-1\.amazonaws\.com|s3-us-gov-west-1\.amazonaws\.com|s3-us-east-2\.amazonaws\.com|s3-us-west-1\.amazonaws\.com|s3-us-west-2\.amazonaws\.com|s3\.ap-northeast-2\.amazonaws\.com|s3\.ap-south-1\.amazonaws\.com|s3\.cn-north-1\.amazonaws\.com\.cn|s3\.ca-central-1\.amazonaws\.com|s3\.eu-central-1\.amazonaws\.com|s3\.eu-west-2\.amazonaws\.com|s3\.us-east-2\.amazonaws\.com|s3\.dualstack\.ap-northeast-1\.amazonaws\.com|s3\.dualstack\.ap-northeast-2\.amazonaws\.com|s3\.dualstack\.ap-south-1\.amazonaws\.com|s3\.dualstack\.ap-southeast-1\.amazonaws\.com|s3\.dualstack\.ap-southeast-2\.amazonaws\.com|s3\.dualstack\.ca-central-1\.amazonaws\.com|s3\.dualstack\.eu-central-1\.amazonaws\.com|s3\.dualstack\.eu-west-1\.amazonaws\.com|s3\.dualstack\.eu-west-2\.amazonaws\.com|s3\.dualstack\.sa-east-1\.amazonaws\.com|s3\.dualstack\.us-east-1\.amazonaws\.com|s3\.dualstack\.us-east-2\.amazonaws\.com|s3-website-us-east-1\.amazonaws\.com|s3-website-us-west-1\.amazonaws\.com|s3-website-us-west-2\.amazonaws\.com|s3-website-ap-northeast-1\.amazonaws\.com|s3-website-ap-southeast-1\.amazonaws\.com|s3-website-ap-southeast-2\.amazonaws\.com|s3-website-eu-west-1\.amazonaws\.com|s3-website-sa-east-1\.amazonaws\.com|s3-website\.ap-northeast-2\.amazonaws\.com|s3-website\.ap-south-1\.amazonaws\.com|s3-website\.ca-central-1\.amazonaws\.com|s3-website\.eu-central-1\.amazonaws\.com|s3-website\.eu-west-2\.amazonaws\.com|s3-website\.us-east-2\.amazonaws\.com|t3l3p0rt\.net|tele\.amune\.org|on-aptible\.com|user\.party\.eus|pimienta\.org|poivron\.org|potager\.org|sweetpepper\.org|myasustor\.com|myfritz\.net|backplaneapp\.io|betainabox\.com|bnr\.la|boxfuse\.io|browsersafetymark\.io|mycd\.eu|ae\.org|ar\.com|br\.com|cn\.com|com\.de|com\.se|de\.com|eu\.com|gb\.com|gb\.net|hu\.com|hu\.net|jp\.net|jpn\.com|kr\.com|mex\.com|no\.com|qc\.com|ru\.com|sa\.com|se\.com|se\.net|uk\.com|uk\.net|us\.com|uy\.com|za\.bz|za\.com|africa\.com|gr\.com|in\.net|us\.org|co\.com|c\.la|certmgr\.org|xenapponazure\.com|virtueeldomein\.nl|cloudcontrolled\.com|cloudcontrolapp\.com|co\.ca|co\.cz|c\.cdn77\.org|cdn77-ssl\.net|r\.cdn77\.net|rsc\.cdn77\.org|ssl\.origin\.cdn77-secure\.org|cloudns\.asia|cloudns\.biz|cloudns\.club|cloudns\.cc|cloudns\.eu|cloudns\.in|cloudns\.info|cloudns\.org|cloudns\.pro|cloudns\.pw|cloudns\.us|co\.nl|co\.no|[^.]+\.platform\.sh|dyn\.cosidns\.de|dynamisches-dns\.de|dnsupdater\.de|internet-dns\.de|l-o-g-i-n\.de|dynamic-dns\.info|feste-ip\.net|knx-server\.net|static-access\.net|realm\.cz|[^.]+\.cryptonomic\.net|cupcake\.is|cyon\.link|cyon\.site|daplie\.me|biz\.dk|co\.dk|firm\.dk|reg\.dk|store\.dk|dedyn\.io|dnshome\.de|dreamhosters\.com|mydrobo\.com|drud\.io|drud\.us|duckdns\.org|dy\.fi|tunk\.org|dyndns-at-home\.com|dyndns-at-work\.com|dyndns-blog\.com|dyndns-free\.com|dyndns-home\.com|dyndns-ip\.com|dyndns-mail\.com|dyndns-office\.com|dyndns-pics\.com|dyndns-remote\.com|dyndns-server\.com|dyndns-web\.com|dyndns-wiki\.com|dyndns-work\.com|dyndns\.biz|dyndns\.info|dyndns\.org|dyndns\.tv|at-band-camp\.net|ath\.cx|barrel-of-knowledge\.info|barrell-of-knowledge\.info|better-than\.tv|blogdns\.com|blogdns\.net|blogdns\.org|blogsite\.org|boldlygoingnowhere\.org|broke-it\.net|buyshouses\.net|cechire\.com|dnsalias\.com|dnsalias\.net|dnsalias\.org|dnsdojo\.com|dnsdojo\.net|dnsdojo\.org|does-it\.net|doesntexist\.com|doesntexist\.org|dontexist\.com|dontexist\.net|dontexist\.org|doomdns\.com|doomdns\.org|dvrdns\.org|dyn-o-saur\.com|dynalias\.com|dynalias\.net|dynalias\.org|dynathome\.net|dyndns\.ws|endofinternet\.net|endofinternet\.org|endoftheinternet\.org|est-a-la-maison\.com|est-a-la-masion\.com|est-le-patron\.com|est-mon-blogueur\.com|for-better\.biz|for-more\.biz|for-our\.info|for-some\.biz|for-the\.biz|forgot\.her\.name|forgot\.his\.name|from-ak\.com|from-al\.com|from-ar\.com|from-az\.net|from-ca\.com|from-co\.net|from-ct\.com|from-dc\.com|from-de\.com|from-fl\.com|from-ga\.com|from-hi\.com|from-ia\.com|from-id\.com|from-il\.com|from-in\.com|from-ks\.com|from-ky\.com|from-la\.net|from-ma\.com|from-md\.com|from-me\.org|from-mi\.com|from-mn\.com|from-mo\.com|from-ms\.com|from-mt\.com|from-nc\.com|from-nd\.com|from-ne\.com|from-nh\.com|from-nj\.com|from-nm\.com|from-nv\.com|from-ny\.net|from-oh\.com|from-ok\.com|from-or\.com|from-pa\.com|from-pr\.com|from-ri\.com|from-sc\.com|from-sd\.com|from-tn\.com|from-tx\.com|from-ut\.com|from-va\.com|from-vt\.com|from-wa\.com|from-wi\.com|from-wv\.com|from-wy\.com|ftpaccess\.cc|fuettertdasnetz\.de|game-host\.org|game-server\.cc|getmyip\.com|gets-it\.net|go\.dyndns\.org|gotdns\.com|gotdns\.org|groks-the\.info|groks-this\.info|ham-radio-op\.net|here-for-more\.info|hobby-site\.com|hobby-site\.org|home\.dyndns\.org|homedns\.org|homeftp\.net|homeftp\.org|homeip\.net|homelinux\.com|homelinux\.net|homelinux\.org|homeunix\.com|homeunix\.net|homeunix\.org|iamallama\.com|in-the-band\.net|is-a-anarchist\.com|is-a-blogger\.com|is-a-bookkeeper\.com|is-a-bruinsfan\.org|is-a-bulls-fan\.com|is-a-candidate\.org|is-a-caterer\.com|is-a-celticsfan\.org|is-a-chef\.com|is-a-chef\.net|is-a-chef\.org|is-a-conservative\.com|is-a-cpa\.com|is-a-cubicle-slave\.com|is-a-democrat\.com|is-a-designer\.com|is-a-doctor\.com|is-a-financialadvisor\.com|is-a-geek\.com|is-a-geek\.net|is-a-geek\.org|is-a-green\.com|is-a-guru\.com|is-a-hard-worker\.com|is-a-hunter\.com|is-a-knight\.org|is-a-landscaper\.com|is-a-lawyer\.com|is-a-liberal\.com|is-a-libertarian\.com|is-a-linux-user\.org|is-a-llama\.com|is-a-musician\.com|is-a-nascarfan\.com|is-a-nurse\.com|is-a-painter\.com|is-a-patsfan\.org|is-a-personaltrainer\.com|is-a-photographer\.com|is-a-player\.com|is-a-republican\.com|is-a-rockstar\.com|is-a-socialist\.com|is-a-soxfan\.org|is-a-student\.com|is-a-teacher\.com|is-a-techie\.com|is-a-therapist\.com|is-an-accountant\.com|is-an-actor\.com|is-an-actress\.com|is-an-anarchist\.com|is-an-artist\.com|is-an-engineer\.com|is-an-entertainer\.com|is-by\.us|is-certified\.com|is-found\.org|is-gone\.com|is-into-anime\.com|is-into-cars\.com|is-into-cartoons\.com|is-into-games\.com|is-leet\.com|is-lost\.org|is-not-certified\.com|is-saved\.org|is-slick\.com|is-uberleet\.com|is-very-bad\.org|is-very-evil\.org|is-very-good\.org|is-very-nice\.org|is-very-sweet\.org|is-with-theband\.com|isa-geek\.com|isa-geek\.net|isa-geek\.org|isa-hockeynut\.com|issmarterthanyou\.com|isteingeek\.de|istmein\.de|kicks-ass\.net|kicks-ass\.org|knowsitall\.info|land-4-sale\.us|lebtimnetz\.de|leitungsen\.de|likes-pie\.com|likescandy\.com|merseine\.nu|mine\.nu|misconfused\.org|mypets\.ws|myphotos\.cc|neat-url\.com|office-on-the\.net|on-the-web\.tv|podzone\.net|podzone\.org|readmyblog\.org|saves-the-whales\.com|scrapper-site\.net|scrapping\.cc|selfip\.biz|selfip\.com|selfip\.info|selfip\.net|selfip\.org|sells-for-less\.com|sells-for-u\.com|sells-it\.net|sellsyourhome\.org|servebbs\.com|servebbs\.net|servebbs\.org|serveftp\.net|serveftp\.org|servegame\.org|shacknet\.nu|simple-url\.com|space-to-rent\.com|stuff-4-sale\.org|stuff-4-sale\.us|teaches-yoga\.com|thruhere\.net|traeumtgerade\.de|webhop\.biz|webhop\.info|webhop\.net|webhop\.org|worse-than\.tv|writesthisblog\.com|ddnss\.de|dyn\.ddnss\.de|dyndns\.ddnss\.de|dyndns1\.de|dyn-ip24\.de|home-webserver\.de|dyn\.home-webserver\.de|myhome-server\.de|ddnss\.org|dynv6\.net|e4\.cz|enonic\.io|customer\.enonic\.io|eu\.org|al\.eu\.org|asso\.eu\.org|at\.eu\.org|au\.eu\.org|be\.eu\.org|bg\.eu\.org|ca\.eu\.org|cd\.eu\.org|ch\.eu\.org|cn\.eu\.org|cy\.eu\.org|cz\.eu\.org|de\.eu\.org|dk\.eu\.org|edu\.eu\.org|ee\.eu\.org|es\.eu\.org|fi\.eu\.org|fr\.eu\.org|gr\.eu\.org|hr\.eu\.org|hu\.eu\.org|ie\.eu\.org|il\.eu\.org|in\.eu\.org|int\.eu\.org|is\.eu\.org|it\.eu\.org|jp\.eu\.org|kr\.eu\.org|lt\.eu\.org|lu\.eu\.org|lv\.eu\.org|mc\.eu\.org|me\.eu\.org|mk\.eu\.org|mt\.eu\.org|my\.eu\.org|net\.eu\.org|ng\.eu\.org|nl\.eu\.org|no\.eu\.org|nz\.eu\.org|paris\.eu\.org|pl\.eu\.org|pt\.eu\.org|q-a\.eu\.org|ro\.eu\.org|ru\.eu\.org|se\.eu\.org|si\.eu\.org|sk\.eu\.org|tr\.eu\.org|uk\.eu\.org|us\.eu\.org|eu-1\.evennode\.com|eu-2\.evennode\.com|us-1\.evennode\.com|us-2\.evennode\.com|apps\.fbsbx\.com|ru\.net|adygeya\.ru|bashkiria\.ru|bir\.ru|cbg\.ru|com\.ru|dagestan\.ru|grozny\.ru|kalmykia\.ru|kustanai\.ru|marine\.ru|mordovia\.ru|msk\.ru|mytis\.ru|nalchik\.ru|nov\.ru|pyatigorsk\.ru|spb\.ru|vladikavkaz\.ru|vladimir\.ru|abkhazia\.su|adygeya\.su|aktyubinsk\.su|arkhangelsk\.su|armenia\.su|ashgabad\.su|azerbaijan\.su|balashov\.su|bashkiria\.su|bryansk\.su|bukhara\.su|chimkent\.su|dagestan\.su|east-kazakhstan\.su|exnet\.su|georgia\.su|grozny\.su|ivanovo\.su|jambyl\.su|kalmykia\.su|kaluga\.su|karacol\.su|karaganda\.su|karelia\.su|khakassia\.su|krasnodar\.su|kurgan\.su|kustanai\.su|lenug\.su|mangyshlak\.su|mordovia\.su|msk\.su|murmansk\.su|nalchik\.su|navoi\.su|north-kazakhstan\.su|nov\.su|obninsk\.su|penza\.su|pokrovsk\.su|sochi\.su|spb\.su|tashkent\.su|termez\.su|togliatti\.su|troitsk\.su|tselinograd\.su|tula\.su|tuva\.su|vladikavkaz\.su|vladimir\.su|vologda\.su|map\.fastly\.net|a\.prod\.fastly\.net|global\.prod\.fastly\.net|a\.ssl\.fastly\.net|b\.ssl\.fastly\.net|global\.ssl\.fastly\.net|fastlylb\.net|map\.fastlylb\.net|fhapp\.xyz|firebaseapp\.com|flynnhub\.com|freebox-os\.com|freeboxos\.com|fbx-os\.fr|fbxos\.fr|freebox-os\.fr|freeboxos\.fr|myfusion\.cloud|futurehosting\.at|futuremailing\.at|[^.]+\.ex\.ortsinfo\.at|[^.]+\.kunden\.ortsinfo\.at|[^.]+\.statics\.cloud|service\.gov\.uk|github\.io|githubusercontent\.com|githubcloud\.com|[^.]+\.api\.githubcloud\.com|[^.]+\.ext\.githubcloud\.com|gist\.githubcloud\.com|[^.]+\.githubcloudusercontent\.com|gitlab\.io|homeoffice\.gov\.uk|ro\.im|shop\.ro|goip\.de|[^.]+\.0emm\.com|appspot\.com|blogspot\.ae|blogspot\.al|blogspot\.am|blogspot\.ba|blogspot\.be|blogspot\.bg|blogspot\.bj|blogspot\.ca|blogspot\.cf|blogspot\.ch|blogspot\.cl|blogspot\.co\.at|blogspot\.co\.id|blogspot\.co\.il|blogspot\.co\.ke|blogspot\.co\.nz|blogspot\.co\.uk|blogspot\.co\.za|blogspot\.com|blogspot\.com\.ar|blogspot\.com\.au|blogspot\.com\.br|blogspot\.com\.by|blogspot\.com\.co|blogspot\.com\.cy|blogspot\.com\.ee|blogspot\.com\.eg|blogspot\.com\.es|blogspot\.com\.mt|blogspot\.com\.ng|blogspot\.com\.tr|blogspot\.com\.uy|blogspot\.cv|blogspot\.cz|blogspot\.de|blogspot\.dk|blogspot\.fi|blogspot\.fr|blogspot\.gr|blogspot\.hk|blogspot\.hr|blogspot\.hu|blogspot\.ie|blogspot\.in|blogspot\.is|blogspot\.it|blogspot\.jp|blogspot\.kr|blogspot\.li|blogspot\.lt|blogspot\.lu|blogspot\.md|blogspot\.mk|blogspot\.mr|blogspot\.mx|blogspot\.my|blogspot\.nl|blogspot\.no|blogspot\.pe|blogspot\.pt|blogspot\.qa|blogspot\.re|blogspot\.ro|blogspot\.rs|blogspot\.ru|blogspot\.se|blogspot\.sg|blogspot\.si|blogspot\.sk|blogspot\.sn|blogspot\.td|blogspot\.tw|blogspot\.ug|blogspot\.vn|cloudfunctions\.net|codespot\.com|googleapis\.com|googlecode\.com|pagespeedmobilizer\.com|publishproxy\.com|withgoogle\.com|withyoutube\.com|hashbang\.sh|hasura-app\.io|hepforge\.org|herokuapp\.com|herokussl\.com|iki\.fi|biz\.at|info\.at|ac\.leg\.br|al\.leg\.br|am\.leg\.br|ap\.leg\.br|ba\.leg\.br|ce\.leg\.br|df\.leg\.br|es\.leg\.br|go\.leg\.br|ma\.leg\.br|mg\.leg\.br|ms\.leg\.br|mt\.leg\.br|pa\.leg\.br|pb\.leg\.br|pe\.leg\.br|pi\.leg\.br|pr\.leg\.br|rj\.leg\.br|rn\.leg\.br|ro\.leg\.br|rr\.leg\.br|rs\.leg\.br|sc\.leg\.br|se\.leg\.br|sp\.leg\.br|to\.leg\.br|[^.]+\.triton\.zone|[^.]+\.cns\.joyent\.com|js\.org|keymachine\.de|knightpoint\.systems|co\.krd|edu\.krd|[^.]+\.magentosite\.cloud|meteorapp\.com|eu\.meteorapp\.com|co\.pl|azurewebsites\.net|azure-mobile\.net|cloudapp\.net|bmoattachments\.org|4u\.com|ngrok\.io|nfshost\.com|nsupdate\.info|nerdpol\.ovh|blogsyte\.com|brasilia\.me|cable-modem\.org|ciscofreak\.com|collegefan\.org|couchpotatofries\.org|damnserver\.com|ddns\.me|ditchyourip\.com|dnsfor\.me|dnsiskinky\.com|dvrcam\.info|dynns\.com|eating-organic\.net|fantasyleague\.cc|geekgalaxy\.com|golffan\.us|health-carereform\.com|homesecuritymac\.com|homesecuritypc\.com|hopto\.me|ilovecollege\.info|loginto\.me|mlbfan\.org|mmafan\.biz|myactivedirectory\.com|mydissent\.net|myeffect\.net|mymediapc\.net|mypsx\.net|mysecuritycamera\.com|mysecuritycamera\.net|mysecuritycamera\.org|net-freaks\.com|nflfan\.org|nhlfan\.net|no-ip\.ca|no-ip\.co\.uk|no-ip\.net|noip\.us|onthewifi\.com|pgafan\.net|point2this\.com|pointto\.us|privatizehealthinsurance\.net|quicksytes\.com|read-books\.org|securitytactics\.com|serveexchange\.com|servehumour\.com|servep2p\.com|servesarcasm\.com|stufftoread\.com|ufcfan\.org|unusualperson\.com|workisboring\.com|3utilities\.com|bounceme\.net|ddns\.net|ddnsking\.com|gotdns\.ch|hopto\.org|myftp\.biz|myftp\.org|myvnc\.com|no-ip\.biz|no-ip\.info|no-ip\.org|noip\.me|redirectme\.net|servebeer\.com|serveblog\.net|servecounterstrike\.com|serveftp\.com|servegame\.com|servehalflife\.com|servehttp\.com|serveirc\.com|serveminecraft\.net|servemp3\.com|servepics\.com|servequake\.com|sytes\.net|webhop\.me|zapto\.org|nyc\.mn|nid\.io|opencraft\.hosting|operaunite\.com|outsystemscloud\.com|ownprovider\.com|oy\.lc|pgfog\.com|pagefrontapp\.com|art\.pl|gliwice\.pl|krakow\.pl|poznan\.pl|wroc\.pl|zakopane\.pl|pantheonsite\.io|gotpantheon\.com|mypep\.link|on-web\.fr|xen\.prgmr\.com|priv\.at|protonet\.io|chirurgiens-dentistes-en-france\.fr|qa2\.com|dev-myqnapcloud\.com|alpha-myqnapcloud\.com|myqnapcloud\.com|rackmaze\.com|rackmaze\.net|rhcloud\.com|hzc\.io|wellbeingzone\.eu|ptplus\.fit|wellbeingzone\.co\.uk|sandcats\.io|logoip\.de|logoip\.com|firewall-gateway\.com|firewall-gateway\.de|my-gateway\.de|my-router\.de|spdns\.de|spdns\.eu|firewall-gateway\.net|my-firewall\.org|myfirewall\.org|spdns\.org|biz\.ua|co\.ua|pp\.ua|shiftedit\.io|myshopblocks\.com|1kapp\.com|appchizi\.com|applinzi\.com|sinaapp\.com|vipsinaapp\.com|bounty-full\.com|alpha\.bounty-full\.com|beta\.bounty-full\.com|static\.land|dev\.static\.land|sites\.static\.land|apps\.lair\.io|[^.]+\.stolos\.io|spacekit\.io|stackspace\.space|diskstation\.me|dscloud\.biz|dscloud\.me|dscloud\.mobi|dsmynas\.com|dsmynas\.net|dsmynas\.org|familyds\.com|familyds\.net|familyds\.org|i234\.me|myds\.me|synology\.me|taifun-dns\.de|gda\.pl|gdansk\.pl|gdynia\.pl|med\.pl|sopot\.pl|bloxcms\.com|townnews-staging\.com|[^.]+\.transurl\.be|[^.]+\.transurl\.eu|[^.]+\.transurl\.nl|tuxfamily\.org|dd-dns\.de|diskstation\.eu|diskstation\.org|dray-dns\.de|draydns\.de|dyn-vpn\.de|dynvpn\.de|mein-vigor\.de|my-vigor\.de|my-wan\.de|syno-ds\.de|synology-diskstation\.de|synology-ds\.de|hk\.com|hk\.org|ltd\.hk|inc\.hk|lib\.de\.us|router\.management|remotewd\.com|wmflabs\.org|yolasite\.com|ybo\.faith|yombo\.me|homelink\.one|ybo\.party|ybo\.review|ybo\.science|ybo\.trade|za\.net|za\.org|now\.sh|cc\.ua|inf\.ua|ltd\.ua)$/;
},{}],23:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],24:[function(require,module,exports){
//     Underscore.js 1.8.3
//     http://underscorejs.org
//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.

(function() {

  // Baseline setup
  // --------------

  // Establish the root object, `window` in the browser, or `exports` on the server.
  var root = this;

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

  // Create quick reference variables for speed access to core prototypes.
  var
    push             = ArrayProto.push,
    slice            = ArrayProto.slice,
    toString         = ObjProto.toString,
    hasOwnProperty   = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var
    nativeIsArray      = Array.isArray,
    nativeKeys         = Object.keys,
    nativeBind         = FuncProto.bind,
    nativeCreate       = Object.create;

  // Naked function reference for surrogate-prototype-swapping.
  var Ctor = function(){};

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) {
    if (obj instanceof _) return obj;
    if (!(this instanceof _)) return new _(obj);
    this._wrapped = obj;
  };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for the old `require()` API. If we're in
  // the browser, add `_` as a global object.
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root._ = _;
  }

  // Current version.
  _.VERSION = '1.8.3';

  // Internal function that returns an efficient (for current engines) version
  // of the passed-in callback, to be repeatedly applied in other Underscore
  // functions.
  var optimizeCb = function(func, context, argCount) {
    if (context === void 0) return func;
    switch (argCount == null ? 3 : argCount) {
      case 1: return function(value) {
        return func.call(context, value);
      };
      case 2: return function(value, other) {
        return func.call(context, value, other);
      };
      case 3: return function(value, index, collection) {
        return func.call(context, value, index, collection);
      };
      case 4: return function(accumulator, value, index, collection) {
        return func.call(context, accumulator, value, index, collection);
      };
    }
    return function() {
      return func.apply(context, arguments);
    };
  };

  // A mostly-internal function to generate callbacks that can be applied
  // to each element in a collection, returning the desired result — either
  // identity, an arbitrary callback, a property matcher, or a property accessor.
  var cb = function(value, context, argCount) {
    if (value == null) return _.identity;
    if (_.isFunction(value)) return optimizeCb(value, context, argCount);
    if (_.isObject(value)) return _.matcher(value);
    return _.property(value);
  };
  _.iteratee = function(value, context) {
    return cb(value, context, Infinity);
  };

  // An internal function for creating assigner functions.
  var createAssigner = function(keysFunc, undefinedOnly) {
    return function(obj) {
      var length = arguments.length;
      if (length < 2 || obj == null) return obj;
      for (var index = 1; index < length; index++) {
        var source = arguments[index],
            keys = keysFunc(source),
            l = keys.length;
        for (var i = 0; i < l; i++) {
          var key = keys[i];
          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];
        }
      }
      return obj;
    };
  };

  // An internal function for creating a new object that inherits from another.
  var baseCreate = function(prototype) {
    if (!_.isObject(prototype)) return {};
    if (nativeCreate) return nativeCreate(prototype);
    Ctor.prototype = prototype;
    var result = new Ctor;
    Ctor.prototype = null;
    return result;
  };

  var property = function(key) {
    return function(obj) {
      return obj == null ? void 0 : obj[key];
    };
  };

  // Helper for collection methods to determine whether a collection
  // should be iterated as an array or as an object
  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
  var getLength = property('length');
  var isArrayLike = function(collection) {
    var length = getLength(collection);
    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
  };

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles raw objects in addition to array-likes. Treats all
  // sparse array-likes as if they were dense.
  _.each = _.forEach = function(obj, iteratee, context) {
    iteratee = optimizeCb(iteratee, context);
    var i, length;
    if (isArrayLike(obj)) {
      for (i = 0, length = obj.length; i < length; i++) {
        iteratee(obj[i], i, obj);
      }
    } else {
      var keys = _.keys(obj);
      for (i = 0, length = keys.length; i < length; i++) {
        iteratee(obj[keys[i]], keys[i], obj);
      }
    }
    return obj;
  };

  // Return the results of applying the iteratee to each element.
  _.map = _.collect = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length,
        results = Array(length);
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      results[index] = iteratee(obj[currentKey], currentKey, obj);
    }
    return results;
  };

  // Create a reducing function iterating left or right.
  function createReduce(dir) {
    // Optimized iterator function as using arguments.length
    // in the main function will deoptimize the, see #1991.
    function iterator(obj, iteratee, memo, keys, index, length) {
      for (; index >= 0 && index < length; index += dir) {
        var currentKey = keys ? keys[index] : index;
        memo = iteratee(memo, obj[currentKey], currentKey, obj);
      }
      return memo;
    }

    return function(obj, iteratee, memo, context) {
      iteratee = optimizeCb(iteratee, context, 4);
      var keys = !isArrayLike(obj) && _.keys(obj),
          length = (keys || obj).length,
          index = dir > 0 ? 0 : length - 1;
      // Determine the initial value if none is provided.
      if (arguments.length < 3) {
        memo = obj[keys ? keys[index] : index];
        index += dir;
      }
      return iterator(obj, iteratee, memo, keys, index, length);
    };
  }

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`.
  _.reduce = _.foldl = _.inject = createReduce(1);

  // The right-associative version of reduce, also known as `foldr`.
  _.reduceRight = _.foldr = createReduce(-1);

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, predicate, context) {
    var key;
    if (isArrayLike(obj)) {
      key = _.findIndex(obj, predicate, context);
    } else {
      key = _.findKey(obj, predicate, context);
    }
    if (key !== void 0 && key !== -1) return obj[key];
  };

  // Return all the elements that pass a truth test.
  // Aliased as `select`.
  _.filter = _.select = function(obj, predicate, context) {
    var results = [];
    predicate = cb(predicate, context);
    _.each(obj, function(value, index, list) {
      if (predicate(value, index, list)) results.push(value);
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, predicate, context) {
    return _.filter(obj, _.negate(cb(predicate)), context);
  };

  // Determine whether all of the elements match a truth test.
  // Aliased as `all`.
  _.every = _.all = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (!predicate(obj[currentKey], currentKey, obj)) return false;
    }
    return true;
  };

  // Determine if at least one element in the object matches a truth test.
  // Aliased as `any`.
  _.some = _.any = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (predicate(obj[currentKey], currentKey, obj)) return true;
    }
    return false;
  };

  // Determine if the array or object contains a given item (using `===`).
  // Aliased as `includes` and `include`.
  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {
    if (!isArrayLike(obj)) obj = _.values(obj);
    if (typeof fromIndex != 'number' || guard) fromIndex = 0;
    return _.indexOf(obj, item, fromIndex) >= 0;
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = function(obj, method) {
    var args = slice.call(arguments, 2);
    var isFunc = _.isFunction(method);
    return _.map(obj, function(value) {
      var func = isFunc ? method : value[method];
      return func == null ? func : func.apply(value, args);
    });
  };

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, _.property(key));
  };

  // Convenience version of a common use case of `filter`: selecting only objects
  // containing specific `key:value` pairs.
  _.where = function(obj, attrs) {
    return _.filter(obj, _.matcher(attrs));
  };

  // Convenience version of a common use case of `find`: getting the first object
  // containing specific `key:value` pairs.
  _.findWhere = function(obj, attrs) {
    return _.find(obj, _.matcher(attrs));
  };

  // Return the maximum element (or element-based computation).
  _.max = function(obj, iteratee, context) {
    var result = -Infinity, lastComputed = -Infinity,
        value, computed;
    if (iteratee == null && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value > result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index, list) {
        computed = iteratee(value, index, list);
        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
          result = value;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iteratee, context) {
    var result = Infinity, lastComputed = Infinity,
        value, computed;
    if (iteratee == null && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value < result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index, list) {
        computed = iteratee(value, index, list);
        if (computed < lastComputed || computed === Infinity && result === Infinity) {
          result = value;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Shuffle a collection, using the modern version of the
  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
  _.shuffle = function(obj) {
    var set = isArrayLike(obj) ? obj : _.values(obj);
    var length = set.length;
    var shuffled = Array(length);
    for (var index = 0, rand; index < length; index++) {
      rand = _.random(0, index);
      if (rand !== index) shuffled[index] = shuffled[rand];
      shuffled[rand] = set[index];
    }
    return shuffled;
  };

  // Sample **n** random values from a collection.
  // If **n** is not specified, returns a single random element.
  // The internal `guard` argument allows it to work with `map`.
  _.sample = function(obj, n, guard) {
    if (n == null || guard) {
      if (!isArrayLike(obj)) obj = _.values(obj);
      return obj[_.random(obj.length - 1)];
    }
    return _.shuffle(obj).slice(0, Math.max(0, n));
  };

  // Sort the object's values by a criterion produced by an iteratee.
  _.sortBy = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    return _.pluck(_.map(obj, function(value, index, list) {
      return {
        value: value,
        index: index,
        criteria: iteratee(value, index, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index - right.index;
    }), 'value');
  };

  // An internal function used for aggregate "group by" operations.
  var group = function(behavior) {
    return function(obj, iteratee, context) {
      var result = {};
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index) {
        var key = iteratee(value, index, obj);
        behavior(result, value, key);
      });
      return result;
    };
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = group(function(result, value, key) {
    if (_.has(result, key)) result[key].push(value); else result[key] = [value];
  });

  // Indexes the object's values by a criterion, similar to `groupBy`, but for
  // when you know that your index values will be unique.
  _.indexBy = group(function(result, value, key) {
    result[key] = value;
  });

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = group(function(result, value, key) {
    if (_.has(result, key)) result[key]++; else result[key] = 1;
  });

  // Safely create a real, live array from anything iterable.
  _.toArray = function(obj) {
    if (!obj) return [];
    if (_.isArray(obj)) return slice.call(obj);
    if (isArrayLike(obj)) return _.map(obj, _.identity);
    return _.values(obj);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    if (obj == null) return 0;
    return isArrayLike(obj) ? obj.length : _.keys(obj).length;
  };

  // Split a collection into two arrays: one whose elements all satisfy the given
  // predicate, and one whose elements all do not satisfy the predicate.
  _.partition = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var pass = [], fail = [];
    _.each(obj, function(value, key, obj) {
      (predicate(value, key, obj) ? pass : fail).push(value);
    });
    return [pass, fail];
  };

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(array, n, guard) {
    if (array == null) return void 0;
    if (n == null || guard) return array[0];
    return _.initial(array, array.length - n);
  };

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array.
  _.last = function(array, n, guard) {
    if (array == null) return void 0;
    if (n == null || guard) return array[array.length - 1];
    return _.rest(array, Math.max(0, array.length - n));
  };

  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array.
  _.rest = _.tail = _.drop = function(array, n, guard) {
    return slice.call(array, n == null || guard ? 1 : n);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, _.identity);
  };

  // Internal implementation of a recursive `flatten` function.
  var flatten = function(input, shallow, strict, startIndex) {
    var output = [], idx = 0;
    for (var i = startIndex || 0, length = getLength(input); i < length; i++) {
      var value = input[i];
      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
        //flatten current level of array or arguments object
        if (!shallow) value = flatten(value, shallow, strict);
        var j = 0, len = value.length;
        output.length += len;
        while (j < len) {
          output[idx++] = value[j++];
        }
      } else if (!strict) {
        output[idx++] = value;
      }
    }
    return output;
  };

  // Flatten out an array, either recursively (by default), or just one level.
  _.flatten = function(array, shallow) {
    return flatten(array, shallow, false);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = function(array) {
    return _.difference(array, slice.call(arguments, 1));
  };

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iteratee, context) {
    if (!_.isBoolean(isSorted)) {
      context = iteratee;
      iteratee = isSorted;
      isSorted = false;
    }
    if (iteratee != null) iteratee = cb(iteratee, context);
    var result = [];
    var seen = [];
    for (var i = 0, length = getLength(array); i < length; i++) {
      var value = array[i],
          computed = iteratee ? iteratee(value, i, array) : value;
      if (isSorted) {
        if (!i || seen !== computed) result.push(value);
        seen = computed;
      } else if (iteratee) {
        if (!_.contains(seen, computed)) {
          seen.push(computed);
          result.push(value);
        }
      } else if (!_.contains(result, value)) {
        result.push(value);
      }
    }
    return result;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = function() {
    return _.uniq(flatten(arguments, true, true));
  };

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function(array) {
    var result = [];
    var argsLength = arguments.length;
    for (var i = 0, length = getLength(array); i < length; i++) {
      var item = array[i];
      if (_.contains(result, item)) continue;
      for (var j = 1; j < argsLength; j++) {
        if (!_.contains(arguments[j], item)) break;
      }
      if (j === argsLength) result.push(item);
    }
    return result;
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = function(array) {
    var rest = flatten(arguments, true, true, 1);
    return _.filter(array, function(value){
      return !_.contains(rest, value);
    });
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = function() {
    return _.unzip(arguments);
  };

  // Complement of _.zip. Unzip accepts an array of arrays and groups
  // each array's elements on shared indices
  _.unzip = function(array) {
    var length = array && _.max(array, getLength).length || 0;
    var result = Array(length);

    for (var index = 0; index < length; index++) {
      result[index] = _.pluck(array, index);
    }
    return result;
  };

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values.
  _.object = function(list, values) {
    var result = {};
    for (var i = 0, length = getLength(list); i < length; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };

  // Generator function to create the findIndex and findLastIndex functions
  function createPredicateIndexFinder(dir) {
    return function(array, predicate, context) {
      predicate = cb(predicate, context);
      var length = getLength(array);
      var index = dir > 0 ? 0 : length - 1;
      for (; index >= 0 && index < length; index += dir) {
        if (predicate(array[index], index, array)) return index;
      }
      return -1;
    };
  }

  // Returns the first index on an array-like that passes a predicate test
  _.findIndex = createPredicateIndexFinder(1);
  _.findLastIndex = createPredicateIndexFinder(-1);

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iteratee, context) {
    iteratee = cb(iteratee, context, 1);
    var value = iteratee(obj);
    var low = 0, high = getLength(array);
    while (low < high) {
      var mid = Math.floor((low + high) / 2);
      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
    }
    return low;
  };

  // Generator function to create the indexOf and lastIndexOf functions
  function createIndexFinder(dir, predicateFind, sortedIndex) {
    return function(array, item, idx) {
      var i = 0, length = getLength(array);
      if (typeof idx == 'number') {
        if (dir > 0) {
            i = idx >= 0 ? idx : Math.max(idx + length, i);
        } else {
            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
        }
      } else if (sortedIndex && idx && length) {
        idx = sortedIndex(array, item);
        return array[idx] === item ? idx : -1;
      }
      if (item !== item) {
        idx = predicateFind(slice.call(array, i, length), _.isNaN);
        return idx >= 0 ? idx + i : -1;
      }
      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
        if (array[idx] === item) return idx;
      }
      return -1;
    };
  }

  // Return the position of the first occurrence of an item in an array,
  // or -1 if the item is not included in the array.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (stop == null) {
      stop = start || 0;
      start = 0;
    }
    step = step || 1;

    var length = Math.max(Math.ceil((stop - start) / step), 0);
    var range = Array(length);

    for (var idx = 0; idx < length; idx++, start += step) {
      range[idx] = start;
    }

    return range;
  };

  // Function (ahem) Functions
  // ------------------

  // Determines whether to execute a function as a constructor
  // or a normal function with the provided arguments
  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
    var self = baseCreate(sourceFunc.prototype);
    var result = sourceFunc.apply(self, args);
    if (_.isObject(result)) return result;
    return self;
  };

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
  // available.
  _.bind = function(func, context) {
    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
    var args = slice.call(arguments, 2);
    var bound = function() {
      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));
    };
    return bound;
  };

  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context. _ acts
  // as a placeholder, allowing any combination of arguments to be pre-filled.
  _.partial = function(func) {
    var boundArgs = slice.call(arguments, 1);
    var bound = function() {
      var position = 0, length = boundArgs.length;
      var args = Array(length);
      for (var i = 0; i < length; i++) {
        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];
      }
      while (position < arguments.length) args.push(arguments[position++]);
      return executeBound(func, bound, this, this, args);
    };
    return bound;
  };

  // Bind a number of an object's methods to that object. Remaining arguments
  // are the method names to be bound. Useful for ensuring that all callbacks
  // defined on an object belong to it.
  _.bindAll = function(obj) {
    var i, length = arguments.length, key;
    if (length <= 1) throw new Error('bindAll must be passed function names');
    for (i = 1; i < length; i++) {
      key = arguments[i];
      obj[key] = _.bind(obj[key], obj);
    }
    return obj;
  };

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memoize = function(key) {
      var cache = memoize.cache;
      var address = '' + (hasher ? hasher.apply(this, arguments) : key);
      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);
      return cache[address];
    };
    memoize.cache = {};
    return memoize;
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = function(func, wait) {
    var args = slice.call(arguments, 2);
    return setTimeout(function(){
      return func.apply(null, args);
    }, wait);
  };

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = _.partial(_.delay, _, 1);

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time. Normally, the throttled function will run
  // as much as it can, without ever going more than once per `wait` duration;
  // but if you'd like to disable the execution on the leading edge, pass
  // `{leading: false}`. To disable execution on the trailing edge, ditto.
  _.throttle = function(func, wait, options) {
    var context, args, result;
    var timeout = null;
    var previous = 0;
    if (!options) options = {};
    var later = function() {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    };
    return function() {
      var now = _.now();
      if (!previous && options.leading === false) previous = now;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0 || remaining > wait) {
        if (timeout) {
          clearTimeout(timeout);
          timeout = null;
        }
        previous = now;
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {
    var timeout, args, context, timestamp, result;

    var later = function() {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    };

    return function() {
      context = this;
      args = arguments;
      timestamp = _.now();
      var callNow = immediate && !timeout;
      if (!timeout) timeout = setTimeout(later, wait);
      if (callNow) {
        result = func.apply(context, args);
        context = args = null;
      }

      return result;
    };
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return _.partial(wrapper, func);
  };

  // Returns a negated version of the passed-in predicate.
  _.negate = function(predicate) {
    return function() {
      return !predicate.apply(this, arguments);
    };
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var args = arguments;
    var start = args.length - 1;
    return function() {
      var i = start;
      var result = args[start].apply(this, arguments);
      while (i--) result = args[i].call(this, result);
      return result;
    };
  };

  // Returns a function that will only be executed on and after the Nth call.
  _.after = function(times, func) {
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };

  // Returns a function that will only be executed up to (but not including) the Nth call.
  _.before = function(times, func) {
    var memo;
    return function() {
      if (--times > 0) {
        memo = func.apply(this, arguments);
      }
      if (times <= 1) func = null;
      return memo;
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = _.partial(_.before, 2);

  // Object Functions
  // ----------------

  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
                      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

  function collectNonEnumProps(obj, keys) {
    var nonEnumIdx = nonEnumerableProps.length;
    var constructor = obj.constructor;
    var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;

    // Constructor is a special case.
    var prop = 'constructor';
    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);

    while (nonEnumIdx--) {
      prop = nonEnumerableProps[nonEnumIdx];
      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
        keys.push(prop);
      }
    }
  }

  // Retrieve the names of an object's own properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`
  _.keys = function(obj) {
    if (!_.isObject(obj)) return [];
    if (nativeKeys) return nativeKeys(obj);
    var keys = [];
    for (var key in obj) if (_.has(obj, key)) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve all the property names of an object.
  _.allKeys = function(obj) {
    if (!_.isObject(obj)) return [];
    var keys = [];
    for (var key in obj) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var values = Array(length);
    for (var i = 0; i < length; i++) {
      values[i] = obj[keys[i]];
    }
    return values;
  };

  // Returns the results of applying the iteratee to each element of the object
  // In contrast to _.map it returns an object
  _.mapObject = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys =  _.keys(obj),
          length = keys.length,
          results = {},
          currentKey;
      for (var index = 0; index < length; index++) {
        currentKey = keys[index];
        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
      }
      return results;
  };

  // Convert an object into a list of `[key, value]` pairs.
  _.pairs = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var pairs = Array(length);
    for (var i = 0; i < length; i++) {
      pairs[i] = [keys[i], obj[keys[i]]];
    }
    return pairs;
  };

  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function(obj) {
    var result = {};
    var keys = _.keys(obj);
    for (var i = 0, length = keys.length; i < length; i++) {
      result[obj[keys[i]]] = keys[i];
    }
    return result;
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = createAssigner(_.allKeys);

  // Assigns a given object with all the own properties in the passed-in object(s)
  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
  _.extendOwn = _.assign = createAssigner(_.keys);

  // Returns the first key on an object that passes a predicate test
  _.findKey = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = _.keys(obj), key;
    for (var i = 0, length = keys.length; i < length; i++) {
      key = keys[i];
      if (predicate(obj[key], key, obj)) return key;
    }
  };

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = function(object, oiteratee, context) {
    var result = {}, obj = object, iteratee, keys;
    if (obj == null) return result;
    if (_.isFunction(oiteratee)) {
      keys = _.allKeys(obj);
      iteratee = optimizeCb(oiteratee, context);
    } else {
      keys = flatten(arguments, false, false, 1);
      iteratee = function(value, key, obj) { return key in obj; };
      obj = Object(obj);
    }
    for (var i = 0, length = keys.length; i < length; i++) {
      var key = keys[i];
      var value = obj[key];
      if (iteratee(value, key, obj)) result[key] = value;
    }
    return result;
  };

   // Return a copy of the object without the blacklisted properties.
  _.omit = function(obj, iteratee, context) {
    if (_.isFunction(iteratee)) {
      iteratee = _.negate(iteratee);
    } else {
      var keys = _.map(flatten(arguments, false, false, 1), String);
      iteratee = function(value, key) {
        return !_.contains(keys, key);
      };
    }
    return _.pick(obj, iteratee, context);
  };

  // Fill in a given object with default properties.
  _.defaults = createAssigner(_.allKeys, true);

  // Creates an object that inherits from the given prototype object.
  // If additional properties are provided then they will be added to the
  // created object.
  _.create = function(prototype, props) {
    var result = baseCreate(prototype);
    if (props) _.extendOwn(result, props);
    return result;
  };

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Returns whether an object has a given set of `key:value` pairs.
  _.isMatch = function(object, attrs) {
    var keys = _.keys(attrs), length = keys.length;
    if (object == null) return !length;
    var obj = Object(object);
    for (var i = 0; i < length; i++) {
      var key = keys[i];
      if (attrs[key] !== obj[key] || !(key in obj)) return false;
    }
    return true;
  };


  // Internal recursive comparison function for `isEqual`.
  var eq = function(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b) return a !== 0 || 1 / a === 1 / b;
    // A strict comparison is necessary because `null == undefined`.
    if (a == null || b == null) return a === b;
    // Unwrap any wrapped objects.
    if (a instanceof _) a = a._wrapped;
    if (b instanceof _) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className !== toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
      case '[object RegExp]':
      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return '' + a === '' + b;
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive.
        // Object(NaN) is equivalent to NaN
        if (+a !== +a) return +b !== +b;
        // An `egal` comparison is performed for other numeric values.
        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a === +b;
    }

    var areArrays = className === '[object Array]';
    if (!areArrays) {
      if (typeof a != 'object' || typeof b != 'object') return false;

      // Objects with different constructors are not equivalent, but `Object`s or `Array`s
      // from different frames are.
      var aCtor = a.constructor, bCtor = b.constructor;
      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
                               _.isFunction(bCtor) && bCtor instanceof bCtor)
                          && ('constructor' in a && 'constructor' in b)) {
        return false;
      }
    }
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.

    // Initializing stack of traversed objects.
    // It's done here since we only need them for objects and arrays comparison.
    aStack = aStack || [];
    bStack = bStack || [];
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] === a) return bStack[length] === b;
    }

    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);

    // Recursively compare objects and arrays.
    if (areArrays) {
      // Compare array lengths to determine if a deep comparison is necessary.
      length = a.length;
      if (length !== b.length) return false;
      // Deep compare the contents, ignoring non-numeric properties.
      while (length--) {
        if (!eq(a[length], b[length], aStack, bStack)) return false;
      }
    } else {
      // Deep compare objects.
      var keys = _.keys(a), key;
      length = keys.length;
      // Ensure that both objects contain the same number of properties before comparing deep equality.
      if (_.keys(b).length !== length) return false;
      while (length--) {
        // Deep compare each member
        key = keys[length];
        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return true;
  };

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
    return _.keys(obj).length === 0;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) === '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    var type = typeof obj;
    return type === 'function' || type === 'object' && !!obj;
  };

  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.
  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {
    _['is' + name] = function(obj) {
      return toString.call(obj) === '[object ' + name + ']';
    };
  });

  // Define a fallback version of the method in browsers (ahem, IE < 9), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return _.has(obj, 'callee');
    };
  }

  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
  // IE 11 (#1621), and in Safari 8 (#1929).
  if (typeof /./ != 'function' && typeof Int8Array != 'object') {
    _.isFunction = function(obj) {
      return typeof obj == 'function' || false;
    };
  }

  // Is a given object a finite number?
  _.isFinite = function(obj) {
    return isFinite(obj) && !isNaN(parseFloat(obj));
  };

  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
  _.isNaN = function(obj) {
    return _.isNumber(obj) && obj !== +obj;
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function(obj, key) {
    return obj != null && hasOwnProperty.call(obj, key);
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iteratees.
  _.identity = function(value) {
    return value;
  };

  // Predicate-generating functions. Often useful outside of Underscore.
  _.constant = function(value) {
    return function() {
      return value;
    };
  };

  _.noop = function(){};

  _.property = property;

  // Generates a function for a given object that returns a given property.
  _.propertyOf = function(obj) {
    return obj == null ? function(){} : function(key) {
      return obj[key];
    };
  };

  // Returns a predicate for checking whether an object has a given set of
  // `key:value` pairs.
  _.matcher = _.matches = function(attrs) {
    attrs = _.extendOwn({}, attrs);
    return function(obj) {
      return _.isMatch(obj, attrs);
    };
  };

  // Run a function **n** times.
  _.times = function(n, iteratee, context) {
    var accum = Array(Math.max(0, n));
    iteratee = optimizeCb(iteratee, context, 1);
    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
    return accum;
  };

  // Return a random integer between min and max (inclusive).
  _.random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  };

  // A (possibly faster) way to get the current timestamp as an integer.
  _.now = Date.now || function() {
    return new Date().getTime();
  };

   // List of HTML entities for escaping.
  var escapeMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;',
    '`': '&#x60;'
  };
  var unescapeMap = _.invert(escapeMap);

  // Functions for escaping and unescaping strings to/from HTML interpolation.
  var createEscaper = function(map) {
    var escaper = function(match) {
      return map[match];
    };
    // Regexes for identifying a key that needs to be escaped
    var source = '(?:' + _.keys(map).join('|') + ')';
    var testRegexp = RegExp(source);
    var replaceRegexp = RegExp(source, 'g');
    return function(string) {
      string = string == null ? '' : '' + string;
      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
    };
  };
  _.escape = createEscaper(escapeMap);
  _.unescape = createEscaper(unescapeMap);

  // If the value of the named `property` is a function then invoke it with the
  // `object` as context; otherwise, return it.
  _.result = function(object, property, fallback) {
    var value = object == null ? void 0 : object[property];
    if (value === void 0) {
      value = fallback;
    }
    return _.isFunction(value) ? value.call(object) : value;
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate    : /<%([\s\S]+?)%>/g,
    interpolate : /<%=([\s\S]+?)%>/g,
    escape      : /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'":      "'",
    '\\':     '\\',
    '\r':     'r',
    '\n':     'n',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escaper = /\\|'|\r|\n|\u2028|\u2029/g;

  var escapeChar = function(match) {
    return '\\' + escapes[match];
  };

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  // NB: `oldSettings` only exists for backwards compatibility.
  _.template = function(text, settings, oldSettings) {
    if (!settings && oldSettings) settings = oldSettings;
    settings = _.defaults({}, settings, _.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset).replace(escaper, escapeChar);
      index = offset + match.length;

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      } else if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      } else if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }

      // Adobe VMs need the match returned to produce the correct offest.
      return match;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + 'return __p;\n';

    try {
      var render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled source as a convenience for precompilation.
    var argument = settings.variable || 'obj';
    template.source = 'function(' + argument + '){\n' + source + '}';

    return template;
  };

  // Add a "chain" function. Start chaining a wrapped Underscore object.
  _.chain = function(obj) {
    var instance = _(obj);
    instance._chain = true;
    return instance;
  };

  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.

  // Helper function to continue chaining intermediate results.
  var result = function(instance, obj) {
    return instance._chain ? _(obj).chain() : obj;
  };

  // Add your own custom functions to the Underscore object.
  _.mixin = function(obj) {
    _.each(_.functions(obj), function(name) {
      var func = _[name] = obj[name];
      _.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return result(this, func.apply(_, args));
      };
    });
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
      return result(this, obj);
    };
  });

  // Add all accessor Array functions to the wrapper.
  _.each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      return result(this, method.apply(this._wrapped, arguments));
    };
  });

  // Extracts the result from a wrapped and chained object.
  _.prototype.value = function() {
    return this._wrapped;
  };

  // Provide unwrapping proxy for some methods used in engine operations
  // such as arithmetic and JSON stringification.
  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;

  _.prototype.toString = function() {
    return '' + this._wrapped;
  };

  // AMD registration happens at the end for compatibility with AMD loaders
  // that may not enforce next-turn semantics on modules. Even though general
  // practice for AMD registration is to be anonymous, underscore registers
  // as a named module because, like jQuery, it is a base library that is
  // popular enough to be bundled in a third party lib, but not be part of
  // an AMD load request. Those cases could generate an error when an
  // anonymous define() is called outside of a loader request.
  if (typeof define === 'function' && define.amd) {
    define('underscore', [], function() {
      return _;
    });
  }
}.call(this));

},{}]},{},[19])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
