"use strict";
/// <reference path="../typings/schema.d.ts" />
/** @module util/schema */
exports.__esModule = true;
var meteor_1 = require("./meteor");
/**
 * @function optional
 * @export
 * @summary returns an optional primitive definition
 * @param {PrimitiveConstructor} primitive
 * @returns {Object} the schema value definition
 */
function optional(primitive) {
    return {
        type: primitive,
        optional: true
    };
}
exports.optional = optional;
/**
 * @function blackbox
 * @export
 * @summary returns an blackbox primitive definition
 * @param {PrimitiveConstructor} primitive (technically this will always be `Object`
 * but it is configurable for consistency)
 * @returns {IBlackbox} the schema value definition
 */
function blackbox(primitive) {
    return {
        type: primitive || Object,
        blackbox: true
    };
}
exports.blackbox = blackbox;
/**
 * @function optionalBlackbox
 * @export
 * @summary returns an optional, blackboxed primitive definition
 * @param {PrimitiveConstructor} primitive (technically this will always be `Object`
 * but it is configurable for consistency)
 * @returns {IOptionalBlackbox} the schema value definition
 */
function optionalBlackbox(primitive) {
    return {
        type: primitive || Object,
        optional: true,
        blackbox: true
    };
}
exports.optionalBlackbox = optionalBlackbox;
/**
 * @function createdDate
 * @export
 * @summary returns a typedef with a type of Date and an
 * autoValue function which returns a new date on insert
 * @returns {Schema.ICreatedDate} the schema value definition
 */
function createdDate() {
    return {
        type: Date,
        autoValue: function () {
            if (this.isInsert) {
                return new Date();
            }
            else if (this.isUpsert) {
                return { $setOnInsert: new Date() };
            }
            else {
                this.unset();
            }
        }
    };
}
exports.createdDate = createdDate;
/**
 * @function updatedDate
 * @export
 * @summary returns a typedef with a type of Date and an
 * autoValue function which returns a new date
 * @returns {Schema.IUpdatedDate} the schema value definition
 */
function updatedDate() {
    return {
        type: Date,
        autoValue: function () {
            return new Date();
        }
    };
}
exports.updatedDate = updatedDate;
/**
 * @function geoJSON
 * @export
 * @summary returns a typedef for a geoJSON object
 * @param {*} SimpleSchema A reference to SimpleSchema
 * @returns {Schema.IGeoJSON} the schema value definition
 */
function geoJSON(SimpleSchema) {
    return new SimpleSchema({
        'type': {
            type: String
        },
        'coordinates': {
            type: Array,
            minCount: 2,
            maxCount: 2
        },
        'coordinates.$': {
            type: Number
        }
    });
}
exports.geoJSON = geoJSON;
/**
 * @function defaultValue
 * @export
 * @summary returns a typedef for a field with a defined default
 * @param {PrimitiveConstructor} type The type constructor (e.g. Number)
 * @param {any} value The default value
 */
function defaultValue(type, value) {
    return {
        type: type,
        defaultValue: value
    };
}
exports.defaultValue = defaultValue;
/**
 * @function optionalDefaultValue
 * @export
 * @summary returns a typedef for an optional field with a defined default
 * @param {PrimitiveConstructor} type The type constructor (e.g. Number)
 * @param {any} value The default value
 */
function optionalDefaultValue(type, value) {
    return {
        type: type,
        optional: true,
        defaultValue: value
    };
}
exports.optionalDefaultValue = optionalDefaultValue;
/**
 * @function minZeroNumber
 * @export
 * @summary returns a typedef for a field for a number with a minimum
 * permitted value of zero
 * @returns {Object} typedef for number field with min value of 0
 */
function minZeroNumber() {
    return {
        type: Number,
        min: 0
    };
}
exports.minZeroNumber = minZeroNumber;
/**
 * @function optionalMinZeroNumber
 * @export
 * @summary returns a typedef for an optional field for a number with a minimum
 * permitted value of zero
 * @returns {Object} typedef for optional number field with min value of 0
 */
function optionalMinZeroNumber() {
    return Object.assign(minZeroNumber(), { optional: true });
}
exports.optionalMinZeroNumber = optionalMinZeroNumber;
/**
 * @function minZeroNumberWithDefault
 * @export
 * @summary returns a typedef for a field for a number with a minimum
 * permitted and default value of zero
 * @returns {Object} typedef for number field with minimum and default value of 0
 */
function minZeroNumberWithDefault() {
    return Object.assign(minZeroNumber(), { defaultValue: 0 });
}
exports.minZeroNumberWithDefault = minZeroNumberWithDefault;
/**
 * @function integerBetweenValues
 * @export
 * @summary returns a typedef for a field for an integer between two values
 * @param min {number} the minimum permitted value
 * @param max {number} the maximum permitted value
 */
function integerBetweenValues(min, max) {
    return {
        type: 'SimpleSchema.Integer',
        min: min,
        max: max
    };
}
exports.integerBetweenValues = integerBetweenValues;
/**
 * @function optionalIntegerBetweenValues
 * @export
 * @summary returns a typedef for an optional field for an integer between two values
 * @param min {number} the minimum permitted value
 * @param max {number} the maximum permitted value
 */
function optionalIntegerBetweenValues(min, max) {
    return Object.assign(integerBetweenValues(min, max), { optional: true });
}
exports.optionalIntegerBetweenValues = optionalIntegerBetweenValues;
/**
 * @function idParams
 * @export
 * @summary returns an array with a single object in which defines an _id path param
 * @param {string} name the name of the field
 * @returns {any} the params array
 */
function idParams(name) {
    return [{
            "in": 'path',
            name: name,
            description: 'The mongo id of the document to update',
            type: 'string',
            required: true
        }];
}
exports.idParams = idParams;
/**
 * @function checkParameters
 * @export
 * @summary Check incoming parameters against a schema
 * @param {any} context The `this` context
 * @param {any} params The incoming parameters
 * @param {any} schema A SimpleSchema schema
 * @throws {400} on validation error
 * @returns {boolean} true
 */
function checkParameters(context, params, schema) {
    var validator = schema.newContext();
    validator.validate(params);
    meteor_1.assert.call(context, validator.isValid(), 400, validator.validationErrors());
    return true;
}
exports.checkParameters = checkParameters;
/**
 * @function positiveNumber
 * @export
 * @summary returns a typedef for a field for a number with a minimum
 * permitted value greater than zero
 * @returns {Object} typedef for number field with positive min value (> 0)
 */
function positiveNumber() {
    return {
        type: Number,
        min: 0,
        exclusiveMin: true
    };
}
exports.positiveNumber = positiveNumber;
/**
 * @function optionalPositiveNumber
 * @export
 * @summary returns a typedef for an optional field for a number with a minimum
 * permitted value of zero
 * @returns {Object} typedef for optional number field with positive min value (> 0)
 */
function optionalPositiveNumber() {
    return {
        type: Number,
        min: 0,
        exclusiveMin: true,
        optional: true
    };
}
exports.optionalPositiveNumber = optionalPositiveNumber;
/**
 * @function positiveInteger
 * @export
 * @summary returns a typedef for a field for an integer with a minimum
 * permitted value of zero
 * @returns {Object} typedef for integer field with positive min value (> 0)
 */
function positiveInteger() {
    return {
        type: 'SimpleSchema.Integer',
        min: 0,
        exclusiveMin: true
    };
}
exports.positiveInteger = positiveInteger;
/**
 * @function optionalPositiveInteger
 * @export
 * @summary returns a typedef for an optional field for an integer with a minimum
 * permitted value of zero
 * @returns {Object} typedef for optional integer field with positive min value (> 0)
 */
function optionalPositiveInteger() {
    return {
        type: 'SimpleSchema.Integer',
        min: 0,
        exclusiveMin: true,
        optional: true
    };
}
exports.optionalPositiveInteger = optionalPositiveInteger;
/**
 * @function immutable
 * @export
 * @summary returns a typedef for a field that should not be updated once set
 * @returns {Object} typedef for field with immutable value
 */
function immutable(type) {
    return {
        denyUpdate: true,
        type: type
    };
}
/**
 * @function optionalImmutable
 * @export
 * @summary returns a typedef for an optional field that should not be updated once set
 * @returns {Object} typedef for optional field with immutable value
 */
function optionalImmutable(type) {
    return {
        denyUpdate: true,
        type: type,
        optional: true
    };
}
//# sourceMappingURL=schema.js.map