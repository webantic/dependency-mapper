export { insert, update, remove, caseInsensitiveSelector, selectorFromParams, getObserverHandlers };
export interface IFailedOps {
    code: number;
    message: string;
    meta: any;
}
export interface ICollectionReturn {
    succeeded: any[];
    failed: IFailedOps[];
    success: boolean;
}
/**
 * @function insert
 * @export
 * @summary Inserts a number of `items` into the given `collection`
 * @param {Mongo.Collection} collection A Mongo.Collection
 * @param {Array<object>} items the items to insert.
 * @returns {Object} An object with the following keys:
 * - success {boolean} whether no inserts failed
 * - succeeded:  {Array<object|number>} The new document or
 *   the result of the insert operation
 * - failed {Array<object>} An array of failed insert results
 *   with the following keys:
 *   - code {number} the error code
 *   - message {string} the error message
 *   - meta {any} any additional, contextual data about the error
 */
declare function insert(collection: any, items: Array<any>): ICollectionReturn;
/**
 * @function update
 * @export
 * @summary Updates a number of `items` into the given `collection`
 * @param {Mongo.Collection} collection A Mongo.Collection
 * @param {Array<object>} items the items to update. The _id field
 * is used as a selector, the rest of the object as the modifier
 * @returns {Object} An object with the following keys:
 * - success {boolean} whether no updates failed
 * - succeeded {Array<object|number>} The new document or
 *   the result of the update operation
 * - failed {Array<object>} An array of failed update results
 *   with the following keys:
 *   - code {number} the error code
 *   - message {string} the error message
 *   - meta {any} any additional, contextual data about the error
 */
declare function update(collection: any, items: Array<any>): ICollectionReturn;
/**
 * @function remove
 * @export
 * @summary Remvoves a number of items by their _id from the
 * given `collection`
 * @param {Mongo.Collection} collection A Mongo.Collection
 * @param {Array<string>} _ids the _ids of the items to remove.
 * @returns {Object} An object with the following keys:
 * - success {boolean} whether no inserts failed
 * - succeeded {Array<object|number>} The result of the
 *   remove operation
 * - failed {Array<object>} An array of failed removal results
 *   with the following keys:
 *   - code {number} the error code
 *   - message {string} the error message
 *   - meta {any} any additional, contextual data about the error
 */
declare function remove(collection: any, _ids: Array<string>): ICollectionReturn;
/**
 * @function caseInsensitiveSelector
 * @export
 * @summary Generates a selector for a field which will perform a case-insensitive
 * lookup for the given value
 * @param fieldName {string} the name of the field to query
 * @param str {string} the value to query
 * @returns {object} the Mongo selector object
 */
declare function caseInsensitiveSelector(fieldName: string, str: string): object;
/**
 * @function selectorFromParams
 * @export
 * @summary Parses "skip", "limit", "sort", "before" and "since" into a selector and options object
 * @param {Object} { skip, limit, sort, before, since, createdOrUpdated, fields } An object containing any/all of the defined
 * keys. "createdOrUpdated" can be either "createdAt" (default) or "updatedAt". It determines what "before" and "since"
 * act upon
 * @returns {Object} { selector, options } The constructed selector & options objects
 */
declare function selectorFromParams({skip, limit, sort, before, since, createdOrUpdated, fields}?: any): {
    selector: {
        [k: string]: any;
    };
    options: {
        [k: string]: any;
    };
};
export interface observeHandler {
    added(id: string, fields: any): void;
    changed(id: string, fields: any): void;
    removed(id: string): void;
}
/**
 * @function getObserverHandlers
 * @export
 * @summary Returns a map of default observe callback handlers
 * @param {any} context The `this` context. It should contain `added`, `changed` and `removed` methods
 * @param {string} collection The name of the collection to add/change/remove documents to/from
 * @returns {Object} { added, changed, removed } The map of callback handlers
 */
declare function getObserverHandlers(context: any, collection: string): observeHandler;
