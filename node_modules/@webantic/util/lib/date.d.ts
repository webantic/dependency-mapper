export { randomBetween, getDate, yesterday, tomorrow, lastWeek, nextWeek, lastMonth, nextMonth, getPreviousDay, getNextDay };
/**
 * @function randomBetween
 * @export
 * @summary gets a random date between two others
 * @param {Date} from random date must be greater
 * than this
 * @param {Date} to random date must be less than
 * this
 * @returns {Date} the random date
 */
declare function randomBetween(from: Date, to: Date): Date;
/**
 * Gets a Date object of a given offset from now
 *
 * @param {string} [startEnd] Either 'start' or 'end' to round the date to the
 * start or end of the day
 * @param {string} [prevNext='prev']
 * @param {string} [interval='day']
 * @returns {Date} the date object
 */
declare function getDate(startEnd?: 'start' | 'end', prevNext?: string, interval?: string): Date;
/**
 * Return a Date object from 24 hours ago
 *
 * @param {string} [startEnd] either 'start' or 'end' - determines whether to round
 * the date to the start or end of the day
 */
declare function yesterday(startEnd?: 'start' | 'end'): Date;
/**
 * Return a Date object for 24 hours in the future
 *
 * @param {string} [startEnd] either 'start' or 'end' - determines whether to round
 * the date to the start or end of the day
 */
declare function tomorrow(startEnd?: 'start' | 'end'): Date;
/**
 * Return a Date object from 7 days ago
 *
 * @param {string} [startEnd] either 'start' or 'end' - determines whether to round
 * the date to the start or end of the day
 */
declare function lastWeek(startEnd?: 'start' | 'end'): Date;
/**
 * Return a Date object for 7 days in the future
 *
 * @param {string} [startEnd] either 'start' or 'end' - determines whether to round
 * the date to the start or end of the day
 */
declare function nextWeek(startEnd?: 'start' | 'end'): Date;
/**
 * Return a Date object from 30 days ago
 *
 * @param {string} [startEnd] either 'start' or 'end' - determines whether to round
 * the date to the start or end of the day
 */
declare function lastMonth(startEnd?: 'start' | 'end'): Date;
/**
 * Return a Date object for 30 days in the future
 *
 * @param {string} [startEnd] either 'start' or 'end' - determines whether to round
 * the date to the start or end of the day
 */
declare function nextMonth(startEnd?: 'start' | 'end'): Date;
/**
 * Can be passed either a full or three-letter day name and will return the previous day's name
 *
 * @param {string} day a full or three-letter day name
 * @returns {string} the name of the previous day
 */
declare function getPreviousDay(day: string): string;
/**
 * Can be passed either a full or three-letter day name and will return the next day's name
 *
 * @param {string} day a full or three-letter day name
 * @returns {string} the name of the next day
 */
declare function getNextDay(day: string): string;
