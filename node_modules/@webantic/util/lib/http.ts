/** @module util/http */

export {
  requiredBodyString,
  requiredBodyNumber,
  requiredBodyDate,
  requiredBodyBoolean,
  requiredBodyObject,
  optionalBodyString,
  optionalBodyNumber,
  optionalBodyDate,
  optionalBodyBoolean,
  optionalBodyObject
}

/**
 * @function getBaseParameter
 * @export
 * @summary returns a basic Swagger parameter field
 * @param {*} [{ location, type, required }={}]
 * @returns {Object}
 */
function getBaseParameter({ location, type, required }: any = {}) {
  return {
    in: location,
    type,
    required,
    name: '',
    description: ''
  }
}

/*
  partially applied body param functions
*/
const getBodyParameter = ({ type, required }: any = {}) => getBaseParameter({ location: 'body', type, required })
const getRequiredBodyParameter = ({ type }: any = {}) => getBodyParameter({ required: true, type })
const getOptionalBodyParameter = ({ type }: any = {}) => getBodyParameter({ required: false, type })

/**
 * @function requiredBodyString
 * @export
 * @summary scaffolds a required body string parameter
 * @param {Object} extendedDef the rest of the definition
 * @returns {Object}
 */
function requiredBodyString(extendedDef: Object): Object {
  return (Object as any).assign(
    getRequiredBodyParameter({ type: 'string' }),
    extendedDef
  )
}

/**
 * @function requiredBodyNumber
 * @export
 * @summary scaffolds a required body number parameter
 * @param {Object} extendedDef the rest of the definition
 * @returns {Object}
 */
function requiredBodyNumber(extendedDef: Object): Object {
  return (Object as any).assign(
    getRequiredBodyParameter({ type: 'number' }),
    extendedDef
  )
}

/**
 * @function requiredBodyDate
 * @export
 * @summary scaffolds a required body string parameter
 * @param {Object} extendedDef the rest of the definition
 * @returns {Object}
 */
function requiredBodyDate(extendedDef: Object): Object {
  return (Object as any).assign(
    getRequiredBodyParameter({ type: 'string' }),
    { format: 'date-time' },
    extendedDef
  )
}

/**
 * @function requiredBodyBoolean
 * @export
 * @summary scaffolds a required body boolean parameter
 * @param {Object} extendedDef the rest of the definition
 * @returns {Object}
 */
function requiredBodyBoolean(extendedDef: Object): Object {
  return (Object as any).assign(
    getRequiredBodyParameter({ type: 'boolean' }),
    extendedDef
  )
}

/**
 * @function requiredBodyObject
 * @export
 * @summary scaffolds a required body object parameter
 * @param {Object} extendedDef the rest of the definition
 * @returns {Object}
 */
function requiredBodyObject(extendedDef: Object): Object {
  return (Object as any).assign(
    getRequiredBodyParameter({ type: 'object' }),
    extendedDef
  )
}

/**
 * @function optionalBodyString
 * @export
 * @summary scaffolds a optional body string parameter
 * @param {Object} extendedDef the rest of the definition
 * @returns {Object}
 */
function optionalBodyString(extendedDef: Object): Object {
  return (Object as any).assign(
    getOptionalBodyParameter({ type: 'string' }),
    extendedDef
  )
}

/**
 * @function optionalBodyNumber
 * @export
 * @summary scaffolds a optional body number parameter
 * @param {Object} extendedDef the rest of the definition
 * @returns {Object}
 */
function optionalBodyNumber(extendedDef: Object): Object {
  return (Object as any).assign(
    getOptionalBodyParameter({ type: 'number' }),
    extendedDef
  )
}

/**
 * @function optionalBodyDate
 * @export
 * @summary scaffolds a optional body string parameter
 * @param {Object} extendedDef the rest of the definition
 * @returns {Object}
 */
function optionalBodyDate(extendedDef: Object): Object {
  return (Object as any).assign(
    getOptionalBodyParameter({ type: 'string' }),
    { format: 'date-time' },
    extendedDef
  )
}

/**
 * @function optionalBodyBoolean
 * @export
 * @summary scaffolds a optional body boolean parameter
 * @param {Object} extendedDef the rest of the definition
 * @returns {Object}
 */
function optionalBodyBoolean(extendedDef: Object): Object {
  return (Object as any).assign(
    getOptionalBodyParameter({ type: 'boolean' }),
    extendedDef
  )
}

/**
 * @function optionalBodyObject
 * @export
 * @summary scaffolds a optional body object parameter
 * @param {Object} extendedDef the rest of the definition
 * @returns {Object}
 */
function optionalBodyObject(extendedDef: Object): Object {
  return (Object as any).assign(
    getOptionalBodyParameter({ type: 'object' }),
    extendedDef
  )
}
