/// <reference path="../typings/globals/underscore/index.d.ts" />
declare const is: {
    email: (str: string) => boolean;
    URL: (str: string) => boolean;
    IP: (str: string) => boolean;
    IPv4: (str: string) => boolean;
    IPv6: (str: string) => boolean;
    nonEmpty: (str?: string) => boolean;
    empty: () => boolean;
};
export { capitalize, humanize, titleize, camelize, hyphenate, truncate, addThousandsSeparators, extname, underscore, keyify, getDomain, startsWith, endsWith, escapeRegExp, caseInsensitivePermutations, is };
/**
 * @function capitalize
 * @export
 * @summary makes the first letter of a string
 * uppercase and the rest lowercase
 * @param {string} str the string to capitalise
 * @returns {string} the capitalised string
 */
declare function capitalize(str: string): string;
/**
 * @function humanize
 * @export
 * @summary Converts identifiers to more human-friendly
 * versions. e.g. helloWorld -> Hello world
 * @param {string} str the string to humanise
 * @returns {string} the human-friendly version of the
 * string
 */
declare function humanize(str: string): string;
/**
 * @function titleize
 * @export
 * @summary converts each words' first letter
 * to uppercase.
 * @param {string} str the string to titleize
 * @returns {string} the titleized string
 */
declare function titleize(str: string): string;
/**
 * @function camelize
 * @export
 * @summary converts a string of words to a lowerCamelCase word
 * @param {string} str the string to camelize
 * @returns {string} the camelized string
 */
declare function camelize(str: string): string;
/**
 * @function hyphenate
 * @export
 * @summary converts spaces to hyphens
 * @param {string} str the string to perform the
 * replacements on
 * @returns {string} the processed string
 */
declare function hyphenate(str: string): string;
/**
 * @function truncate
 * @export
 * @summary limits the length of a string to `count` (plus
 * three for dots)
 * @param {string} str the string to truncate
 * @param {number} [count] the maximum length of the string
 * @returns {string} the possibly truncated string
 */
declare function truncate(str: string, count?: number): string;
/**
 * @function addThousandsSeparators
 * @export
 * @summary Inserts a comma every three digits
 * @param {string|number} str a number, represented
 * as a string
 * @returns {string} the formatted number
 */
declare function addThousandsSeparators(str: string): string;
/**
 * @function extname
 * @export
 * @summary gets the file extension from a file name
 * @param {string} filename the full filename. e.g. "movie.avi"
 * @returns {string} the file extension
 */
declare function extname(filename: string): string;
/**
 * @function underscore
 * @export
 * @summary converts spaces to underscores in a string
 * @param {string} str the string to process
 * @returns {string} the processed string
 */
declare function underscore(str: string): string;
/**
 * @function keyify
 * @export
 * @summary converts spaces to dashes/underscores &
 * lowercases the string for db values and filenames etc..
 * @param {string} str the string to keyify
 * @param {string} [replacer] the character to use in
 * place of spaces. Can be '-' or '_'
 * @returns {string} the keyified string
 */
declare function keyify(str: string, replacer: string): string;
/**
 * @function getDomain
 * @export
 * @summary gets the domain from an email address
 * @param {string} str the email address to test
 * @returns {string|null} the domain, or null
 */
declare function getDomain(str: string): string;
/**
 * @function startsWith
 * @export
 * @summary Reports whether `haystack` starts with `needle`
 * @param {string} haystack the string to search
 * @param {string} needle the substring to search for
 * @returns {boolean} whether haystack starts with needle
 */
declare function startsWith(haystack: string, needle: string): boolean;
/**
 * @function endsWith
 * @export
 * @summary Reports whether `haystack` ends with `needle`
 * @param {string} haystack the string to search
 * @param {string} needle the substring to search for
 * @returns {boolean} whether haystack ends with needle
 */
declare function endsWith(haystack: string, needle: string): boolean;
/**
 * @function escapeRegExp
 * @export
 * @summary Escapes special characters in a string, enabling
 * the string's use as a regex
 * @param {string} str the string to escape
 * @returns {string} the escaped string
 */
declare function escapeRegExp(str: string): string;
/**
 * @function caseInsensitivePermutations
 * @export
 * @summary generates permutations of all case variations of a given string.
 * @param str {string} The string to get permutations of
 * @returns {string[]} an array of permutations
 */
declare function caseInsensitivePermutations(str: string): string[];
