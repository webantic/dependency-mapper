"use strict";
/// <reference path="../typings/globals/underscore/index.d.ts" />
/** @module util/data */
exports.__esModule = true;
var string_1 = require("./string");
/**
 * @function titles
 * @export
 * @summary provides a list of name titles
 * @param {boolean} [flatten=false] whether to return an array of plain text values
 * @returns {object[]|string[]} If flatten is true, an array of string values otherwise an array of objects with name and camelized value
 */
function titles(flatten) {
    if (flatten === void 0) { flatten = false; }
    var titles = ['Miss', 'Mr', 'Mrs', 'Ms', 'Mx', 'Dr', 'Master', 'Sir', 'Prof'];
    if (flatten) {
        return titles.map(function (title) { return string_1.camelize(title); });
    }
    return titles.map(function appendValue(name) {
        return {
            name: name,
            value: string_1.camelize(name)
        };
    });
}
exports.titles = titles;
/**
 * @function genders
 * @export
 * @summary provides a list of genders
 * @param {boolean} [flatten=false] whether to return an array of plain text values
 * @returns {object[]|string[]} If flatten is true, an array of string values otherwise an array of objects with name and camelized value
 */
function genders(flatten) {
    if (flatten === void 0) { flatten = false; }
    var genders = ['Female', 'Male', 'Unspecified'];
    if (flatten) {
        return genders.map(function (gender) { return string_1.camelize(gender); });
    }
    return genders.map(function appendValue(name) {
        return {
            name: name,
            value: string_1.camelize(name)
        };
    });
}
exports.genders = genders;
/**
 * @function maritalStatuses
 * @export
 * @summary provides a list of maritalStatuses
 * @param {boolean} [flatten=false] whether to return an array of plain text values
 * @returns {object[]|string[]} If flatten is true, an array of string values otherwise an array of objects with name and camelized value
 */
function maritalStatuses(flatten) {
    if (flatten === void 0) { flatten = false; }
    if (flatten) {
        return ['single', 'married', 'widowed', 'divorced'];
    }
    return [
        { name: 'Single', value: 'single' },
        { name: 'Married/Civil Partnership', value: 'married' },
        { name: 'Widowed', value: 'widowed' },
        { name: 'Divorced', value: 'divorced' }
    ];
}
exports.maritalStatuses = maritalStatuses;
/**
 * @function nationalities
 * @export
 * @summary provides a list of nationalities
 * @param {boolean} [flatten=false] whether to return an array of plain text values
 * @returns {object[]|string[]} If flatten is true, an array of string values otherwise an array of objects with name and camelized value
 */
function nationalities(flatten) {
    if (flatten === void 0) { flatten = false; }
    var nationalities = [
        'Afghan',
        'Albanian',
        'Algerian',
        'American',
        'Andorran',
        'Angolan',
        'Anguillian',
        'Antiguans',
        'Argentinean',
        'Armenian',
        'Australian',
        'Austrian',
        'Azerbaijani',
        'Bahamian',
        'Bahraini',
        'Bangladeshi',
        'Barbadian',
        'Barbudans',
        'Batswana',
        'Belarusian',
        'Belgian',
        'Belizean',
        'Beninese',
        'Bermudian',
        'Bhutanese',
        'Bolivian',
        'Bosnian',
        'Brazilian',
        'British',
        'Bruneian',
        'Bulgarian',
        'Burkinabe',
        'Burmese',
        'Burundian',
        'Cambodian',
        'Cameroonian',
        'Canadian',
        'Cape Verdean',
        'Central African',
        'Chadian',
        'Chilean',
        'Chinese',
        'Colombian',
        'Comoran',
        'Congolese',
        'Costa Rican',
        'Croatian',
        'Cuban',
        'Cypriot',
        'Czech',
        'Danish',
        'Djibouti',
        'Dominican',
        'Dutch',
        'East Timorese',
        'Ecuadorean',
        'Egyptian',
        'Emirian',
        'Equatorial Guinean',
        'Eritrean',
        'Estonian',
        'Ethiopian',
        'Fijian',
        'Filipino',
        'Finnish',
        'French',
        'Gabonese',
        'Gambian',
        'Georgian',
        'German',
        'Ghanaian',
        'Greek',
        'Grenadian',
        'Guatemalan',
        'Guinea-Bissauan',
        'Guinean',
        'Guyanese',
        'Haitian',
        'Herzegovinian',
        'Honduran',
        'Hungarian',
        'Icelander',
        'Indian',
        'Indonesian',
        'Iranian',
        'Iraqi',
        'Irish',
        'Israeli',
        'Italian',
        'Ivorian',
        'Jamaican',
        'Japanese',
        'Jordanian',
        'Kazakhstani',
        'Kenyan',
        'Kittian and Nevisian',
        'Kuwaiti',
        'Kyrgyz',
        'Laotian',
        'Latvian',
        'Lebanese',
        'Liberian',
        'Libyan',
        'Liechtensteiner',
        'Lithuanian',
        'Luxembourger',
        'Macedonian',
        'Malagasy',
        'Malawian',
        'Malaysian',
        'Maldivan',
        'Malian',
        'Maltese',
        'Marshallese',
        'Mauritanian',
        'Mauritian',
        'Mexican',
        'Micronesian',
        'Moldovan',
        'Monacan',
        'Mongolian',
        'Moroccan',
        'Mosotho',
        'Motswana',
        'Mozambican',
        'Namibian',
        'Nauruan',
        'Nepalese',
        'New Zealander',
        'Ni-Vanuatu',
        'Nicaraguan',
        'Nigerien',
        'North Korean',
        'Northern Irish',
        'Norwegian',
        'Omani',
        'Pakistani',
        'Palauan',
        'Panamanian',
        'Papua New Guinean',
        'Paraguayan',
        'Peruvian',
        'Polish',
        'Portuguese',
        'Qatari',
        'Romanian',
        'Russian',
        'Rwandan',
        'Saint Lucian',
        'Salvadoran',
        'Samoan',
        'San Marinese',
        'Sao Tomean',
        'Saudi',
        'Scottish',
        'Senegalese',
        'Serbian',
        'Seychellois',
        'Sierra Leonean',
        'Singaporean',
        'Slovakian',
        'Slovenian',
        'Solomon Islander',
        'Somali',
        'South African',
        'South Korean',
        'Spanish',
        'Sri Lankan',
        'Sudanese',
        'Surinamer',
        'Swazi',
        'Swedish',
        'Swiss',
        'Syrian',
        'Taiwanese',
        'Tajik',
        'Tanzanian',
        'Thai',
        'Togolese',
        'Tongan',
        'Trinidadian or Tobagonian',
        'Tunisian',
        'Turkish',
        'Tuvaluan',
        'Ugandan',
        'Ukrainian',
        'Uruguayan',
        'Uzbekistani',
        'Venezuelan',
        'Vietnamese',
        'Welsh',
        'Yemenite',
        'Zambian',
        'Zimbabwean'
    ];
    if (flatten) {
        return nationalities.map(function (nationality) { return string_1.camelize(nationality); });
    }
    return nationalities.map(function appendValue(name) {
        return {
            name: name,
            value: string_1.camelize(name)
        };
    });
}
exports.nationalities = nationalities;
//# sourceMappingURL=data.js.map