/// <reference path="../typings/globals/meteor/index.d.ts" />
/** @module util/reactivity */

export {
  reactivelyStore
}

/**
 * Store some data that depends on reactive data sources in a reactive var so as
 * not to recalculate it every time
 * @param getter callback to get the value
 * @param autorunnerOrTemplate
 * @returns {Function} a function that when called returns the latest value of the data
 */
function reactivelyStore<T>(getter: () => T, autorunnerOrTemplate: Blaze.TemplateInstance | Function): () => T {

  if (!getter) {
    console.error(`You must provide a function to retrieve the data`)
  }
  if (!autorunnerOrTemplate) {
    console.error('You must provide either an autorun function or a template instance as the second argument to reactivelyStore')
  }

  let autorunner: Function
  if (typeof autorunnerOrTemplate === 'function') {
    autorunner = autorunnerOrTemplate as Function
  }
  else {
    autorunner = autorunnerOrTemplate.autorun.bind(autorunnerOrTemplate)
  }

  const reactiveVar = new ReactiveVar(getter());
  autorunner(() => {
    reactiveVar.set(getter());
  })
  return () => reactiveVar.get()
}
