/** @module util/emitter */
export { MultiEmitter, Emitter };
/**
 * Basic class that represents an event that can be listened to and broadcasted
 */
declare class Emitter<T> {
    nextId: number;
    listeners: {
        [key: string]: (value: T) => void;
    };
    /**
     * Add a callback to be ran whenver this event is broadcasted
     */
    listen(callback: (value: T) => void): void;
    /**
     * Calls all callbacks that have been registered with the given value
     * @param value value to broadcast, if any
     */
    broadcast(value: T): void;
    /**
     * Remove all attached listeners
     */
    removeListeners(): void;
}
/**
 * Slightly more advanced event emitter style class that allows listening to different events via string arguments
 */
declare class MultiEmitter {
    nextId: number;
    listenersByEvent: {
        [event: string]: ListenerSet<any>;
    };
    /**
     * Add a callback to be ran whenver this event is broadcasted
     * @param event the event as a string to be listened to
     * @param callback the callback to run whenever said event is triggered
     */
    listen(event: string, callback: (value: any) => void): void;
    /**
     * Broadcast an event of the given type
     * @param event even type to broadcast
     * @param value value to be passed to each callback
     */
    broadcast(event: string, value?: any): void;
    /**
     * Remove all attached listeners for a specific event type
     * @param event
     */
    removeListeners(event: string): void;
}
export declare type ListenerSet<T> = {
    [key: string]: (value: T) => void;
};
