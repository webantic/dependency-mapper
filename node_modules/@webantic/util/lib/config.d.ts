/// <reference path="../typings/index.d.ts" />
export { Configuration };
/**
 * A configuration class - provides a DB-backed, environment variable / meteor.settings populated set of config values
 *
 * @param {Mongo.Collection} collection the config collection
 * @param {Object} Meteor a reference to the Meteor object
 * @param {Object} [Tracker] an optional reference to Tracker - will be mocked in a non-reactive way if not supplied
 * @param {Object} [connection] an optional override for the DDP connection to use to subscribe to the config pub
 * @class Configuration
 */
declare class Configuration {
    items: {
        [key: string]: any;
    };
    dependency: Tracker.Dependency;
    Meteor: any;
    connection: DDP.DDPStatic;
    _collection: Mongo.Collection<any>;
    _cursor: Mongo.Cursor<any>;
    _observer: Meteor.LiveQueryHandle;
    constructor({collection, Meteor, Tracker, connection}: config.ICtorParams);
    /**
     * An internal function to provide a default Tracker object (which does NOT support reactivity)
     *
     * @returns {Object} a mocked Tracker object
     * @memberof Configuration
     */
    _trackerMock(): Tracker.Dependency;
    /**
     * An internal method to provide public configuration values to clients
     *
     * @param {any} cb A callback to be called when the subscription is ready
     *
     * @memberof Configuration
     */
    _handlePubSub(connection?: DDP.DDPStatic): void;
    /**
     * A method to get a handle to an observer from a cursor
     *
     * @param {Mongo.Cursor} cursor
     * @returns handle to a observer
     *
     * @memberof Configuration
     */
    _getObserver(cursor: Mongo.Cursor<any>): Meteor.LiveQueryHandle;
    /**
     * Check whether the type of something matches what is expected
     *
     * @param {any} type Either a constructor, or a string. To be checked against the result of `typeof`
     * @param {any} value The value to check
     * @returns {Boolean} whether the type matches
     *
     * @memberof Configuration
     */
    _checkType(type: Function | string, value: any): boolean;
    /**
     * Gets a value from process.env / meteor.settings or falls back to the one provided
     *
     * @param {any} key The key for the value
     * @param {any} value The default value
     * @returns {any}
     *
     * @memberof Configuration
     */
    _getValue(key: string, value?: any): any;
    /**
     * Adds a value to the in-memory store & upserts it to the db (unless overwrite is present and `false`)
     *
     * @param {any} { key, value, type, isPublic, overwrite, added }
     *
     * @memberof Configuration
     */
    addItem({key, value, type, isPublic, isPrivileged, overwrite, added}: config.IAddItemParams): void;
    /**
     * Gets the in-memory value for a given key
     *
     * @param {any} key
     * @returns {any} the value
     *
     * @memberof Configuration
     */
    get(key: string): any;
    /**
     * Update the in-memory value and stored value in the db
     *
     * @param {any} key
     * @param {any} { value, type, options }
     *
     * @memberof Configuration
     */
    set(key: string, {value, type, options}: config.ISetItemParams): void;
}
