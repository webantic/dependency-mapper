"use strict";
/** @module util/meteor */
exports.__esModule = true;
var statusMap = require('./httpStatusCodes.json');
/**
 * @function assert
 * @export
 * @summary if the assertion is falsey, throws
 * an error
 * @param {any} assertion anything that should be truthy to
 * not throw an error
 * @param {number} errorCode the error code
 * @param {any} [meta] additional info to include with the error
 */
var assert = function assert(assertion, errorCode, meta) {
    if (typeof errorCode !== 'number') {
        if (meta === undefined) {
            meta = errorCode;
        }
        errorCode = 500;
    }
    if (!assertion) {
        if (typeof meta === 'object') {
            try {
                meta = JSON.stringify(meta);
            }
            catch (ex) { }
        }
        var error = void 0;
        if (typeof Meteor !== 'undefined') {
            meta = meta ? ': ' + meta : '';
            error = new Meteor.Error(errorCode, statusMap[String(errorCode)] + meta);
        }
        else {
            meta = meta ? '. ' + meta : '';
            error = new Error(errorCode + ': ' + statusMap[String(errorCode)] + meta);
        }
        if ('setHttpStatusCode' in this) {
            this.setHttpStatusCode(errorCode);
        }
        // no stack traces from production errors
        if (process.env.NODE_ENV === 'production') {
            // debug(error, meta)
            error.stack = null;
        }
        error.statusCode = errorCode;
        throw error;
    }
};
exports.assert = assert;
assert.statusMap = statusMap; // for reference
/**
 * Assert that the typeof ${value} is 'string'
 *
 * @param value any value to check the type of
 * @param name the name of the value being checked
 */
var assertString = function (value, name) {
    return assert.call(this, typeof value === 'string', 400, "Expected typeof " + name + " to be 'string' but got '" + typeof value + "'");
};
exports.assertString = assertString;
/**
 * Assert that the typeof ${value} is 'boolean'
 *
 * @param value any value to check the type of
 * @param name the name of the value being checked
 */
var assertBoolean = function (value, name) {
    return assert.call(this, typeof value === 'boolean', 400, "Expected typeof " + name + " to be 'boolean' but got '" + typeof value + "'");
};
exports.assertBoolean = assertBoolean;
/**
 * Assert that the typeof ${value} is 'number'
 *
 * @param value any value to check the type of
 * @param name the name of the value being checked
 */
var assertNumber = function (value, name) {
    return assert.call(this, typeof value === 'number', 400, "Expected typeof " + name + " to be 'number' but got '" + typeof value + "'");
};
exports.assertNumber = assertNumber;
/**
 * Assert that the ${value} is an integer
 *
 * @param value any value to check the type of
 * @param name the name of the value being checked
 */
var assertInt = function (value, name) {
    assertNumber.call(this, value, name);
    return assert.call(this, value % 1 === 0, 400, "Expected " + name + " to be an integer but got a float");
};
exports.assertInt = assertInt;
/**
 * Assert that the typeof ${value} is 'object'
 *
 * @param value any value to check the type of
 * @param name the name of the value being checked
 */
var assertObject = function (value, name) {
    return assert.call(this, typeof value === 'object' && value !== null, 400, "Expected typeof " + name + " to be 'object' but got '" + typeof value + "'");
};
exports.assertObject = assertObject;
//# sourceMappingURL=meteor.js.map