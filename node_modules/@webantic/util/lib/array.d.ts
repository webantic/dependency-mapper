/** @module util/array */
export { move, addToSet, addToSetInPlace, first, last, eachUntil, remove, removeAll, forceArray };
/**
 * @function move
 * @export
 * @summary moves an element at a given index to
 * another index
 * @param {Array<any>} array an array containing the
 * element to move
 * @param {number} fromIndex the location of the element
 * to move
 * @param {number} toIndex the destination index
 * @returns {Array<any>}
 */
declare function move(array: Array<any>, fromIndex: number, toIndex: number): Array<any>;
/**
 * @function addToSet
 * @export
 * @summary Returns an array containing `item`, adding
 * it if it is missing.
 * Note: this only uses indexOf for comparison, so it
 * will not work for objects
 * @param {Array<any>} array an array to potentially add
 * `item` to
 * @param {any} item an item to ensure is within `array`
 * @returns {Array<any>} the new array
 */
declare function addToSet(array: Array<any>, item: any): Array<any>;
/**
 * @function addToSetInPlace
 * @export
 * @summary Adds `item` to `set` if it is
 * missing, returns true if `set` was modified
 * @param {Array<any>} set a set to potentially add
 * `item` to
 * @param {any} item an item to ensure is within `set`
 * @returns {boolean} true if `set` was modified
 */
declare function addToSetInPlace(set: Array<any>, item: any): boolean;
/**
 * @function first
 * @export
 * @summary returns the first element in an array
 * @param {any[]} array the array to search in
 * @returns {any} the first element of the array
 */
declare function first(array: any[]): any;
/**
 * @function last
 * @export
 * @summary returns the last element in an array
 * @param {any[]} array the array to search in
 * @returns {any} the last element of the array
 */
declare function last(array: any[]): any;
/**
 * @function eachUntil
 * @export
 * @summary calls `callback` for each item in an array,
 * provided that the previous iteration didn't return `false`
 * @param {any[]} array of items to iterate
 * @param {ForEachCallback} callback the function to invoke
 * for each element in the supplied array
 */
declare function eachUntil(array: any[], callback: (element: any, index: number, array: any[]) => any): void;
/**
 * @function remove
 * @export
 * @summary Remove an item from an array
 * @param array {any[]} The array to remove `item` from
 * @param item {any} The item to remove. Cannot be an object
 * @returns {any[]} The new array
 * @example
 * var array = ['a', 'b', 'c']
 * remove(array, 'b') // returns ['a', 'c']
 */
declare function remove(array: any[], item: any): any[];
/**
 * @function removeAll
 * @export
 * @summary Removes all occurrences of `item` from `array`
 * @param {any[]} array The array to remove all occurrences of `item` from
 * @param {any} item The item to remove
 * @returns {any[]} The new array
 * @example
 * var array = ['a', 'b', 'b', 'c']
 * removeAll(array, 'b') // returns ['a', 'c']
 */
declare function removeAll(array: any[], item: any): any[];
/**
 * @function forceArray
 * @summary wraps the input in an array if it isn't already one
 * @param {any} input
 * @returns {any[]} always an array
 */
declare function forceArray(input: any): any[];
