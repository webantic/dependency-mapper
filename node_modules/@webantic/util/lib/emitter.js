"use strict";
/** @module util/emitter */
exports.__esModule = true;
/**
 * Basic class that represents an event that can be listened to and broadcasted
 */
var Emitter = (function () {
    function Emitter() {
        this.nextId = 0;
        this.listeners = {};
    }
    /**
     * Add a callback to be ran whenver this event is broadcasted
     */
    Emitter.prototype.listen = function (callback) {
        this.listeners[++this.nextId] = callback;
    };
    /**
     * Calls all callbacks that have been registered with the given value
     * @param value value to broadcast, if any
     */
    Emitter.prototype.broadcast = function (value) {
        _.values(this.listeners).forEach(function (l) { return l(value); });
    };
    /**
     * Remove all attached listeners
     */
    Emitter.prototype.removeListeners = function () {
        this.listeners = {};
    };
    return Emitter;
}());
exports.Emitter = Emitter;
/**
 * Slightly more advanced event emitter style class that allows listening to different events via string arguments
 */
var MultiEmitter = (function () {
    function MultiEmitter() {
        this.nextId = 0;
        this.listenersByEvent = {};
    }
    /**
     * Add a callback to be ran whenver this event is broadcasted
     * @param event the event as a string to be listened to
     * @param callback the callback to run whenever said event is triggered
     */
    MultiEmitter.prototype.listen = function (event, callback) {
        if (!this.listenersByEvent[event]) {
            this.listenersByEvent[event] = {};
        }
        this.listenersByEvent[event][++this.nextId] = callback;
    };
    /**
     * Broadcast an event of the given type
     * @param event even type to broadcast
     * @param value value to be passed to each callback
     */
    MultiEmitter.prototype.broadcast = function (event, value) {
        if (!this.listenersByEvent[event]) {
            return;
        }
        _.values(this.listenersByEvent[event]).forEach(function (l) { return l(value); });
    };
    /**
     * Remove all attached listeners for a specific event type
     * @param event
     */
    MultiEmitter.prototype.removeListeners = function (event) {
        delete this.listenersByEvent[event];
    };
    return MultiEmitter;
}());
exports.MultiEmitter = MultiEmitter;
//# sourceMappingURL=emitter.js.map