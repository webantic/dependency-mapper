/// <reference path="../typings/general.d.ts" />
/** @module util/image */

export {
  dataURIToBlob,
  toDataURI
}

/**
 * @function dataURIToBlob
 * @export
 * @summary converts a data uri to a blob://
 * @param {string} dataURI the data uri to convert into a blob
 * @returns {blob} the uri as a blob
 */
function dataURIToBlob(dataURI: string): Blob {
  // Convert base64/URLEncoded data component
  // to raw binary data held in a string
  let byteString: string

  if (dataURI.split(',')[0].indexOf('base64') >= 0) {
    byteString = atob(dataURI.split(',')[1])
  } else {
    byteString = unescape(dataURI.split(',')[1])
  }

  // Separate out the mime component
  let mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0]

  // Write the bytes of the string to a typed array
  let ia = new Uint8Array(byteString.length)
  for (let i = 0; i < byteString.length; i++) {
    ia[i] = byteString.charCodeAt(i)
  }

  return new Blob([ia], {
    type: mimeString
  })
}

/**
 * @function toDataURI
 * @export
 * @summary converts an image file to a data uri
 * @param {File} file the image file to convert
 * @param {Function} callback a function
 * to receive the result of the conversion
 */
function toDataURI(file: File, callback: (str: string) => any) {
  let fileReader = new FileReader()

  fileReader.onload = function (e: any) {
    callback(e.target.result)
  }

  fileReader.readAsDataURL(file)
}
