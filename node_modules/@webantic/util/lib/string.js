"use strict";
/// <reference path="../typings/globals/underscore/index.d.ts" />
/** @module util/string */
exports.__esModule = true;
var _ = require("underscore");
var is = {
    email: isEmail,
    URL: isUrl,
    IP: isIP,
    IPv4: isIPv4,
    IPv6: isIPv6,
    nonEmpty: nonEmpty,
    empty: function () { return !nonEmpty(); }
};
exports.is = is;
/**
 * @function capitalize
 * @export
 * @summary makes the first letter of a string
 * uppercase and the rest lowercase
 * @param {string} str the string to capitalise
 * @returns {string} the capitalised string
 */
function capitalize(str) {
    str = str || '';
    str = str.trim();
    if (str[0]) {
        str = str[0].toUpperCase() + str.substr(1).toLowerCase();
    }
    return str;
}
exports.capitalize = capitalize;
/**
 * @function humanize
 * @export
 * @summary Converts identifiers to more human-friendly
 * versions. e.g. helloWorld -> Hello world
 * @param {string} str the string to humanise
 * @returns {string} the human-friendly version of the
 * string
 */
function humanize(str) {
    // Ensure we have a value
    str = str || '';
    // Ensure string
    str = str.toString(); // might be a number
    // Remove leading/trailing white-space
    str = str.trim();
    // Remove file extension
    str = str.replace(extname(str), '');
    // Standardise delimeters
    str = underscore(str).replace('-', '_');
    // Remove trailing underscores
    str = str.replace(/[\W_]+/g, ' ');
    // De-camelCase
    str = str.replace(/([a-z])([A-Z])/g, '$1 $2');
    return capitalize(str).trim();
}
exports.humanize = humanize;
/**
 * @function titleize
 * @export
 * @summary converts each words' first letter
 * to uppercase.
 * @param {string} str the string to titleize
 * @returns {string} the titleized string
 */
function titleize(str) {
    if (str.length === 0) {
        return '';
    }
    return str.split(' ').map(capitalize).join(' ');
}
exports.titleize = titleize;
/**
 * @function camelize
 * @export
 * @summary converts a string of words to a lowerCamelCase word
 * @param {string} str the string to camelize
 * @returns {string} the camelized string
 */
function camelize(str) {
    return str.replace(/(?:^\w|[A-Z]|\b\w|\s+)/g, function (match, index) {
        if (+match === 0)
            return ''; // or if (/\s+/.test(match)) for white spaces
        return index == 0 ? match.toLowerCase() : match.toUpperCase();
    });
}
exports.camelize = camelize;
/**
 * @function hyphenate
 * @export
 * @summary converts spaces to hyphens
 * @param {string} str the string to perform the
 * replacements on
 * @returns {string} the processed string
 */
function hyphenate(str) {
    return str.replace(/ /g, '-');
}
exports.hyphenate = hyphenate;
/**
 * @function truncate
 * @export
 * @summary limits the length of a string to `count` (plus
 * three for dots)
 * @param {string} str the string to truncate
 * @param {number} [count] the maximum length of the string
 * @returns {string} the possibly truncated string
 */
function truncate(str, count) {
    count = typeof count === 'number' ? count : 10;
    var words = str.split(' ');
    var output = '';
    function addWord(word) {
        if (!word) {
            return output;
        }
        if (output.length && count >= output.length + 1 + word.length) {
            output += ' ' + word;
            addWord(words.shift());
        }
        else if (!output.length && count >= output.length + word.length) {
            output += word;
            addWord(words.shift());
        }
        else {
            if (!output.length) {
                output += word[0];
            }
            output += '...';
        }
        return output;
    }
    return addWord(words.shift());
}
exports.truncate = truncate;
/**
 * @function addThousandsSeparators
 * @export
 * @summary Inserts a comma every three digits
 * @param {string|number} str a number, represented
 * as a string
 * @returns {string} the formatted number
 */
function addThousandsSeparators(str) {
    return str
        .toString()
        .replace(/\B(?=(\d{3})+(?!\d))/g, ',')
        .replace(',,', ',');
}
exports.addThousandsSeparators = addThousandsSeparators;
/**
 * @function extname
 * @export
 * @summary gets the file extension from a file name
 * @param {string} filename the full filename. e.g. "movie.avi"
 * @returns {string} the file extension
 */
function extname(filename) {
    var index = filename.lastIndexOf('.');
    var ext = filename.substring(index, filename.length);
    return (index === -1) ? '' : ext;
}
exports.extname = extname;
/**
 * @function underscore
 * @export
 * @summary converts spaces to underscores in a string
 * @param {string} str the string to process
 * @returns {string} the processed string
 */
function underscore(str) {
    return str.replace(/ /g, '_');
}
exports.underscore = underscore;
/**
 * @function keyify
 * @export
 * @summary converts spaces to dashes/underscores &
 * lowercases the string for db values and filenames etc..
 * @param {string} str the string to keyify
 * @param {string} [replacer] the character to use in
 * place of spaces. Can be '-' or '_'
 * @returns {string} the keyified string
 */
function keyify(str, replacer) {
    if (replacer === '_') {
        return underscore(str).toLowerCase();
    }
    else {
        return hyphenate(str).toLowerCase();
    }
}
exports.keyify = keyify;
/**
 * @function getDomain
 * @export
 * @summary gets the domain from an email address
 * @param {string} str the email address to test
 * @returns {string|null} the domain, or null
 */
function getDomain(str) {
    var parsedDomain = require('parse-domain')(str || '');
    var parts = [parsedDomain.domain, parsedDomain.tld];
    if (parsedDomain.subdomain) {
        parts.unshift(parsedDomain.subdomain);
    }
    return parts.join('.');
}
exports.getDomain = getDomain;
/**
 * @function startsWith
 * @export
 * @summary Reports whether `haystack` starts with `needle`
 * @param {string} haystack the string to search
 * @param {string} needle the substring to search for
 * @returns {boolean} whether haystack starts with needle
 */
function startsWith(haystack, needle) {
    return haystack && haystack.slice(0, needle.length) === needle;
}
exports.startsWith = startsWith;
/**
 * @function endsWith
 * @export
 * @summary Reports whether `haystack` ends with `needle`
 * @param {string} haystack the string to search
 * @param {string} needle the substring to search for
 * @returns {boolean} whether haystack ends with needle
 */
function endsWith(haystack, needle) {
    if (!haystack) {
        return false;
    }
    var offset = haystack.length - needle.length;
    return haystack.slice(offset) === needle;
}
exports.endsWith = endsWith;
/**
 * @function escapeRegExp
 * @export
 * @summary Escapes special characters in a string, enabling
 * the string's use as a regex
 * @param {string} str the string to escape
 * @returns {string} the escaped string
 */
function escapeRegExp(str) {
    return String(str).replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
}
exports.escapeRegExp = escapeRegExp;
/**
 * @function isEmail
 * @export
 * @summary determines whether a string looks like
 * an email address
 * @param {string} str the potential email address
 * @returns {boolean} whether the string looks like an email
 */
function isEmail(str) {
    var regEx = new RegExp('^(([^<>()\\[\\]\\\\.,;:\\s@"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@"]+)*)|' +
        '(".+"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[' +
        'a-zA-Z0-9]{2,}))$');
    return regEx.test(str);
}
/**
 * @function isUrl
 * @export
 * @summary determines whether a string looks like
 * a url
 * @param {string} str the potential url
 * @returns {boolean} whether the string looks like a url
 */
function isUrl(str) {
    var regEx = new RegExp('^(?:(?:https?|ftp):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1' +
        ',3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,' +
        '3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:' +
        '[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)' +
        '(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})' +
        '))(?::\\d{2,5})?(?:[/?#]\\S*)?$', 'i');
    return regEx.test(str);
}
/**
 * @function isIP
 * @export
 * @summary determins whether a string looks like
 * an ip address (either IPv4 or IPv6)
 * @param {string} str the potential ip address
 * @returns {boolean} whether the string looks like an ip
 */
function isIP(str) {
    return isIPv4(str) || isIPv6(str);
}
/**
 * @function isIPv4
 * @export
 * @summary determines whether a string looks like
 * an ip address
 * @param {string} str the potential ip address
 * @returns {boolean} whether the string looks like an ip
 */
function isIPv4(str) {
    var regEx = /^(25[0-5]|2[0-4]\d|1\d\d|0?[0-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|0?[0-9]?\d)){3}$/;
    return regEx.test(str);
}
/**
 * @function isIPv6
 * @export
 * @summary determines whether a string looks like
 * an ip address
 * @param {string} str the potential ip address
 * @returns {boolean} whether the string looks like an ip
 */
function isIPv6(str) {
    var regEx = new RegExp('^\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:' +
        '){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[' +
        '1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1' +
        '\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((' +
        ':[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[' +
        '0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4}' +
        ')|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d' +
        '\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,' +
        '4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})' +
        ')|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|' +
        '2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-F' +
        'a-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]' +
        '|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*$');
    return regEx.test(str);
}
/**
 * @function caseInsensitivePermutations
 * @export
 * @summary generates permutations of all case variations of a given string.
 * @param str {string} The string to get permutations of
 * @returns {string[]} an array of permutations
 */
function caseInsensitivePermutations(str) {
    var permutations = [''];
    var _loop_1 = function (i) {
        var ch = str.charAt(i);
        permutations = _.flatten(permutations.map(function mapPermutations(prefix) {
            var lowerCaseChar = ch.toLowerCase();
            var upperCaseChar = ch.toUpperCase();
            // Don't add unneccesary permutations when ch is not a letter
            if (lowerCaseChar === upperCaseChar) {
                return [prefix + ch];
            }
            else {
                return [prefix + lowerCaseChar, prefix + upperCaseChar];
            }
        }));
    };
    for (var i = 0; i < str.length; i++) {
        _loop_1(i);
    }
    return permutations;
}
exports.caseInsensitivePermutations = caseInsensitivePermutations;
function nonEmpty(str) {
    return typeof str === 'string' && str.length > 0;
}
//# sourceMappingURL=string.js.map