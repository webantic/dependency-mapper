export { assert, assertString, assertBoolean, assertNumber, assertInt, assertObject };
export interface IAssert {
    (assertion: any): void;
    (assertion: any, errorCodeOrMeta: any): void;
    (assertion: any, errorCode: number, meta: any): void;
}
/**
 * @function assert
 * @export
 * @summary if the assertion is falsey, throws
 * an error
 * @param {any} assertion anything that should be truthy to
 * not throw an error
 * @param {number} errorCode the error code
 * @param {any} [meta] additional info to include with the error
 */
declare const assert: IAssert;
/**
 * Assert that the typeof ${value} is 'string'
 *
 * @param value any value to check the type of
 * @param name the name of the value being checked
 */
declare const assertString: (value: any, name: string) => any;
/**
 * Assert that the typeof ${value} is 'boolean'
 *
 * @param value any value to check the type of
 * @param name the name of the value being checked
 */
declare const assertBoolean: (value: any, name: string) => any;
/**
 * Assert that the typeof ${value} is 'number'
 *
 * @param value any value to check the type of
 * @param name the name of the value being checked
 */
declare const assertNumber: (value: any, name: string) => any;
/**
 * Assert that the ${value} is an integer
 *
 * @param value any value to check the type of
 * @param name the name of the value being checked
 */
declare const assertInt: (value: any, name: string) => any;
/**
 * Assert that the typeof ${value} is 'object'
 *
 * @param value any value to check the type of
 * @param name the name of the value being checked
 */
declare const assertObject: (value: any, name: string) => any;
