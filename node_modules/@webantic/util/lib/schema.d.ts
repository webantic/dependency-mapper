/// <reference path="../typings/schema.d.ts" />
export { optional, blackbox, optionalBlackbox, createdDate, updatedDate, geoJSON, defaultValue, optionalDefaultValue, optionalMinZeroNumber, minZeroNumber, minZeroNumberWithDefault, positiveInteger, optionalPositiveInteger, positiveNumber, optionalPositiveNumber, integerBetweenValues, optionalIntegerBetweenValues, idParams, checkParameters };
/**
 * @function optional
 * @export
 * @summary returns an optional primitive definition
 * @param {PrimitiveConstructor} primitive
 * @returns {Object} the schema value definition
 */
declare function optional(primitive: PrimitiveConstructor): Schema.IOptional;
/**
 * @function blackbox
 * @export
 * @summary returns an blackbox primitive definition
 * @param {PrimitiveConstructor} primitive (technically this will always be `Object`
 * but it is configurable for consistency)
 * @returns {IBlackbox} the schema value definition
 */
declare function blackbox(primitive: PrimitiveConstructor): Schema.IBlackbox;
/**
 * @function optionalBlackbox
 * @export
 * @summary returns an optional, blackboxed primitive definition
 * @param {PrimitiveConstructor} primitive (technically this will always be `Object`
 * but it is configurable for consistency)
 * @returns {IOptionalBlackbox} the schema value definition
 */
declare function optionalBlackbox(primitive: PrimitiveConstructor): Schema.IOptionalBlackbox;
/**
 * @function createdDate
 * @export
 * @summary returns a typedef with a type of Date and an
 * autoValue function which returns a new date on insert
 * @returns {Schema.ICreatedDate} the schema value definition
 */
declare function createdDate(): Schema.ICreatedDate;
/**
 * @function updatedDate
 * @export
 * @summary returns a typedef with a type of Date and an
 * autoValue function which returns a new date
 * @returns {Schema.IUpdatedDate} the schema value definition
 */
declare function updatedDate(): Schema.IUpdatedDate;
/**
 * @function geoJSON
 * @export
 * @summary returns a typedef for a geoJSON object
 * @param {*} SimpleSchema A reference to SimpleSchema
 * @returns {Schema.IGeoJSON} the schema value definition
 */
declare function geoJSON(SimpleSchema: any): any;
/**
 * @function defaultValue
 * @export
 * @summary returns a typedef for a field with a defined default
 * @param {PrimitiveConstructor} type The type constructor (e.g. Number)
 * @param {any} value The default value
 */
declare function defaultValue(type: PrimitiveConstructor, value: any): any;
/**
 * @function optionalDefaultValue
 * @export
 * @summary returns a typedef for an optional field with a defined default
 * @param {PrimitiveConstructor} type The type constructor (e.g. Number)
 * @param {any} value The default value
 */
declare function optionalDefaultValue(type: PrimitiveConstructor, value: any): any;
/**
 * @function minZeroNumber
 * @export
 * @summary returns a typedef for a field for a number with a minimum
 * permitted value of zero
 * @returns {Object} typedef for number field with min value of 0
 */
declare function minZeroNumber(): {
    type: NumberConstructor;
    min: number;
};
/**
 * @function optionalMinZeroNumber
 * @export
 * @summary returns a typedef for an optional field for a number with a minimum
 * permitted value of zero
 * @returns {Object} typedef for optional number field with min value of 0
 */
declare function optionalMinZeroNumber(): any;
/**
 * @function minZeroNumberWithDefault
 * @export
 * @summary returns a typedef for a field for a number with a minimum
 * permitted and default value of zero
 * @returns {Object} typedef for number field with minimum and default value of 0
 */
declare function minZeroNumberWithDefault(): any;
/**
 * @function integerBetweenValues
 * @export
 * @summary returns a typedef for a field for an integer between two values
 * @param min {number} the minimum permitted value
 * @param max {number} the maximum permitted value
 */
declare function integerBetweenValues(min: number, max: number): {
    type: string;
    min: number;
    max: number;
};
/**
 * @function optionalIntegerBetweenValues
 * @export
 * @summary returns a typedef for an optional field for an integer between two values
 * @param min {number} the minimum permitted value
 * @param max {number} the maximum permitted value
 */
declare function optionalIntegerBetweenValues(min: number, max: number): any;
/**
 * @function idParams
 * @export
 * @summary returns an array with a single object in which defines an _id path param
 * @param {string} name the name of the field
 * @returns {any} the params array
 */
declare function idParams(name: string): any;
/**
 * @function checkParameters
 * @export
 * @summary Check incoming parameters against a schema
 * @param {any} context The `this` context
 * @param {any} params The incoming parameters
 * @param {any} schema A SimpleSchema schema
 * @throws {400} on validation error
 * @returns {boolean} true
 */
declare function checkParameters(context: any, params: any, schema: any): boolean;
/**
 * @function positiveNumber
 * @export
 * @summary returns a typedef for a field for a number with a minimum
 * permitted value greater than zero
 * @returns {Object} typedef for number field with positive min value (> 0)
 */
declare function positiveNumber(): {
    type: NumberConstructor;
    min: number;
    exclusiveMin: boolean;
};
/**
 * @function optionalPositiveNumber
 * @export
 * @summary returns a typedef for an optional field for a number with a minimum
 * permitted value of zero
 * @returns {Object} typedef for optional number field with positive min value (> 0)
 */
declare function optionalPositiveNumber(): {
    type: NumberConstructor;
    min: number;
    exclusiveMin: boolean;
    optional: boolean;
};
/**
 * @function positiveInteger
 * @export
 * @summary returns a typedef for a field for an integer with a minimum
 * permitted value of zero
 * @returns {Object} typedef for integer field with positive min value (> 0)
 */
declare function positiveInteger(): {
    type: string;
    min: number;
    exclusiveMin: boolean;
};
/**
 * @function optionalPositiveInteger
 * @export
 * @summary returns a typedef for an optional field for an integer with a minimum
 * permitted value of zero
 * @returns {Object} typedef for optional integer field with positive min value (> 0)
 */
declare function optionalPositiveInteger(): {
    type: string;
    min: number;
    exclusiveMin: boolean;
    optional: boolean;
};
