/** @module util/date */
const HOUR_AS_MILLISECONDS = 1000 * 60 * 60
const DAY_AS_MILLISECONDS = 24 * HOUR_AS_MILLISECONDS
const WEEK_AS_MILLISECONDS = 7 * DAY_AS_MILLISECONDS
const MONTH_AS_MILLISECONDS = 30 * DAY_AS_MILLISECONDS

export {
  randomBetween,
  getDate,
  yesterday,
  tomorrow,
  lastWeek,
  nextWeek,
  lastMonth,
  nextMonth,
  getPreviousDay,
  getNextDay
}

/**
 * @function randomBetween
 * @export
 * @summary gets a random date between two others
 * @param {Date} from random date must be greater
 * than this
 * @param {Date} to random date must be less than
 * this
 * @returns {Date} the random date
 */
function randomBetween(from: Date, to: Date): Date {
  let fromMilli = from.getTime()
  let toMilli = to.getTime()

  return new Date(Math.floor(Math.random() * (toMilli - fromMilli + 1) + fromMilli))
}

/**
 * Gets a Date object of a given offset from now
 *
 * @param {string} [startEnd] Either 'start' or 'end' to round the date to the
 * start or end of the day
 * @param {string} [prevNext='prev']
 * @param {string} [interval='day']
 * @returns {Date} the date object
 */
function getDate(startEnd?: 'start' | 'end', prevNext = 'prev', interval = 'day') {
  const nowMilli = new Date().getTime()
  const operator = prevNext === 'next' ? 1 : -1
  let date

  if (interval === 'month') {
    date = new Date(nowMilli + (MONTH_AS_MILLISECONDS * operator))
  } else if (interval === 'week') {
    date = new Date(nowMilli + (WEEK_AS_MILLISECONDS * operator))
  } else {
    date = new Date(nowMilli + (DAY_AS_MILLISECONDS * operator))
  }

  if (startEnd === 'start') {
    date.setHours(0)
    date.setMinutes(0)
    date.setSeconds(0)
    date.setMilliseconds(0)
  } else if (startEnd === 'end') {
    date.setHours(23)
    date.setMinutes(59)
    date.setSeconds(59)
    date.setMilliseconds(999)
  }

  return date
}

/**
 * Return a Date object from 24 hours ago
 *
 * @param {string} [startEnd] either 'start' or 'end' - determines whether to round
 * the date to the start or end of the day
 */
function yesterday(startEnd?: 'start' | 'end') {
  return getDate(startEnd, 'prev', 'day')
}

/**
 * Return a Date object for 24 hours in the future
 *
 * @param {string} [startEnd] either 'start' or 'end' - determines whether to round
 * the date to the start or end of the day
 */
function tomorrow(startEnd?: 'start' | 'end') {
  return getDate(startEnd, 'next', 'day')
}

/**
 * Return a Date object from 7 days ago
 *
 * @param {string} [startEnd] either 'start' or 'end' - determines whether to round
 * the date to the start or end of the day
 */
function lastWeek(startEnd?: 'start' | 'end') {
  return getDate(startEnd, 'prev', 'week')
}

/**
 * Return a Date object for 7 days in the future
 *
 * @param {string} [startEnd] either 'start' or 'end' - determines whether to round
 * the date to the start or end of the day
 */
function nextWeek(startEnd?: 'start' | 'end') {
  return getDate(startEnd, 'next', 'week')
}

/**
 * Return a Date object from 30 days ago
 *
 * @param {string} [startEnd] either 'start' or 'end' - determines whether to round
 * the date to the start or end of the day
 */
function lastMonth(startEnd?: 'start' | 'end') {
  return getDate(startEnd, 'prev', 'month')
}

/**
 * Return a Date object for 30 days in the future
 *
 * @param {string} [startEnd] either 'start' or 'end' - determines whether to round
 * the date to the start or end of the day
 */
function nextMonth(startEnd?: 'start' | 'end') {
  return getDate(startEnd, 'next', 'month')
}

/**
 * Can be passed either a full or three-letter day name and will return the previous day's name
 *
 * @param {string} day a full or three-letter day name
 * @returns {string} the name of the previous day
 */
function getPreviousDay(day: string): string {
  if (!day || typeof day !== 'string') {
    throw new TypeError('`day` was not supplied or was not a string')
  }

  day = day.toLowerCase()
  switch (day) {
    case 'mon': case 'monday': return 'sunday'
    case 'tue': case 'tuesday': return 'monday'
    case 'wed': case 'wednesday': return 'tuesday'
    case 'thu': case 'thursday': return 'wednesday'
    case 'fri': case 'friday': return 'thursday'
    case 'sat': case 'saturday': return 'friday'
    case 'sun': case 'sunday': return 'saturday'
  }
}

/**
 * Can be passed either a full or three-letter day name and will return the next day's name
 *
 * @param {string} day a full or three-letter day name
 * @returns {string} the name of the next day
 */
function getNextDay(day: string): string {
  if (!day || typeof day !== 'string') {
    throw new TypeError('`day` was not supplied or was not a string')
  }

  day = day.toLowerCase()
  switch (day) {
    case 'mon': case 'monday': return 'tuesday'
    case 'tue': case 'tuesday': return 'wednesday'
    case 'wed': case 'wednesday': return 'thursday'
    case 'thu': case 'thursday': return 'friday'
    case 'fri': case 'friday': return 'saturday'
    case 'sat': case 'saturday': return 'sunday'
    case 'sun': case 'sunday': return 'monday'
  }
}
