/** @module util/number */

export {
  clamp,
  random,
  pad
}

/**
 * @function clamp
 * @export
 * @summary ensures that a number falls between two
 * others, constraining it if necessary
 * @param {number} val the number to clamp
 * @param {number} min the minimum that the number
 * should be
 * @param {number} max the maximum that the number
 * should be
 * @returns {number} the clamped number
 */
function clamp(val: number, min: number, max: number): number {
  if (isNaN(val)) {
    val = 0
  }

  return Math.min(Math.max(val, min), max)
}

/**
 * @function random
 * @export
 * @summary Returns a random integer, optionally between an min and max
 * @param {number} [min] The minimum acceptable value
 * @param {number} [max] The maximum acceptable value
 */
function random(min?: number, max?: number): number {
  if (typeof min !== 'number') {
    min = 0
  }
  if (typeof max !== 'number') {
    max = (Number as any).MAX_SAFE_INTEGER || 999999
  }

  return Math.floor(Math.random() * (max - min + 1) + min)
}

/**
 * @function pad
 * @export
 * @summary pads out a number to specified width with specified char or 0
 * @param number
 * @param width
 * @param char
 * @returns {string} the padded number
 */
function pad(number: any, width: number, char?: string): string {
  char = char || '0'
  number = number + ''

  return (number.length >= width) ? number : new Array((width - number.length) + 1).join(char) + number
}
