/// <reference path="../typings/schema.d.ts" />
/** @module util/schema */

import { assert } from './meteor'

export {
  optional,
  blackbox,
  optionalBlackbox,
  createdDate,
  updatedDate,
  geoJSON,
  defaultValue,
  optionalDefaultValue,
  optionalMinZeroNumber,
  minZeroNumber,
  minZeroNumberWithDefault,
  positiveInteger,
  optionalPositiveInteger,
  positiveNumber,
  optionalPositiveNumber,
  integerBetweenValues,
  optionalIntegerBetweenValues,
  idParams,
  checkParameters
}

/**
 * @function optional
 * @export
 * @summary returns an optional primitive definition
 * @param {PrimitiveConstructor} primitive
 * @returns {Object} the schema value definition
 */
function optional(primitive: PrimitiveConstructor): Schema.IOptional {
  return {
    type: primitive,
    optional: true
  }
}

/**
 * @function blackbox
 * @export
 * @summary returns an blackbox primitive definition
 * @param {PrimitiveConstructor} primitive (technically this will always be `Object`
 * but it is configurable for consistency)
 * @returns {IBlackbox} the schema value definition
 */
function blackbox(primitive: PrimitiveConstructor): Schema.IBlackbox {
  return {
    type: primitive || Object,
    blackbox: true
  }
}

/**
 * @function optionalBlackbox
 * @export
 * @summary returns an optional, blackboxed primitive definition
 * @param {PrimitiveConstructor} primitive (technically this will always be `Object`
 * but it is configurable for consistency)
 * @returns {IOptionalBlackbox} the schema value definition
 */
function optionalBlackbox(primitive: PrimitiveConstructor): Schema.IOptionalBlackbox {
  return {
    type: primitive || Object,
    optional: true,
    blackbox: true
  }
}

/**
 * @function createdDate
 * @export
 * @summary returns a typedef with a type of Date and an
 * autoValue function which returns a new date on insert
 * @returns {Schema.ICreatedDate} the schema value definition
 */
function createdDate(): Schema.ICreatedDate {
  return {
    type: Date,
    autoValue() {
      if (this.isInsert) {
        return new Date()
      } else if (this.isUpsert) {
        return { $setOnInsert: new Date() }
      } else {
        this.unset()
      }
    }
  }
}

/**
 * @function updatedDate
 * @export
 * @summary returns a typedef with a type of Date and an
 * autoValue function which returns a new date
 * @returns {Schema.IUpdatedDate} the schema value definition
 */
function updatedDate(): Schema.IUpdatedDate {
  return {
    type: Date,
    autoValue() {
      return new Date()
    }
  }
}

/**
 * @function geoJSON
 * @export
 * @summary returns a typedef for a geoJSON object
 * @param {*} SimpleSchema A reference to SimpleSchema
 * @returns {Schema.IGeoJSON} the schema value definition
 */
function geoJSON(SimpleSchema: any): any {
  return new SimpleSchema({
    'type': {
      type: String
    },
    'coordinates': {
      type: Array,
      minCount: 2,
      maxCount: 2
    },
    'coordinates.$': {
      type: Number
    }
  })
}

/**
 * @function defaultValue
 * @export
 * @summary returns a typedef for a field with a defined default
 * @param {PrimitiveConstructor} type The type constructor (e.g. Number)
 * @param {any} value The default value
 */
function defaultValue(type: PrimitiveConstructor, value: any): any {
  return {
    type,
    defaultValue: value
  }
}

/**
 * @function optionalDefaultValue
 * @export
 * @summary returns a typedef for an optional field with a defined default
 * @param {PrimitiveConstructor} type The type constructor (e.g. Number)
 * @param {any} value The default value
 */
function optionalDefaultValue(type: PrimitiveConstructor, value: any): any {
  return {
    type,
    optional: true,
    defaultValue: value
  }
}

/**
 * @function minZeroNumber
 * @export
 * @summary returns a typedef for a field for a number with a minimum
 * permitted value of zero
 * @returns {Object} typedef for number field with min value of 0
 */
function minZeroNumber() {
  return {
    type: Number,
    min: 0
  }
}

/**
 * @function optionalMinZeroNumber
 * @export
 * @summary returns a typedef for an optional field for a number with a minimum
 * permitted value of zero
 * @returns {Object} typedef for optional number field with min value of 0
 */
function optionalMinZeroNumber() {
  return (Object as any).assign(minZeroNumber(), { optional: true })
}

/**
 * @function minZeroNumberWithDefault
 * @export
 * @summary returns a typedef for a field for a number with a minimum
 * permitted and default value of zero
 * @returns {Object} typedef for number field with minimum and default value of 0
 */
function minZeroNumberWithDefault() {
  return (Object as any).assign(minZeroNumber(), { defaultValue: 0 })
}

/**
 * @function integerBetweenValues
 * @export
 * @summary returns a typedef for a field for an integer between two values
 * @param min {number} the minimum permitted value
 * @param max {number} the maximum permitted value
 */
function integerBetweenValues(min: number, max: number) {
  return {
    type: 'SimpleSchema.Integer',
    min,
    max
  }
}

/**
 * @function optionalIntegerBetweenValues
 * @export
 * @summary returns a typedef for an optional field for an integer between two values
 * @param min {number} the minimum permitted value
 * @param max {number} the maximum permitted value
 */
function optionalIntegerBetweenValues(min: number, max: number) {
  return (Object as any).assign(integerBetweenValues(min, max), { optional: true })
}

/**
 * @function idParams
 * @export
 * @summary returns an array with a single object in which defines an _id path param
 * @param {string} name the name of the field
 * @returns {any} the params array
 */
function idParams(name: string): any {
  return [{
    in: 'path',
    name,
    description: 'The mongo id of the document to update',
    type: 'string',
    required: true
  }]
}

/**
 * @function checkParameters
 * @export
 * @summary Check incoming parameters against a schema
 * @param {any} context The `this` context
 * @param {any} params The incoming parameters
 * @param {any} schema A SimpleSchema schema
 * @throws {400} on validation error
 * @returns {boolean} true
 */
function checkParameters(context: any, params: any, schema: any): boolean {
  const validator = schema.newContext()
  validator.validate(params)
  assert.call(context, validator.isValid(), 400, validator.validationErrors())

  return true
}

/**
 * @function positiveNumber
 * @export
 * @summary returns a typedef for a field for a number with a minimum
 * permitted value greater than zero
 * @returns {Object} typedef for number field with positive min value (> 0)
 */
function positiveNumber() {
  return {
    type: Number,
    min: 0,
    exclusiveMin: true
  }
}

/**
 * @function optionalPositiveNumber
 * @export
 * @summary returns a typedef for an optional field for a number with a minimum
 * permitted value of zero
 * @returns {Object} typedef for optional number field with positive min value (> 0)
 */
function optionalPositiveNumber() {
  return {
    type: Number,
    min: 0,
    exclusiveMin: true,
    optional: true
  }
}

/**
 * @function positiveInteger
 * @export
 * @summary returns a typedef for a field for an integer with a minimum
 * permitted value of zero
 * @returns {Object} typedef for integer field with positive min value (> 0)
 */
function positiveInteger() {
  return {
    type: 'SimpleSchema.Integer',
    min: 0,
    exclusiveMin: true
  }
}

/**
 * @function optionalPositiveInteger
 * @export
 * @summary returns a typedef for an optional field for an integer with a minimum
 * permitted value of zero
 * @returns {Object} typedef for optional integer field with positive min value (> 0)
 */
function optionalPositiveInteger() {
  return {
    type: 'SimpleSchema.Integer',
    min: 0,
    exclusiveMin: true,
    optional: true
  }
}

/**
 * @function immutable
 * @export
 * @summary returns a typedef for a field that should not be updated once set
 * @returns {Object} typedef for field with immutable value
 */
function immutable(type: PrimitiveConstructor) {
  return {
    denyUpdate: true,
    type: type
  }
}

/**
 * @function optionalImmutable
 * @export
 * @summary returns a typedef for an optional field that should not be updated once set
 * @returns {Object} typedef for optional field with immutable value
 */
function optionalImmutable(type: PrimitiveConstructor) {
  return {
    denyUpdate: true,
    type: type,
    optional: true
  }
}
