/** @module util/meteor */

declare var Meteor: any

export {
  assert,
  assertString,
  assertBoolean,
  assertNumber,
  assertInt,
  assertObject
}

let statusMap = require('./httpStatusCodes.json')

export interface IAssert {
  (assertion: any): void
  (assertion: any, errorCodeOrMeta: any): void
  (assertion: any, errorCode: number, meta: any): void
}

/**
 * @function assert
 * @export
 * @summary if the assertion is falsey, throws
 * an error
 * @param {any} assertion anything that should be truthy to
 * not throw an error
 * @param {number} errorCode the error code
 * @param {any} [meta] additional info to include with the error
 */
const assert = function assert(assertion: any, errorCode: number, meta: any) {
  if (typeof errorCode !== 'number') {
    if (meta === undefined) {
      meta = errorCode
    }

    errorCode = 500
  }

  if (!assertion) {
    if (typeof meta === 'object') {
      try {
        meta = JSON.stringify(meta)
      } catch (ex) { /* no-op */ }
    }

    let error: any
    if (typeof Meteor !== 'undefined') {
      meta = meta ? ': ' + meta : ''
      error = new Meteor.Error(errorCode, statusMap[String(errorCode)] + meta)
    } else {
      meta = meta ? '. ' + meta : ''
      error = new Error(errorCode + ': ' + statusMap[String(errorCode)] + meta)
    }

    if ('setHttpStatusCode' in this) {
      this.setHttpStatusCode(errorCode)
    }

    // no stack traces from production errors
    if (process.env.NODE_ENV === 'production') {
      // debug(error, meta)
      error.stack = null
    }

    error.statusCode = errorCode
    throw error
  }
} as IAssert

  ; (assert as any).statusMap = statusMap // for reference

/**
 * Assert that the typeof ${value} is 'string'
 *
 * @param value any value to check the type of
 * @param name the name of the value being checked
 */
const assertString = function (value: any, name: string) {
  return assert.call(
    this,
    typeof value === 'string',
    400,
    `Expected typeof ${name} to be 'string' but got '${typeof value}'`
  )
}

/**
 * Assert that the typeof ${value} is 'boolean'
 *
 * @param value any value to check the type of
 * @param name the name of the value being checked
 */
const assertBoolean = function (value: any, name: string) {
  return assert.call(
    this,
    typeof value === 'boolean',
    400,
    `Expected typeof ${name} to be 'boolean' but got '${typeof value}'`
  )
}

/**
 * Assert that the typeof ${value} is 'number'
 *
 * @param value any value to check the type of
 * @param name the name of the value being checked
 */
const assertNumber = function (value: any, name: string) {
  return assert.call(
    this,
    typeof value === 'number',
    400,
    `Expected typeof ${name} to be 'number' but got '${typeof value}'`
  )
}

/**
 * Assert that the ${value} is an integer
 *
 * @param value any value to check the type of
 * @param name the name of the value being checked
 */
const assertInt = function (value: any, name: string) {
  assertNumber.call(this, value, name)

  return assert.call(
    this,
    value % 1 === 0,
    400,
    `Expected ${name} to be an integer but got a float`
  )
}

/**
 * Assert that the typeof ${value} is 'object'
 *
 * @param value any value to check the type of
 * @param name the name of the value being checked
 */
const assertObject = function (value: any, name: string) {
  return assert.call(
    this,
    typeof value === 'object' && value !== null,
    400,
    `Expected typeof ${name} to be 'object' but got '${typeof value}'`
  )
}
