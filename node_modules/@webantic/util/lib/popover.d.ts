/** @module util/popover */
export { open, openDropdown, positionFixed };
import 'jquery';
export declare type JQuery = any;
import { MultiEmitter } from './emitter';
export declare type Edge = 'top' | 'bottom' | 'left' | 'right';
export interface PositionOptions {
    /**
     * Number between 0 === left and 1 === right, 0.5 === center.
     * 0/left by default
     */
    align?: number;
    /**
     * Currently only top and bottom are supported
     * Defaults to bottom
     */
    where?: Edge | Edge[];
    /**
     * Whether the element to should match the width of the relativeTo element
     * Defaults to false
     */
    matchElementWidth?: boolean;
    /**
     * Add a triangle to the thing we're pointing at?
     * Defaults to false
     */
    triangle: boolean;
    /**
     * How much space should we try to allow around the edge of the window (top, right, bottom, left)
     * Defaults to 10, 10, 10, 10
     */
    gutter?: [number, number, number, number];
    /**
     * CSS selector. If specified, will hide the matching element if it has a CSS variant
     * (-top, -right, -bottom, -left) that doesn't match the element's rendered position
     */
    positionVariantSelector?: string;
    allowResize?: boolean;
    /**
     * Specify viewport to use to determine element's position
     */
    parent?: JQuery | object;
}
export interface PopoverOptions {
    /**
     * Should the popover opened match the width of the target element?
     */
    matchElementWidth: boolean;
    /**
     * Where abouts should the popover be aligned horizontally? 0 == left, 1 == right,
     * 0.5 center and everywhere in between
     */
    xAlign: number;
    /**
     * Any classes to be applied to the opened popover
     */
    css: string;
    /**
     *
     */
    overflow: boolean;
    /**
     * Is this popover a dropdown?
     */
    dropdown: boolean;
}
export declare type PopoverContent = string | {
    template: string;
    data?: any;
} | JQuery;
export interface SpecialDropdownItem {
    /**
     * The action that should run upon clicking the dropdown (the dropdown will automatically close after running this)
     */
    action: Function;
    /**
     * The textual representation of this menu item that appears in the dropdown
     */
    name: string;
    /**
     * Sub items of this item (optional)
     */
    items?: DropDownItem[];
    /**
     * Any special css classes as a space-separated string that should be applied to this item specificially
     */
    css?: string;
}
export declare type DropDownItem = string | SpecialDropdownItem;
/**
 * Opens a popover with the specified content located on the edge of the source object
 * @param source the target element this popover should be attached to
 * @param content the content to show in the popover
 * @param options
 */
declare function open(source: HTMLElement, $content: PopoverContent, options: PopoverOptions): {
    events: MultiEmitter;
    popover: any;
    close: () => void;
};
/**
 * Opens a dropdown, which internally is still a popover with some special additions
 * @param source which element should the dropdown be attached to?
 * @param dropDownItems the items that should be shown in the dropdown @see DropDownItem
 * @param options
 */
declare function openDropdown($source: HTMLElement, dropDownItems: DropDownItem[], options: PopoverOptions): void | {
    popover: {
        events: MultiEmitter;
        popover: any;
        close: () => void;
    };
    close: () => void;
    up: () => void;
    down: () => void;
    acceptSelected: () => void;
};
export interface PositionReturn {
    triangle?: JQuery;
    positioned: Edge | 'center';
}
/**
 * Position an element relative to another
 * @param element the element to position
 * @param relativeTo the element to use as an anchor
 */
declare function positionFixed(element: HTMLElement, relativeTo: HTMLElement, options?: PositionOptions): PositionReturn;
